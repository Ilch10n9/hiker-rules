[{"last_chapter_rule":"js:\nfunction getDoubanRes(url) {\n    if (url.indexOf('apikey') === -1) {\n        url += (url.indexOf('?') === -1 ? '?' : '&') + \"apikey=0dad551ec0f84ed02907ff5c42e8ec70\"\n    }\n    let s = fetch(url, {\n        headers: {\n            \"User-Agent\": \"Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/7.9.0.beta2(215) Android/25 product/TAS-AL00 vendor/HUAWEI model/TAS-AL00  rom/android  network/wifi  platform/mobile com.douban.frodo/7.9.0.beta2(215) Rexxar/1.2.151  platform/mobile 1.2.151\"\n        },\n        method: 'POST',\n        body: 'host=frodo.douban.com'\n    });\n    return JSON.parse(s);\n}\nlet type = getParam('type', ''),\n    id = getParam('id', ''),\n    title = getParam('title', '');\nlet res = getDoubanRes(\"https://frodo.douban.com/api/v2/\" + type + \"/\" + id);\nlet update = \"\";\nif (title == '') {\n    let length = res.vendors.length;\n    update += length > 0 ? '共' + length + '个片源' : '暂无片源';\n    if (length > 0) {\n        let e = res.vendors[0];\n        update += e.episodes_info ? \"|\" + e.episodes_info : \"\";\n    }\n} else {\n    for (let e of res.vendors) {\n        if (e.title == title) {\n            update += e.episodes_info ? e.episodes_info : \"\";\n            break;\n        }\n    }\n}\nsetResult(update);","title":"青豆","author":"Joker&&Reborn","version":11,"type":"video","url":"hiker://empty/","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet forceUrgencyMode = 0\nif (forceUrgencyMode) {\n    let e = '当前为强制急救模式'\n    let rule = JSON.parse(request(\"hiker://page/urgencyMode\")).rule;\n    eval(rule)\n} else {\n    try {\n        eval(fetch(getVar(\"qdb_file\")));\n        home();\n    } catch (e) {\n        let rule = JSON.parse(request(\"hiker://page/urgencyMode\")).rule;\n        eval(rule)\n    }\n}","searchFind":"js:\ntry {\n    eval(fetch(getVar(\"qdb_file\")));\n    search();\n} catch (e) {\n    let rule = JSON.parse(request(\"hiker://page/urgencyMode\")).rule;\n    eval(rule)\n}","search_url":"hiker://empty/$page{fypage}/#/**","titleColor":"","group":"①推荐","detail_col_type":"movie_1_vertical_pic","detail_find_rule":"js:\ntry {\n    eval(fetch(getVar(\"qdb_file\")));\n    erji();\n} catch (e) {\n    let rule = JSON.parse(request(\"hiker://page/urgencyMode\")).rule;\n    eval(rule)\n}","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"let file = \"hiker://files/rules/joker/qdb.js\";\nlet gitfile = 'https://gitcode.net/qq_41846756/hiker/-/raw/master/qdb.js';\nlet ver = getItem('newver','');\nif (!fetch(file) || ver < MY_RULE.version) {\n    writeFile(file, fetch(gitfile));\n    setItem('newver',String(MY_RULE.version));\n}\nputVar({\n    key: \"qdb_file\",\n    value: file\n});\ntry {\n    eval(fetch(file));\n    pre();\n} catch (e) {\n    let rule = JSON.parse(request(\"hiker://page/urgencyMode\")).rule;\n    eval(rule)\n}","pages":"[{\"col_type\":\"movie_3\",\"name\":\"配置编辑界面\",\"path\":\"setting-editor\",\"rule\":\"js:\\neval(request(getVar('qdb_file')))\\nlet d = [];\\nlet configType = getVar(\\\"input_config_type\\\")\\nif (configType === '解析插件配置') {\\n    setPageTitle(\\\"编辑解析代码\\\")\\n    analysisModeEditPage(d)\\n} else if (configType === '影片详情页面配置') {\\n    setPageTitle(\\\"编辑影片详情页面代码\\\")\\n    detailViewModeEditPage(d)\\n} else {\\n    setError('错误的配置');\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"解除被封ip\",\"path\":\"releaseIP\",\"rule\":\"js:\\nlet id = getParam('id');\\nlet d = [];\\nd.push({\\n    title: '您已被封禁IP地址或触发了人机验证，请按照以下步骤处理(如不处理您将在一段时间内无法正常获取剧集列表)',\\n    url: 'hiker://empty',\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '1.点击此处导入自动获取Cookie插件',\\n    url: $()\\n        .lazyRule(() => {\\n            let getDoubanCookie = \\\"(function(){if(window['location']['host']=='www.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://www.douban.com/'));}if(window['location']['host']=='m.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://m.douban.com/'));}}());\\\"\\n            if (!fileExist('hiker://files/cache/global_getDoubanCookie.js')) {\\n                writeFile('hiker://files/cache/global_getDoubanCookie.js', getDoubanCookie);\\n            };\\n            return 'rule://' + base64Encode('海阔视界，网页插件￥js_url￥global_getDoubanCookie@hiker://files/cache/global_getDoubanCookie.js');\\n        }),\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '2.点击此处进入网页进行登录或人机验证，完成后返回此页面',\\n    url: 'https://movie.douban.com/subject/' + id + '/',\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '3.完成登录或人机验证后返回影片详情页面重新进入',\\n    url: 'hiker://empty',\\n    col_type: 'text_1'\\n});\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"抢救页面\",\"path\":\"urgencyMode\",\"rule\":\"js:\\nlet d = [];\\nd.push({\\n    title: '很明显,出了一些小问题,建议重生',\\n    col_type: 'text_center_1'\\n})\\nd.push({\\n    title: '点我更新依赖',\\n    col_type: 'text_1',\\n    url: $('hiker://empty').lazyRule(() => {\\n        let file = \\\"hiker://files/rules/joker/qdb.js\\\";\\n        let gitfile = 'https://gitcode.net/qq_41846756/hiker/-/raw/master/qdb.js';\\n        let text = fetch(gitfile);\\n        writeFile(file, text);\\n        //back(true);\\n        return 'toast://依赖文件更新成功'\\n    })\\n})\\nd.push({\\n    title: '点我恢复默认设置',\\n    col_type: 'text_1',\\n    url: $(\\\"确定要恢复？\\\").confirm(() => {\\n        defaultConfigs = {\\n            starColor: \\\"#ffac2d\\\",\\n            chooseColor: \\\"#FA7298\\\",\\n            quickSearchConfigs: {\\n                order: []\\n            },\\n            detailsViewConfigs: {\\n                use: \\\"默认\\\",\\n                \\\"默认\\\": {\\n                    config: \\\"eval(fetch(getVar('qdb_file')));detailsView(type, id);\\\"\\n                }\\n            },\\n            analysisConfigs: {\\n                use: \\\"不解析\\\",\\n                \\\"不解析\\\": {\\n                    config: $.toString(() => {\\n                        return input;\\n                    }),\\n                    setting: $.toString(() => {\\n                        return \\\"toast://该插件无设置页面\\\";\\n                    })\\n                },\\n                \\\"断插\\\": {\\n                    config: $.toString(() => {\\n                        let file = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n                        let oldfile = \\\"hiker://files/cache/MyParseSet.json\\\";\\n                        if (fileExist(file)) {\\n                            eval('json=' + fetch(file));\\n                            let jsUrl = json.settings.cj;\\n                            eval(fetch(jsUrl));\\n                            return aytmParse(input);\\n                        } else if (fileExist(oldfile)) {\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\n                            eval(fetch(jsUrl));\\n                            return aytmParse(input);\\n                        } else {\\n                            return 'toast://没找到断插配置文件';\\n                        }\\n                    }),\\n                    setting: $.toString(() => {\\n                        let file = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n                        let oldfile = \\\"hiker://files/cache/MyParseSet.json\\\";\\n                        if (fileExist(file)) {\\n                            eval('json=' + fetch(file));\\n                            let jsUrl = json.settings.cj;\\n                            eval(fetch(jsUrl));\\n                            return setUrl;\\n                        } else if (fileExist(oldfile)) {\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\n                            eval(fetch(jsUrl));\\n                            return setUrl;\\n                        } else {\\n                            return \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置\\\";\\n                        }\\n                    })\\n                }\\n            }\\n        }\\n        writeFile(getVar('qdb_config'), JSON.stringify(defaultConfigs));\\n        refreshPage();\\n        return \\\"toast://已恢复默认设置\\\";\\n    })\\n})\\nd.push({\\n    title: '若重生不起作用,点我复制错误信息提交给开发者',\\n    col_type: 'text_1',\\n    url: 'copy://' + e.message\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"顺佬专用详情页\",\"path\":\"Sdetail\",\"rule\":\"js:\\nputVar('qdb_file', 'hiker://files/rules/joker/qdb.js');\\neval(fetch(getVar(\\\"qdb_file\\\")));\\npre();\\nlet type = getParam('type', ''),\\n    id = getParam('id', '');\\ndetailsView(type, id);\"}]","proxy":"","icon":"https://gitcode.net/qq_41846756/hiker/-/raw/master/img/青豆.png"},{"last_chapter_rule":"","title":"本地资源管理","author":"@LoyDgIk","version":57,"type":"tool","url":"hiker://empty","col_type":"movie_3_marquee","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nif (!getItem(\":startUse\",false)) {\n    toast(\":-)初次见面，请多关照\");\n    confirm({\n        title: \"使用须知\",\n        content: \"1.普通用户：本程序只提供本地阅读服务，不提供网络内容。\\n\\n2.开发者：提供多线程下载支持。\\n\\n3.如何获取内容?\\n通过「聚漫」「道长合集」等第三方小程序下载。\",\n        confirm: \"setItem(':startUse','1');refreshPage();'toast://感谢您的理解'\",\n        cancel: \"'toast://很遗憾，不能为您服务。\\\\n长按标题可删除。'\"\n    });\n    setResult([]);\n} else {\n    $.require(\"hiker://page/Main.view\");\n}","searchFind":"","search_url":"","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"#f.File工具\",\"path\":\"File.js\",\"rule\":\"const File = java.io.File;\\nconst {\\n    Files,\\n    Paths,\\n    StandardCopyOption,\\n    StandardOpenOption\\n} = java.nio.file;\\nconst javaString = java.lang.String;\\nlet javaScope = new JavaImporter(java.io, java.lang, java.lang.reflect, java.util.Vector);\\n\\nfunction deleteFiles(fileName) {\\n    let file = new File(fileName);\\n    if (!file.exists()) {\\n        //log(\\\"删除文件失败：\\\" + fileName + \\\"文件不存在\\\");\\n        return false;\\n    } else {\\n        if (file.isFile()) {\\n            return deleteFile(fileName);\\n        } else {\\n            return deleteDirectory(fileName);\\n        }\\n\\n    }\\n\\n}\\n/**\\n * 删除单个文件\\n * \\n * @param fileName\\n *            被删除文件的文件名\\n * @return 单个文件删除成功返回true,否则返回false\\n */\\nfunction deleteFile(fileName) {\\n    let file = new File(fileName);\\n    if (file.isFile() && file.exists()) {\\n        file.delete();\\n        //log(\\\"删除单个文件\\\" + fileName + \\\"成功！\\\");\\n        return true;\\n    } else {\\n        //log(\\\"删除单个文件\\\" + fileName + \\\"失败！\\\");\\n        return false;\\n    }\\n\\n}\\n/**\\n * 删除目录（文件夹）以及目录下的文件\\n * \\n * @param dir\\n *            被删除目录的文件路径\\n * @return 目录删除成功返回true,否则返回false\\n */\\nfunction deleteDirectory(dir) {\\n    // 如果dir不以文件分隔符结尾，自动添加文件分隔符\\n    if (!dir.endsWith(File.separator)) {\\n        dir = dir + File.separator;\\n    }\\n    let dirFile = new File(dir);\\n    // 如果dir对应的文件不存在，或者不是一个目录，则退出\\n    if (!dirFile.exists() || !dirFile.isDirectory()) {\\n        //log(\\\"删除目录失败\\\" + dir + \\\"目录不存在！\\\");\\n        return false;\\n    }\\n    let flag = true;\\n    // 删除文件夹下的所有文件(包括子目录)\\n    let files = dirFile.listFiles();\\n    for (let i = 0; i < files.length; i++) {\\n        // 删除子文件\\n        if (files[i].isFile()) {\\n            flag = deleteFile(files[i].getAbsolutePath());\\n            if (!flag) {\\n                break;\\n            }\\n        } else { // 删除子目录\\n            flag = deleteDirectory(files[i].getAbsolutePath());\\n            if (!flag) {\\n                break;\\n            }\\n        }\\n    }\\n    if (!flag) {\\n        //log(\\\"删除目录失败\\\");\\n        return false;\\n    }\\n    // 删除当前目录\\n    if (dirFile.delete()) {\\n        //log(\\\"删除目录\\\" + dir + \\\"成功！\\\");\\n        return true;\\n    } else {\\n        //log(\\\"删除目录\\\" + dir + \\\"失败！\\\");\\n        return false;\\n    }\\n}\\n\\n//copy单个文件\\nfunction copyFile(source, target, isCover){\\n    let sourcePath = Paths.get(source);\\n    let targetPath = Paths.get(target);\\n    let isExist = Files.exists(targetPath);\\n    if(Files.isDirectory(sourcePath)||(isExist&&!isCover)||(isExist&&Files.isDirectory(targetPath))){\\n        return false;\\n    }\\n    try{\\n        if(!isExist){\\n            Files.createDirectories(targetPath.getParent());\\n        }\\n        if(isCover === true){\\n            Files.copy(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.COPY_ATTRIBUTES);\\n        }else{\\n            Files.copy(sourcePath, targetPath, StandardCopyOption.COPY_ATTRIBUTES);\\n        }\\n    }catch(e){\\n        return false;\\n    }\\n}\\nfunction getFileTime(path) {\\n    let file = new File(path);\\n    let lastModified = file.lastModified();\\n    let date = new Date(lastModified);\\n    return date.getTime();\\n}\\n\\nfunction getName(path) {\\n    return new File(path).getName() + \\\"\\\";\\n}\\n\\nfunction getFilePath(path, type, expand) {\\n    type = type || \\\"file\\\";\\n    if (![\\\"file\\\", \\\"dir\\\"].includes(type)) throw new Error(\\\"类型错误\\\");\\n    let fileType = type === \\\"file\\\" ? \\\"isFile\\\" : \\\"isDirectory\\\";\\n    let file = new File(path);\\n    let array = file.listFiles() || [];\\n    let pathList = [];\\n    for (let i = 0; i < array.length; i++) {\\n        if (array[i][fileType]()) {\\n            pathList.push({\\n                name: array[i].getName() + \\\"\\\",\\n                path: array[i].getPath() + \\\"\\\"\\n            });\\n        }\\n    }\\n    if (expand) {\\n        pathList = pathList.filter(it => it.name.endsWith(expand));\\n    }\\n    return pathList;\\n}\\n\\nfunction renameFile(fromPath, name) {\\n    let fromFile = new File(fromPath);\\n    let toFile = new File(fromFile.getParent() + \\\"/\\\" + name);\\n    try {\\n        if (!fromFile.exists()) {\\n            return false;\\n        }\\n        if (toFile.exists()) {\\n            if (!deleteFlies(toPath)) {\\n                return false;\\n            }\\n        }\\n        Files.move(fromFile.toPath(), toFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\\n        return true;\\n    } catch (e) {\\n        log(e.toString());\\n        return false;\\n    }\\n}\\n\\nfunction moveFiles(fromPath, toPath) {\\n    let fromFile = new File(fromPath);\\n    let toFile = new File(toPath);\\n    try {\\n        if (!fromFile.exists()) {\\n            return false;\\n        }\\n        if (toFile.exists()) {\\n            if (!deleteFlies(toPath)) {\\n                return false;\\n            }\\n        }\\n        Files.move(fromFile.toPath(), toFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\\n        return true;\\n    } catch (e) {\\n        log(e.toString());\\n        return false;\\n    }\\n}\\n\\nfunction fileWrite(path, content) {\\n    writeFile(\\\"file://\\\" + path, content)\\n}\\n\\nfunction fileWriteAppend(path, content) {\\n    let file = new File(path);\\n    let paths = file.toPath();\\n    if (file.exists()) {\\n        Files.write(paths, new javaString(content).getBytes(), StandardOpenOption.APPEND);\\n    } else {\\n        writeFile(\\\"file://\\\" + path, content);\\n    }\\n}\\n\\nfunction getTotalSizeOfFilesInDir(file) {\\n    if (file.isFile()) {\\n        return file.length();\\n    }\\n    let children = file.listFiles();\\n    let total = 0;\\n    if (children != null) {\\n        for (let child of children) {\\n            total += getTotalSizeOfFilesInDir(child);\\n        }\\n    }\\n    return total;\\n}\\n\\nfunction getFileSize(filePath) {\\n    //Byte\\n    let size = getTotalSizeOfFilesInDir(new File(filePath));\\n    if (size < 0) {\\n        return null;\\n    }\\n    let unitForm = [\\\"Byte\\\", \\\"KB\\\", \\\"MB\\\", \\\"GB\\\", \\\"TB\\\"];\\n    for (let i = 0, len = unitForm.length; i < len; i++) {\\n        if (size > 1024) {\\n            size /= 1024;\\n            continue;\\n        } else {\\n            return Math.ceil(size) + unitForm[i];\\n        }\\n    }\\n    return \\\"ERROR:数值过大\\\";\\n}\\n//完整合并\\n/*\\nfunction fileCombine(filesInput, fileOut, extension, intercept) {\\n    with(javaScope) {\\n        const TMP_BUFFER_SIZE = 0x30000;\\n        const BUFFER_SIZE = 0x300000;\\n        //合并临时文件\\n        let inputFile = new File(filesInput);\\n        let tmpFile = new File(fileOut + \\\".tmp\\\");\\n        let tos = new BufferedOutputStream(new FileOutputStream(tmpFile));\\n        let inputFiles = inputFile.listFiles();\\n        let tbys = Array.newInstance(Byte.TYPE, TMP_BUFFER_SIZE);\\n        for (let file of inputFiles) {\\n            if (file.getName().endsWith(extension)) {\\n                let is = new FileInputStream(file);\\n                let len = 0;\\n                while ((len = is.read(tbys)) != -1) {\\n                    tos.write(tbys, 0, len);\\n                }\\n                is.close();\\n            }\\n        }\\n        tos.close();\\n        //规则替换规则;\\n        let outFile = new File(fileOut);\\n        if (typeof intercept === \\\"function\\\") {\\n            let tis = new FileInputStream(tmpFile);\\n            let os = new BufferedOutputStream(new FileOutputStream(outFile));\\n            let len = 0;\\n            let bys = Array.newInstance(Byte.TYPE, BUFFER_SIZE);\\n            while ((len = tis.read(bys)) != -1) {\\n                let nbys = intercept(new String(bys,0,len));\\n                os.write(nbys, 0, nbys.length);\\n            }\\n            tmpFile.delete();\\n            tis.close();\\n            os.close();\\n        } else {\\n            if (outFile.exists()) {\\n                outFile.delete();\\n            }\\n            tmpFile.renameTo(outFile);\\n        }\\n    }\\n}*/\\n//残\\nfunction fileRule(filesInput, fileOut, intercept) {\\n    with(javaScope) {\\n        const BUFFER_SIZE = 0x300000;\\n        let tmpFile = new File(filesInput);\\n        if(!(tmpFile.exists()&&tmpFile.isFile())){\\n            return false;\\n        }\\n        let outFile = new File(fileOut);\\n\\n        let tis = new FileInputStream(tmpFile);\\n        let os = new BufferedOutputStream(new FileOutputStream(outFile));\\n        let len = 0;\\n        let bys = Array.newInstance(Byte.TYPE, BUFFER_SIZE);\\n        while ((len = tis.read(bys)) != -1) {\\n            let nbys = intercept(new String(bys,0,len));\\n            os.write(nbys, 0, nbys.length);\\n        }\\n        tmpFile.delete();\\n        tis.close();\\n        os.close();\\n        return true;\\n    }\\n}\\n\\n$.exports = {\\n    getFileTime: (path) => getFileTime(path),\\n    getFilePath: (path, type, expand) => getFilePath(path, type, expand),\\n    deleteFiles: (path) => deleteFiles(path),\\n    renameFile: (path, name) => renameFile(path, name),\\n    moveFiles: (fromPath, toPath) => moveFiles(fromPath, toPath),\\n    fileWrite: (path, content) => fileWrite(path, content),\\n    fileWriteAppend: (path, content) => fileWriteAppend(path, content),\\n    getName: (path) => getName(path),\\n    getFileSize: (filePath) => getFileSize(filePath),\\n    fileRule: (filesInput, fileOut, intercept) => fileRule(filesInput, fileOut, intercept),\\n    copyFile: (source, target, isCover) => copyFile(source, target, isCover)\\n}\"},{\"col_type\":\"text_2\",\"name\":\"#v.下载列表-普通下载\",\"path\":\"download.view\",\"rule\":\"js:\\nconst viewConfig = Object.assign({\\n    chapterList: [],\\n    info: {},\\n    defaultView: \\\"0\\\"\\n}, MY_PARAMS);\\nviewConfig.info = Object.assign({\\n    ruleName: \\\"\\\",\\n    bookName: \\\"\\\",\\n    bookTopPic: \\\"\\\",\\n    parseCode: \\\"\\\",\\n    type: \\\"comic\\\",\\n}, viewConfig.info);\\nlet {\\n    chapterList,\\n    info,\\n    defaultView\\n} = viewConfig;\\nsetPageTitle(\\\"选择器|\\\" + info.bookName)\\n\\nconst File = $.require(\\\"hiker://page/File.js\\\");\\nconst Tool = $.require(\\\"hiker://page/Tool.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\nconst def_DoVi_Style = Config.def_DoVi_Style;\\nconst MY_ID = info.ruleName + \\\"//\\\" + info.bookName;\\n\\n\\nlet isStart = getMyVar(MY_ID + \\\":isStart\\\");\\nlet viewMode = getMyVar(MY_ID + \\\":viewMode\\\", defaultView);\\nlet isReverse = getMyVar(MY_ID + \\\":isReverse\\\", \\\"0\\\");\\nlet tagFilter = getMyVar(MY_ID + \\\":tagFilter\\\", Config.def_DoVi_Type);\\n\\naddListener(\\\"onClose\\\", $.toString((MY_ID) => {\\n    clearMyVar(MY_ID + \\\":loadingTeam\\\");\\n    clearMyVar(MY_ID + \\\":viewMode\\\");\\n    clearMyVar(MY_ID + \\\":completed\\\");\\n    clearMyVar(MY_ID + \\\":batchTeam\\\");\\n    clearMyVar(MY_ID + \\\":tagFilter\\\");\\n    clearMyVar(MY_ID + \\\":pageNum\\\");\\n}, MY_ID));\\n\\nlet layout = [];\\n\\nif (isStart === \\\"1\\\") {\\n    putMyVar(MY_ID + \\\":viewMode\\\", defaultView);\\n    viewMode = \\\"1\\\";\\n}\\n\\nlet backupChapterList = chapterList;\\nif (typeof chapterList === \\\"string\\\") {\\n    chapterList = JSON.parse(request(\\\"file://\\\" + chapterList) || \\\"[]\\\");\\n}\\nlet chapterAll = chapterList;\\nchapterList = chapterList.map((item, CID) => {\\n    item.CID = CID;\\n    return item;\\n});\\nlet pageNum = Number(getMyVar(MY_ID + \\\":pageNum\\\", \\\"1\\\"));\\nlet chapterChunk = [chapterList].concat(Tool.chunk(chapterList, Config.viewPageSize));\\nchapterList = chapterChunk[pageNum] || [];\\n\\nfunction setType() {\\n    let set = (tag, put) => {\\n        putMyVar(put, tag);\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    };\\n    layout.push({\\n        title: 0 == pageNum ? \\\"““””\\\" + (\\\"全部(\\\" + chapterAll.length + \\\")\\\").fontcolor(\\\"#23AD6F\\\") : \\\"全部(\\\" + chapterAll.length + \\\")\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(set, 0, MY_ID + \\\":pageNum\\\"),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n    for (let i = 1; i < chapterChunk.length; i++) {\\n        let tagText = (i - 1) * Config.viewPageSize + \\\"-\\\" + ((i - 1) * Config.viewPageSize + chapterChunk[i].length);\\n        layout.push({\\n            title: i == pageNum ? \\\"““””\\\" + tagText.fontcolor(\\\"#23AD6F\\\") : tagText,\\n            url: $(\\\"#noLoading#\\\").lazyRule(set, i, MY_ID + \\\":pageNum\\\"),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    layout.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n    layout.push({\\n        title: tagFilter === \\\"0\\\" ? \\\"““””\\\" + \\\"全部\\\".fontcolor(\\\"#23AD6F\\\") : \\\"全部\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(set, \\\"0\\\", MY_ID + \\\":tagFilter\\\"),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n    layout.push({\\n        title: tagFilter === \\\"1\\\" ? \\\"““””\\\" + \\\"未下载\\\".fontcolor(\\\"#23AD6F\\\") : \\\"未下载\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(set, \\\"1\\\", MY_ID + \\\":tagFilter\\\"),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n    layout.push({\\n        title: tagFilter === \\\"2\\\" ? \\\"““””\\\" + \\\"已下载\\\".fontcolor(\\\"#23AD6F\\\") : \\\"已下载\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(set, \\\"2\\\", MY_ID + \\\":tagFilter\\\"),\\n        col_type: \\\"scroll_button\\\"\\n    });\\n}\\nlet chapterTeam = [];\\nlet record = [];\\nif (info.type === \\\"comic\\\") {\\n    let lazy = $(\\\"#noLoading#\\\").lazyRule(() => {\\n        const File = $.require(\\\"hiker://page/File.js\\\");\\n        let filelist = File.getFilePath(input);\\n        let piclist = filelist.map((item, i) => \\\"file://\\\" + input + \\\"/\\\" + (i + 1) + \\\".jpg\\\");\\n        return \\\"pics://\\\" + piclist.join(\\\"&&\\\");\\n    });\\n\\n    function comFun(i, item) {\\n        let rootPath = Config.comicPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\" + i + \\\"$A$\\\" + item.title;\\n        return {\\n            title: \\\"““\\\" + item.title + \\\"””\\\",\\n            url: rootPath + lazy,\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i,\\n            },\\n            col_type: def_DoVi_Style\\n        }\\n    }\\n    File.getFilePath(Config[info.type + \\\"Path\\\"] + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName, \\\"dir\\\").forEach((file) => {\\n        let att = Tool.split(file.name, \\\"$\\\", 2);\\n        if (att.length === 3 && att[1] === (\\\"A\\\")) {\\n            record.push(att[2]);\\n        }\\n    });\\n} else {\\n    function comFun(i, item) {\\n        return {\\n            title: \\\"““\\\" + item.title + \\\"””\\\",\\n            url: \\\"hiker://page/NovelMainBody#autoPage##readTheme#\\\",\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i,\\n                path: Config.novelPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\" + i + \\\"$A$\\\" + item.title + \\\".txt\\\",\\n                title: item.title\\n            },\\n            col_type: def_DoVi_Style\\n        }\\n    }\\n    File.getFilePath(Config[info.type + \\\"Path\\\"] + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName, \\\"file\\\", \\\".txt\\\").forEach((file) => {\\n        let att = Tool.split(file.name, \\\"$\\\", 2);\\n        if (att.length === 3 && att[1] === (\\\"A\\\")) {\\n            record.push(att[2].slice(0, att[2].lastIndexOf(\\\".\\\")));\\n        }\\n    });\\n}\\n\\nfunction clickDownload(item, info, MY_ID, i) {\\n    let loadingTeam = JSON.parse(getMyVar(MY_ID + \\\":loadingTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n    let ElementIndex = loadingTeam.indexOf(i);\\n    if (ElementIndex > -1) return \\\"toast://正在下载\\\";\\n\\n    loadingTeam.push(i);\\n    putMyVar(MY_ID + \\\":loadingTeam\\\", JSON.stringify(loadingTeam));\\n    updateItem({\\n        title: \\\"‘‘\\\" + item.title + \\\"’’\\\",\\n        extra: {\\n            id: MY_ID + \\\"#\\\" + i\\n        }\\n    });\\n    let result = \\\"toast://下载失败\\\";\\n    try {\\n        toast(\\\"开始下载:\\\" + item.title);\\n        let download = $.require(\\\"hiker://page/Download.exe.js\\\");\\n        result = download(item, info, MY_ID, i);\\n        updateItem({\\n            title: \\\"““\\\" + item.title + \\\"””\\\",\\n            url: \\\"toast://已下载\\\",\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i\\n            }\\n        });\\n    } catch (e) {\\n        updateItem({\\n            title: item.title,\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i\\n            }\\n        });\\n        log(e.toString());\\n    } finally {\\n        loadingTeam.splice(ElementIndex, 1);\\n        putMyVar(MY_ID + \\\":loadingTeam\\\", JSON.stringify(loadingTeam));\\n    }\\n    return result;\\n}\\n\\nfunction singleView() {\\n    layout.push({\\n        title: \\\"反转列表\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((isReverse, MY_ID) => {\\n            putMyVar(MY_ID + \\\":isReverse\\\", isReverse === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, isReverse, MY_ID),\\n        pic_url: \\\"https://img.icons8.com/?id=33nvDqbHH7HW&size=48&format=gif&token=\\\",\\n        col_type: \\\"icon_2\\\"\\n    });\\n    layout.push({\\n        title: \\\"批量下载\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((MY_ID) => {\\n            let loadingTeam = JSON.parse(getMyVar(MY_ID + \\\":loadingTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n            if (loadingTeam.length > 0) return \\\"toast://还有任务没有完成\\\";\\n            if (getAppVersion() < 2594) return \\\"toast://未开放\\\";\\n            putMyVar(MY_ID + \\\":viewMode\\\", \\\"1\\\");\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n\\n        }, MY_ID),\\n        pic_url: \\\"https://img.icons8.com/?format=gif&id=0uafaMNzxj88&token=\\\",\\n        col_type: \\\"icon_2\\\"\\n    });\\n    setType();\\n    layout.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    let loadingTeam = JSON.parse(getMyVar(MY_ID + \\\":loadingTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n    for (let i = 0, item = chapterList[0]; i < chapterList.length; item = chapterList[++i]) {\\n        let is_download = record.includes(item.title);\\n        if (is_download && tagFilter !== \\\"1\\\") {\\n            chapterTeam.push(comFun(item.CID, item));\\n        } else if (!is_download && tagFilter !== \\\"2\\\") {\\n            chapterTeam.push({\\n                title: loadingTeam.includes(item.CID) ? \\\"‘‘\\\" + item.title + \\\"’’\\\" : item.title,\\n                url: $(\\\"#noLoading#\\\").lazyRule(clickDownload, item, info, MY_ID, item.CID),\\n                extra: {\\n                    id: MY_ID + \\\"#\\\" + item.CID\\n                },\\n                col_type: def_DoVi_Style\\n            });\\n        }\\n    }\\n}\\n\\nfunction clickChoose(title, MY_ID, i) {\\n    let isStart = getMyVar(MY_ID + \\\":isStart\\\");\\n    if (isStart === \\\"1\\\") return \\\"toast://正在下载...\\\";\\n    let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n    let ElementIndex = batchTeam.indexOf(i);\\n    if (ElementIndex > -1) {\\n        updateItem({\\n            title: title,\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i\\n            }\\n        });\\n        batchTeam.splice(ElementIndex, 1);\\n    } else {\\n        updateItem({\\n            title: \\\"‘‘\\\" + title + \\\"’’\\\",\\n            extra: {\\n                id: MY_ID + \\\"#\\\" + i\\n            }\\n        });\\n        batchTeam.push(i);\\n    }\\n    putMyVar(MY_ID + \\\":batchTeam\\\", JSON.stringify(batchTeam));\\n    return \\\"hiker://empty\\\";\\n}\\n\\nfunction batchView() {\\n    layout.push({\\n        title: \\\"单选下载\\\",\\n        pic_url: \\\"https://img.icons8.com/?id=PIicvF6ebzMn&size=48&format=gif&token=\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((MY_ID) => {\\n            if (getMyVar(MY_ID + \\\":isStart\\\") === \\\"1\\\") return \\\"toast://正在批量下载\\\";\\n            putMyVar(MY_ID + \\\":viewMode\\\", \\\"0\\\");\\n            clearMyVar(MY_ID + \\\":batchTeam\\\");\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, MY_ID),\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    let start = Config.viewPageSize * Math.max(pageNum - 1, 0);\\n    let end = start + chapterList.length;\\n    layout.push({\\n        title: \\\"选择全部\\\",\\n        pic_url: \\\"https://img.icons8.com/?format=gif&id=1HVcHLoNzrit&token=\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((start, end, MY_ID) => {\\n            const Tool = $.require(\\\"hiker://page/Tool.js\\\");\\n            let chooseTeam = Tool.range(start, end);\\n            let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n            batchTeam = Array.from(new Set(batchTeam.concat(chooseTeam)));\\n            let completed = JSON.parse(getMyVar(MY_ID + \\\":completed\\\", \\\"[]\\\") || \\\"[]\\\");\\n            batchTeam = batchTeam.filter((i) => !completed.includes(i));\\n            putMyVar(MY_ID + \\\":batchTeam\\\", JSON.stringify(batchTeam));\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, start, end, MY_ID),\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    layout.push({\\n        title: \\\"取消全部\\\",\\n        pic_url: \\\"https://img.icons8.com/?format=gif&id=HzEjPpI3NL8D&token=\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((start, end, MY_ID) => {\\n            const Tool = $.require(\\\"hiker://page/Tool.js\\\");\\n            let chooseTeam = new Set(Tool.range(start, end));\\n            let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n            batchTeam = batchTeam.filter(x => !chooseTeam.has(x));\\n            putMyVar(MY_ID + \\\":batchTeam\\\", JSON.stringify(batchTeam));\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, start, end, MY_ID),\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    layout.push({\\n        title: \\\"确认选中\\\",\\n        pic_url: \\\"https://img.icons8.com/?format=gif&id=tMrvtc6T9hVb&token=\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((MY_ID) => {\\n            if (getMyVar(MY_ID + \\\":isStart\\\", \\\"-1\\\") !== \\\"-1\\\") {\\n                return \\\"toast://正在下载...\\\";\\n            }\\n            let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n            return batchTeam.length === 0 ? \\\"toast://你还什么都没有选\\\" : \\\"hiker://page/Batch.view#noRefresh##noHistory##noRecordHistory#\\\";\\n        }, MY_ID),\\n        extra: {\\n            newWindow: true,\\n            windowId: MY_ID + \\\"//批量下载\\\",\\n            MY_ID: MY_ID,\\n            chapterList: backupChapterList,\\n            info: info\\n        },\\n        col_type: \\\"icon_small_4\\\"\\n    });\\n    setType();\\n    layout.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n    let completed = [];\\n    for (let i = 0, item = chapterList[0]; i < chapterList.length; item = chapterList[++i]) {\\n        let is_download = record.includes(item.title);\\n        if (is_download && tagFilter !== \\\"1\\\") {\\n            completed.push(item.CID);\\n            chapterTeam.push(comFun(item.CID, item));\\n        } else if (!is_download && tagFilter !== \\\"2\\\") {\\n            chapterTeam.push({\\n                title: batchTeam.includes(item.CID) ? \\\"‘‘\\\" + item.title + \\\"’’\\\" : item.title,\\n                url: $(\\\"#noLoading#\\\").lazyRule(clickChoose, item.title, MY_ID, item.CID),\\n                extra: {\\n                    id: MY_ID + \\\"#\\\" + item.CID\\n                },\\n                col_type: def_DoVi_Style\\n            });\\n        }\\n    }\\n    putMyVar(MY_ID + \\\":completed\\\", JSON.stringify(completed));\\n}\\nswitch (viewMode) {\\n    case \\\"0\\\":\\n        singleView();\\n        break;\\n    case \\\"1\\\":\\n        batchView();\\n        break;\\n}\\nif (isReverse === \\\"1\\\") {\\n    chapterTeam.reverse();\\n}\\nlayout.push.apply(layout, chapterTeam);\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.批量下载器\",\"path\":\"Batch.view\",\"rule\":\"js:\\nlet {\\n    chapterList,\\n    info,\\n    MY_ID\\n} = MY_PARAMS;\\nsetPageTitle(\\\"下载器|\\\"+info.bookName);\\naddListener(\\\"onClose\\\", $.toString((MY_ID) => {\\n    clearMyVar(MY_ID + \\\":isStart\\\");\\n    clearMyVar(MY_ID + \\\":status\\\");\\n    clearMyVar(MY_ID + \\\":batchTeam\\\");\\n    refreshPage();\\n}, MY_ID));\\n\\nlet isStart = getMyVar(MY_ID + \\\":isStart\\\", \\\"0\\\");\\nlet status = getMyVar(MY_ID + \\\":status\\\", \\\"0\\\");\\nlet layout = [];\\n\\nlet batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\nif(typeof chapterList === \\\"string\\\"){\\n    chapterList = JSON.parse(request(\\\"file://\\\"+chapterList)||\\\"[]\\\");\\n}\\nlet chapterTeam = batchTeam.map(v => {\\n    let chapterItem = chapterList[v];\\n    chapterItem.CID = v;\\n    return chapterItem;\\n});\\nif (isStart === \\\"0\\\") {\\n    layout.push({\\n        title: \\\"开始下载[\\\" + chapterTeam.length + \\\"]\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((chapterTeam, info, MY_ID) => {\\n            putMyVar(MY_ID + \\\":isStart\\\", \\\"1\\\");\\n            refreshPage(false);\\n            let download = $.require(\\\"hiker://page/BatchStatistics.js\\\");\\n            return download(chapterTeam, info, MY_ID) || \\\"toast://下载错误\\\";\\n        }, chapterTeam, info, MY_ID),\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            id: MY_ID + \\\"||开始下载\\\"\\n        }\\n    });\\n    layout.push({\\n        title: \\\"任务列表：\\\",\\n        col_type: \\\"rich_text\\\",\\n    });\\n    for (let item of chapterTeam) {\\n        layout.push({\\n            title: item.title,\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"text_2\\\"\\n        });\\n    }\\n\\n} else {\\n    layout.push({\\n        title: \\\"下载进度:0/\\\"+chapterTeam.length,\\n        desc: \\\"““””▇▇▇▇▇▇▇▇▇▇\\\".fontcolor(\\\"#e5e1e4\\\")+\\\" 0%\\\",\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            id: MY_ID + \\\"||下载进度\\\",\\n            lineVisible: false\\n        }\\n    });\\n    layout.push({\\n        title: \\\"后台下载\\\",\\n        url: \\\"func://background\\\",\\n        col_type: \\\"text_2\\\"\\n    });\\n\\n    layout.push({\\n        title: [\\\"[取消下载]\\\", \\\"[正在停止...]\\\", \\\"[返回]\\\", \\\"[处理失败]\\\", \\\"[重新开始]\\\"][status],\\n        url: $(\\\"#noLoading#\\\").lazyRule((MY_ID) => {\\n            let status = getMyVar(MY_ID + \\\":status\\\", \\\"0\\\");\\n            if (status === \\\"0\\\") {\\n                putMyVar(MY_ID + \\\":status\\\", \\\"1\\\");\\n                updateItem({\\n                    title: \\\"[正在停止...]\\\",\\n                    extra: {\\n                        id: MY_ID + \\\"||下载控制\\\"\\n                    }\\n                });\\n                return \\\"toast://正在取消下载任务\\\";\\n            } else if (status === \\\"1\\\") {\\n                return \\\"toast://正在暂停...\\\";\\n            } else if (status === \\\"2\\\") {\\n                back();\\n                return \\\"toast://已退出下载器\\\";\\n            } else if ([\\\"3\\\", \\\"4\\\"].includes(status)) {\\n                clearMyVar(MY_ID + \\\":isStart\\\");\\n                clearMyVar(MY_ID + \\\":status\\\");\\n                clearMyVar(MY_ID + \\\":log\\\");\\n                refreshPage();\\n                return \\\"toast://重新点击下载\\\"\\n            }\\n        }, MY_ID),\\n        col_type: \\\"text_2\\\",\\n        extra: {\\n            id: MY_ID + \\\"||下载控制\\\"\\n        }\\n    });\\n    layout.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    layout.push({\\n        title: \\\"<strong>下载日志</strong>\\\".big(),\\n        col_type: \\\"rich_text\\\",\\n        \\n    });\\n    layout.push({\\n        col_type: \\\"line\\\",\\n        extra: {\\n            id: MY_ID + \\\"||日志\\\"\\n        }\\n    });\\n    layout.push({\\n        title:\\\"““””$>\\\"+\\\"开始下载......\\\".fontcolor(\\\"#00ff00\\\"),\\n        url:\\\"hiker://empty\\\",\\n        col_type: \\\"text_1\\\",\\n        extra: {\\n            id: MY_ID + \\\"#log#0\\\",\\n            lineVisible:false\\n        }\\n    });\\n}\\n\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#fg.批量下载统计\",\"path\":\"BatchStatistics.js\",\"rule\":\"const Tool = $.require(\\\"hiker://page/Tool.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\nfunction task(taskParam) {\\n    let result = $.require(\\\"hiker://page/Batch.exe.js\\\")(taskParam);\\n    return result;\\n}\\n\\n$.exports = function(chapterTeam, info, MY_ID) {\\n    if (chapterTeam.length === 0) {\\n        return \\\"toast://空的下载队列\\\";\\n    }\\n    var count = 0;\\n    var taskCount = chapterTeam.length;\\n    var successCID = [];\\n    var failName = [];\\n    var logCount = 1;\\n    var taskTeam = chapterTeam.map(chapterItem => ({\\n        func: task,\\n        id: chapterItem.title,\\n        param: {\\n            chapterItem: chapterItem,\\n            info: info,\\n            MY_ID: MY_ID\\n        }\\n    }));\\n    let logNum = Config.logNum;\\n\\n    function putLog(text) {\\n        log(text);\\n        if (logCount >= logNum) {\\n            deleteItem(MY_ID + \\\"#log#\\\" + (logCount - 10));\\n        }\\n        addItemAfter(MY_ID + \\\"||日志\\\", {\\n            url: \\\"hiker://empty\\\",\\n            title: \\\"$>\\\" + text,\\n            col_type: \\\"text_1\\\",\\n            extra: {\\n                lineVisible: false,\\n                id: MY_ID + \\\"#log#\\\" + logCount\\n            }\\n        });\\n        logCount++;\\n    }\\n\\n    function listener(perch, id, error, CID) {\\n        count++;\\n        let isSuccess = false;\\n        if (error !== null) {\\n            failName.push(id);\\n            putLog(\\\"[listener]下载失败：\\\" + id + \\\"<ERROR@ \\\" + error + \\\">\\\");\\n        } else if (CID >= 0) {\\n            successCID.push(CID);\\n            let ratio = (count / taskCount).toFixed(4);\\n            let stripCount = Math.ceil(ratio * 10);\\n            isSuccess = true;\\n            updateItem({\\n                title: \\\"下载进度：\\\" + successCID.length + \\\"/\\\" + taskCount,\\n                desc: \\\"““””\\\" + \\\"▇\\\".repeat(stripCount).fontcolor(\\\"#ffac2d\\\") + \\\"▇\\\".repeat(10 - stripCount).fontcolor(\\\"#e5e1e4\\\") + \\\" \\\" + (ratio * 100) + \\\"%\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载进度\\\"\\n                }\\n            });\\n            putLog(\\\"[listener]已完成下载：\\\" + id);\\n        } else if (CID === -1) {\\n            failName.push(id);\\n            putLog(\\\"[listener]已停止：\\\" + id);\\n        }\\n        if (taskCount !== count) return;\\n        if (successCID.length === taskCount) {\\n            updateItem({\\n                desc: \\\"““””\\\" + \\\"▇\\\".repeat(10).fontcolor(\\\"#00ff00\\\") + \\\" 100%\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载进度\\\"\\n                }\\n            });\\n        }\\n        let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n        let status = getMyVar(MY_ID + \\\":status\\\", \\\"0\\\");\\n        let failTeam = batchTeam.filter(v => !successCID.includes(v));\\n        putMyVar(MY_ID + \\\":batchTeam\\\", JSON.stringify(failTeam));\\n        if (failTeam.length > 0 && status !== \\\"1\\\") {\\n            putMyVar(MY_ID + \\\":status\\\", \\\"3\\\");\\n            putLog(\\\"下载失败:[\\\" + failName.join(\\\"]，[\\\") + \\\"]。\\\");\\n            updateItem({\\n                title: \\\"[处理失败]\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载控制\\\"\\n                }\\n            });\\n        } else if (failTeam.length > 0 && status === \\\"1\\\") {\\n            putMyVar(MY_ID + \\\":status\\\", \\\"4\\\");\\n            putLog(\\\"[listener]#已停止所有任务，但已有进度不会消失#\\\");\\n            updateItem({\\n                title: \\\"[重新开始]\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载控制\\\"\\n                }\\n            });\\n        } else {\\n            putMyVar(MY_ID + \\\":status\\\", \\\"2\\\");\\n            putLog(\\\"下载任务[\\\" + info.bookName + \\\"]已全部成功完成\\\");\\n            updateItem({\\n                title: \\\"[返回]\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载控制\\\"\\n                }\\n            });\\n        }\\n        toast(\\\"下载任务[\\\" + info.bookName + \\\"]已完成\\\");\\n    }\\n    let taskTeamChunk = [];\\n    if (Config.threadNum > 0) {\\n        taskTeamChunk = Tool.chunk(taskTeam, Config.threadNum);\\n    } else {\\n        taskTeamChunk = [taskTeam];\\n    }\\n    for (let taskList of taskTeamChunk) {\\n        be(taskList, {\\n            func: listener\\n        });\\n        let status = getMyVar(MY_ID + \\\":status\\\", \\\"0\\\");\\n        if (status === \\\"1\\\") {\\n            let batchTeam = JSON.parse(getMyVar(MY_ID + \\\":batchTeam\\\", \\\"[]\\\") || \\\"[]\\\");\\n            let status = getMyVar(MY_ID + \\\":status\\\", \\\"0\\\");\\n            let failTeam = batchTeam.filter(v => !successCID.includes(v));\\n            putMyVar(MY_ID + \\\":batchTeam\\\", JSON.stringify(failTeam));\\n            putMyVar(MY_ID + \\\":status\\\", \\\"4\\\");\\n            putLog(\\\"[listener]#已停止所有任务，但已有进度不会消失#\\\");\\n            updateItem({\\n                title: \\\"[重新开始]\\\",\\n                extra: {\\n                    id: MY_ID + \\\"||下载控制\\\"\\n                }\\n            });\\n            return \\\"hiker://empty\\\";\\n        }\\n\\n    }\\n\\n    return \\\"hiker://empty\\\";\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"#fg.批量主程序\",\"path\":\"Batch.exe.js\",\"rule\":\"const File = $.require(\\\"hiker://page/File.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\nconst Tool = $.require(\\\"hiker://page/Tool.js\\\");\\n\\nfunction comic(taskParam) {\\n    let {\\n        chapterItem,\\n        info,\\n        MY_ID,\\n    } = taskParam;\\n    if (getMyVar(MY_ID + \\\":status\\\", \\\"\\\") === \\\"1\\\") {\\n        return -1;\\n    }\\n    let mainPath = Config.comicPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\";\\n    let chapterPath = mainPath + chapterItem.CID + \\\"$B$\\\" + chapterItem.title + \\\"/\\\";\\n    let picList;\\n    try {\\n        let getPicList = new Function(\\\"input\\\", \\\"url\\\", \\\"return \\\" + info.parseCode);\\n        picList = getPicList(chapterItem.url, chapterItem.url);\\n        if (typeof picList === \\\"string\\\") {\\n            picList = picList.replace(\\\"pics://\\\", \\\"\\\").split(\\\"&&\\\");\\n        }\\n    } catch (e) {\\n        e.message = \\\"<漫画图片解析错误：\\\" + e.message + \\\">\\\";\\n        throw e;\\n    }\\n    const L = picList.length;\\n    if(L===0){\\n        throw new Error(\\\"<漫画图片解析错误：图片链接返回为空>\\\");\\n    }\\n    if (info.bookTopPic) {\\n        try {\\n            let bookTopPic = Tool.hikerPic(info.bookTopPic);\\n            requireDownload(bookTopPic[0], mainPath + info.bookName + \\\".jpg\\\", bookTopPic[1]);\\n        } catch (e) {\\n            log(\\\"<封面下载错误：\\\" + e.message + \\\">\\\");\\n        }\\n    }\\n    var schedule = new Map([\\n        [L, () => log(chapterItem.title + \\\"已下载100%\\\")],\\n        [~~(0.90 * L), () => log(chapterItem.title + \\\"已下载90%+\\\")],\\n        [~~(0.75 * L), () => log(chapterItem.title + \\\"已下载75%+\\\")],\\n        [~~(0.50 * L), () => log(chapterItem.title + \\\"已下载50%+\\\")],\\n        [~~(0.25 * L), () => log(chapterItem.title + \\\"已下载25%+\\\")]\\n    ]);\\n    for (var i = 0; i < L; i++) {\\n        let pic = Tool.hikerPic(picList[i]);\\n        requireDownload(pic[0], chapterPath + (i + 1) + \\\".jpg\\\", pic[1]);\\n        schedule.has(i + 1) && schedule.get(i + 1)();\\n        if (getMyVar(MY_ID + \\\":status\\\", \\\"\\\") === \\\"1\\\") {\\n            return -1;\\n        }\\n    }\\n    File.renameFile(chapterPath, chapterItem.CID + \\\"$A$\\\" + chapterItem.title);\\n    return chapterItem.CID;\\n}\\n\\nfunction novel(taskParam) {\\n    let {\\n        chapterItem,\\n        info,\\n        MY_ID,\\n    } = taskParam;\\n    if (getMyVar(MY_ID + \\\":status\\\", \\\"\\\") === \\\"1\\\") {\\n        return -1;\\n    }\\n    let mainPath = Config.novelPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\";\\n    let chapterPath = mainPath + chapterItem.CID + \\\"$A$\\\" + chapterItem.title + \\\".txt\\\";\\n    let content = \\\"\\\";\\n    try {\\n        let getContent = new Function(\\\"input\\\", \\\"url\\\", \\\"return \\\" + info.parseCode);\\n        content = getContent(chapterItem.url, chapterItem.url);\\n    } catch (e) {\\n        e.message = \\\"<小说正文解析错误：\\\" + e.message + \\\">\\\";\\n        throw e;\\n    }\\n    if (!content) {\\n        throw new Error(\\\"<小说正文解析错误：正文返回为空>\\\");\\n    }\\n    if (info.bookTopPic) {\\n        try {\\n            let bookTopPic = Tool.hikerPic(info.bookTopPic);\\n            requireDownload(bookTopPic[0], mainPath + info.bookName + \\\".jpg\\\", bookTopPic[1]);\\n        } catch (e) {\\n            log(\\\"<封面下载错误：\\\" + e.message + \\\">\\\");\\n        }\\n    }\\n    File.fileWrite(chapterPath, content.replace(/<script>.*?<\\\\/script>/gmi, \\\"\\\").trimRight());\\n    //File.renameFile(chapterPath, chapterItem.CID + \\\"$A$\\\" + chapterItem.title);\\n    return chapterItem.CID;\\n}\\nvar $exe = {\\n    comic: comic,\\n    novel: novel\\n};\\n$.exports = function(taskParam) {\\n    return $exe[taskParam.info.type](taskParam);\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"#fg.普通主程序\",\"path\":\"Download.exe.js\",\"rule\":\"const File = $.require(\\\"hiker://page/File.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\nconst Tool = $.require(\\\"hiker://page/Tool.js\\\");\\n\\nfunction novel(item, info, MY_ID, order) {\\n    let mainPath = Config.novelPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\";\\n    let chapterPath = mainPath + order + \\\"$A$\\\" + item.title + \\\".txt\\\";\\n    let content = \\\"\\\";\\n    try {\\n        let getContent = new Function(\\\"input\\\", \\\"url\\\", \\\"return \\\" + info.parseCode);\\n        content = getContent(item.url, item.url) || \\\"\\\";\\n    } catch (e) {\\n        e.message = \\\"<小说正文解析错误> \\\" + e.message;\\n        throw e;\\n    }\\n    if (!content) {\\n        toast(\\\"小说为空\\\");\\n        throw new Error(\\\"<小说正文解析错误：正文返回为空>\\\");\\n    }\\n    if (info.bookTopPic) {\\n        try {\\n            let bookTopPic = Tool.hikerPic(info.bookTopPic);\\n            requireDownload(bookTopPic[0], mainPath + info.bookName + \\\".jpg\\\", bookTopPic[1]);\\n        } catch (e) {\\n            log(\\\"<封面下载错误> \\\" + e.message);\\n        }\\n    }\\n    File.fileWrite(chapterPath, content.replace(/<script>.*?<\\\\/script>/gmi, \\\"\\\").trimRight());\\n    //File.renameFile(chapterPath, order + \\\"$A$\\\" + item.title + \\\".txt\\\");\\n    return \\\"toast://\\\" + info.bookName + \\\"@\\\" + item.title + \\\" 下载完成\\\";\\n}\\n\\nfunction comic(item, info, MY_ID, order) {\\n    let mainPath = Config.comicPath + \\\"/\\\" + info.ruleName + \\\"/\\\" + info.bookName + \\\"/\\\";\\n    let chapterPath = mainPath + order + \\\"$B$\\\" + item.title + \\\"/\\\";\\n    let picList = [];\\n    try {\\n        let getPicList = new Function(\\\"input\\\", \\\"return\\\" + info.parseCode);\\n        picList = getPicList(item.url);\\n        if (typeof picList === \\\"string\\\") {\\n            picList = picList.replace(\\\"pics://\\\", \\\"\\\").split(\\\"&&\\\");\\n        }\\n    } catch (e) {\\n        e.message = \\\"<漫画图片解析错误> \\\" + e.message;\\n        throw e;\\n    }\\n\\n    const L = picList.length;\\n    if(L===0){\\n        toast(\\\"图片链接为空\\\");\\n        throw new Error(\\\"<漫画图片解析错误：图片链接返回为空>\\\");\\n    }\\n    if (info.bookTopPic) {\\n        try {\\n            let bookTopPic = Tool.hikerPic(info.bookTopPic);\\n            requireDownload(bookTopPic[0], mainPath + info.bookName + \\\".jpg\\\", bookTopPic[1]);\\n        } catch (e) {\\n            log(\\\"<封面下载错误> \\\" + e.message);\\n        }\\n    }\\n    var schedule = new Map([\\n        [L, () => log(item.title + \\\"已下载100%\\\")],\\n        [~~(0.90 * L), () => log(item.title + \\\"已下载90%+\\\")],\\n        [~~(0.75 * L), () => log(item.title + \\\"已下载75%+\\\")],\\n        [~~(0.50 * L), () => log(item.title + \\\"已下载50%+\\\")],\\n        [~~(0.25 * L), () => log(item.title + \\\"已下载25%+\\\")]\\n    ]);\\n\\n    for (var i = 0; i < L; i++) {\\n        let pic = Tool.hikerPic(picList[i]);\\n        requireDownload(pic[0], chapterPath + (i + 1) + \\\".jpg\\\", pic[1]);\\n        schedule.has(i + 1) && schedule.get(i + 1)();\\n    }\\n\\n    File.renameFile(chapterPath, order + \\\"$A$\\\" + item.title);\\n    return \\\"toast://\\\" + info.bookName + \\\"@\\\" + item.title + \\\" 下载完成\\\";\\n}\\nvar $exe = {\\n    comic: comic,\\n    novel: novel\\n};\\n$.exports = function(item, info, MY_ID, order) {\\n    return $exe[info.type](item, info, MY_ID, order);\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"#f.通用工具\",\"path\":\"Tool.js\",\"rule\":\"$.exports = {\\n    split(text, target, count) {\\n        count = count === undefined ? 1 : count;\\n        let array = [text];\\n        for (let i = 0; i < count; i++) {\\n            text = array[i];\\n            let index = text.indexOf(target);\\n            if (index === -1) {\\n                break;\\n            }\\n            array[i] = text.slice(0, index);\\n            array[i + 1] = text.slice(index + target.length);\\n        }\\n        return array;\\n    },\\n    chunk(arr, size) {\\n        var result = [];\\n        for (var i = 0, len = arr.length; i < len; i += size) {\\n            result.push(arr.slice(i, i + size));\\n        }\\n        return result;\\n    },\\n    hikerPic(url) {\\n        var headers = {};\\n        let urls = url.split(\\\"@\\\");\\n        let picUrl = urls.shift();\\n        let length = urls.length;\\n        for (let i = 0; i < length; i++) {\\n            let [key, value] = urls[i].split(\\\"=\\\");\\n            headers[key] = value;\\n        }\\n        return [picUrl, headers];\\n    },\\n    range(start, end) {\\n        return Array(end - start).fill(0).map((el, i) => start + i);\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"#j.Config\",\"path\":\"Config.json\",\"rule\":\"const Config = Object.assign({\\n    homePath: \\\"/storage/emulated/0/Android/data/com.example.hikerview/files/Documents/localManager\\\",\\n    logNum: 10,\\n    threadNum: 16,\\n    def_isPaginate: \\\"1\\\", //1默认开启分页，0默认关闭\\n    viewPageSize: 200,\\n    def_Pic: \\\"hiker://images/home_pic4\\\",\\n    def_Lord_Type: \\\"comic\\\",\\n    def_View_Style: \\\"text_1\\\",\\n    def_DoVi_Style: \\\"text_2\\\",\\n    def_DoVi_Type: \\\"1\\\", //0全部, 1未完成，2已完成\\n}, JSON.parse(readFile(\\\"config.json\\\") || \\\"{}\\\"));\\nconst PATHS = {\\n    novelPath: \\\"/小说/\\\",\\n    comicPath: \\\"/漫画/\\\",\\n    novelFullPath: \\\"/小说合并/\\\"\\n}\\n\\n\\nObject.keys(PATHS).forEach(key => Config[key] = Config.homePath + PATHS[key]);\\n$.exports = Config;\"},{\"col_type\":\"movie_3\",\"name\":\"#v.主页面\",\"path\":\"Main.view\",\"rule\":\"js:\\nfunction main() {\\n    var layout = [];\\n    const File = $.require(\\\"hiker://page/File.js\\\");\\n    const Config = $.require(\\\"hiker://page/Config.json\\\");\\n    let type = getMyVar(\\\".type\\\", Config.def_Lord_Type);\\n    let tag = File.getFilePath(Config[type + \\\"Path\\\"], \\\"dir\\\");\\n    let tgnum = getMyVar(\\\".tgnum\\\", \\\"0\\\");\\n    addListener(\\\"onClose\\\", $.toString((MY_ID) => {\\n        clearMyVar(\\\"searchKey\\\");\\n        clearMyVar(\\\".tgnum\\\");\\n    }));\\n    layout.push({\\n        title: type === \\\"comic\\\" ? \\\"◉漫画\\\" : \\\"○漫画\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((type) => {\\n            if (type === \\\"comic\\\") return \\\"hiker://empty\\\";\\n            putMyVar(\\\".type\\\", \\\"comic\\\");\\n            clearMyVar(\\\".tgnum\\\");\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, type),\\n        col_type: \\\"text_2\\\",\\n    });\\n    layout.push({\\n        title: type === \\\"novel\\\" ? \\\"◉小说\\\" : \\\"○小说\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((type) => {\\n            if (type === \\\"novel\\\") return \\\"hiker://page/NovelCollected.view#noRecordHistory##noHistory#\\\";\\n            putMyVar(\\\".type\\\", \\\"novel\\\");\\n            clearMyVar(\\\".tgnum\\\");\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, type),\\n        col_type: \\\"text_2\\\",\\n    });\\n    if (tag.length === 0) {\\n        layout.push({\\n            title: \\\"““””\\\" + \\\"一本也没有(进入设置)\\\".big(),\\n            url: \\\"hiker://page/Setting.view#noRefresh##noRecordHistory##noHistory#\\\",\\n            col_type: \\\"text_center_1\\\",\\n            extra: {\\n                version: MY_RULE.version,\\n                lineVisible: false\\n            }\\n        })\\n        return setResult(layout);\\n    }\\n    layout.push({\\n        url: '\\\"hiker://search?s=\\\"+input',\\n        desc: \\\"搜你想要的#\\\" + type + \\\"#......\\\",\\n        title: '搜索',\\n        col_type: 'input',\\n        extra: {\\n            rules: $.toString((tag, type) => {\\n                let arr1 = [];\\n                for (let i = 0; i < tag.length; i++) {\\n                    arr1.push({\\n                        \\\"title\\\": tag[i].name,\\n                        \\\"search_url\\\": \\\"hiker://empty?isAll=1&searchTerms=**&type=\\\" + type,\\n                        \\\"searchFind\\\": \\\"js:$.require('hiker://page/Search.view?rule='+MY_RULE._title);\\\"\\n                    });\\n                }\\n\\n                return JSON.stringify(arr1);\\n            }, tag, type),\\n            defaultValue: getMyVar('searchKey', ''),\\n            onChange: \\\"putMyVar('searchKey',input)\\\"\\n        }\\n    });\\n\\n    layout.push({\\n        title: \\\"‘‘⚙设置’’\\\",\\n        col_type: \\\"scroll_button\\\",\\n        url: \\\"hiker://page/Setting.view#noRefresh##noRecordHistory##noHistory#\\\",\\n        extra: {\\n            version: MY_RULE.version\\n        }\\n    });\\n\\n\\n    for (let i in tag) {\\n        let it = tag[i];\\n        if (tgnum === i) {\\n            layout.push({\\n                title: \\\"““\\\" + it.name + \\\"””\\\",\\n                col_type: \\\"scroll_button\\\",\\n                url: $([\\\"删除该目录\\\", \\\"跳转小程序\\\"], 1, \\\"选择操作\\\").select((it) => {\\n                    if (\\\"跳转小程序\\\" === input) {\\n                        return \\\"hiker://home@\\\" + it.name;\\n                    } else {\\n                        //return then([\\\"该操作不会删除小程序，但该小程序下载的所有漫画将被删除\\\"]);\\n                        return $(\\\"该操作不会删除小程序，但该小程序下载的所有 漫画/小说 将被删除\\\").confirm((path) => {\\n                            const File = $.require(\\\"hiker://page/File.js\\\");\\n                            if (File.deleteFiles(path)) {\\n                                clearMyVar(\\\".tgnum\\\");\\n                                refreshPage();\\n                                return \\\"toast://删除成功\\\";\\n                            } else {\\n                                return \\\"toast://删除失败\\\";\\n                            }\\n                        }, it.path);\\n                    }\\n                }, it)\\n            });\\n        } else {\\n            layout.push({\\n                title: it.name,\\n                col_type: \\\"scroll_button\\\",\\n                url: $(\\\"#noLoading#\\\").lazyRule(i => {\\n                    putMyVar(\\\".tgnum\\\", i);\\n                    refreshPage();\\n                    return \\\"hiker://empty\\\";\\n                }, i),\\n            });\\n        }\\n    }\\n    let path = tag[tgnum].path;\\n    let mhlist = File.getFilePath(path, \\\"dir\\\");\\n\\n    if (mhlist.length === 0) {\\n        layout.push({\\n            title: \\\"““””\\\" + \\\"一本也没有\\\".big(),\\n            url: \\\"hiker://empty\\\",\\n            col_type: \\\"text_center_1\\\",\\n            extra: {\\n                lineVisible: false\\n            }\\n        })\\n        return setResult(layout);\\n    }\\n    let pageUrl = type === \\\"novel\\\" ? \\\"hiker://page/NovelBrowser.view\\\" : \\\"hiker://page/ComicBrowser.view\\\";\\n    for (let item of mhlist) {\\n        let pic = fileExist(\\\"file://\\\" + item.path + \\\"/\\\" + item.name + \\\".jpg\\\") ? item.path + \\\"/\\\" + item.name + \\\".jpg\\\" : Config.def_Pic;\\n        layout.push({\\n            title: item.name,\\n            pic_url: pic,\\n            url: pageUrl + \\\"?rule=\\\" + MY_RULE.title,\\n            extra: item\\n        });\\n    }\\n    setResult(layout);\\n}\\nmain();\"},{\"col_type\":\"text_1\",\"name\":\"#v.漫画查看\",\"path\":\"ComicBrowser.view\",\"rule\":\"js:\\nif (getParam(\\\"hasParams\\\") === \\\"true\\\") {\\n    MY_PARAMS = {\\n        path: decodeURIComponent(getParam(\\\"path\\\")),\\n        name: decodeURIComponent(getParam(\\\"name\\\"))\\n    }\\n}\\nlet path = MY_PARAMS.path;\\nsetPageTitle(\\\"CV|\\\" + MY_PARAMS.name)\\nconst File = $.require(\\\"hiker://page/File.js\\\");\\nconst Tool = $.require(\\\"hiker://page/Tool.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\nvar layout = [];\\nlet mode = getMyVar(\\\".mode\\\", \\\"0\\\");\\nlet isReverse = getMyVar(\\\".isReverse\\\", \\\"0\\\");\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\".mode\\\");\\n    clearMyVar(\\\".isReverse\\\");\\n}));\\nconst comicStatus=new Map([[\\\"A\\\",\\\"\\\"],[\\\"B\\\",\\\"‘‘[未完成]’’\\\"]]);\\nfunction getTitle(title) {\\n    let titles = Tool.split(title, \\\"$\\\", 2);\\n    return comicStatus.get(titles[1])+titles[2] || title;\\n}\\nlayout.push({\\n    title: \\\"删除整本\\\",\\n    url: $(\\\"确认删除整本漫画？\\\").confirm((path) => {\\n        const File = $.require(\\\"hiker://page/File.js\\\");\\n        if (File.deleteFiles(path)) {\\n            back();\\n            return \\\"toast://删除成功\\\";\\n        } else {\\n            return \\\"toast://删除失败\\\";\\n        }\\n    }, path),\\n    col_type: \\\"text_2\\\"\\n});\\nlayout.push({\\n    title: [\\\"看漫画\\\", \\\"删除章节\\\"][mode],\\n    url: $(\\\"#noLoading#\\\").lazyRule((mode) => {\\n        putMyVar(\\\".mode\\\", mode === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n        refreshPage(true);\\n        return \\\"hiker://empty\\\"\\n    }, mode),\\n    col_type: \\\"text_2\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line_blank\\\"\\n})\\nlet mhlist = File.getFilePath(path, \\\"dir\\\");\\nmhlist.sort((a, b) => {\\n    a = (a.name.match(/\\\\d+/) || [])[0] || 0;\\n    b = (b.name.match(/\\\\d+/) || [])[0] || 0;\\n    return a - b;\\n});\\n\\nlayout.push({\\n    title: \\\"““””\\\" + \\\"章节 \\\".big() + (\\\"共有:\\\" + mhlist.length + \\\"章\\\").small(),\\n    url: $(\\\"#noLoading#\\\").lazyRule((isReverse) => {\\n        putMyVar(\\\".isReverse\\\", isReverse === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n        refreshPage(true);\\n        return \\\"hiker://empty\\\"\\n    }, isReverse),\\n    col_type: \\\"text_1\\\"\\n});\\nlet array = [];\\nlet lazy = $(\\\"#noLoading#\\\").lazyRule(() => {\\n    const File = $.require(\\\"hiker://page/File.js\\\");\\n    let filelist = File.getFilePath(input);\\n    let piclist = filelist.map((item, i) => \\\"file://\\\" + input + \\\"/\\\" + (i + 1) + \\\".jpg\\\");\\n    return \\\"pics://\\\" + piclist.join(\\\"&&\\\");\\n})\\nif (mode === \\\"0\\\") {\\n    for (let item of mhlist) {\\n        array.push({\\n            title: getTitle(item.name),\\n            url: item.path+lazy,\\n            col_type: Config.def_View_Style\\n        });\\n    }\\n} else {\\n    for (let item of mhlist) {\\n        let name = getTitle(item.name);\\n        array.push({\\n            title: name,\\n            url: $(\\\"确认删除[\\\" + name + \\\"]？\\\").confirm((path) => {\\n                const File = $.require(\\\"hiker://page/File.js\\\");\\n                if (File.deleteFiles(path)) {\\n                    refreshPage(true);\\n                    return \\\"toast://删除成功\\\";\\n                } else {\\n                    return \\\"toast://删除失败\\\";\\n                }\\n            }, item.path),\\n            col_type: Config.def_View_Style\\n        });\\n    }\\n}\\nif (isReverse === \\\"1\\\") {\\n    array.reverse();\\n}\\nlayout.push.apply(layout, array);\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.聚合搜索\",\"path\":\"Search.view\",\"rule\":\"js:\\nconst File = $.require(\\\"hiker://page/File.js?rule=\\\" + MY_RULE._title);\\nconst Config = $.require(\\\"hiker://page/Config.json?rule=\\\" + MY_RULE._title);\\nlet comicRuleDirs = File.getFilePath(Config[getParam(\\\"type\\\")+\\\"Path\\\"], \\\"dir\\\");\\nif (getParam(\\\"isAll\\\") === \\\"1\\\") {\\n    comicRuleDirs = comicRuleDirs.filter(item => item.name === MY_RULE.title);\\n}\\n\\nlet searchResult = [];\\nlet searchTerms = getParam(\\\"searchTerms\\\");\\nlet termsArr = searchTerms.split(\\\"\\\").map(t => t.replace(/\\\\*|\\\\.|\\\\?|\\\\+|\\\\$|\\\\^|\\\\[|\\\\]|\\\\(|\\\\)|\\\\{|\\\\}|\\\\||\\\\/|\\\\\\\\/g, k => \\\"\\\\\\\\\\\" + k));\\nlet reg = new RegExp(termsArr.join(\\\".*\\\"),\\\"i\\\");\\nlet pageUrl=getParam(\\\"type\\\")===\\\"novel\\\"?\\\"hiker://page/NovelBrowser.view\\\":\\\"hiker://page/ComicBrowser.view\\\";\\nfor (let sonDir of comicRuleDirs) {\\n    let comicList = File.getFilePath(sonDir.path, \\\"dir\\\");\\n    for (let comic of comicList) {\\n        if (reg.test(comic.name)) {\\n            searchResult.push({\\n                title: comic.name,\\n                pic_url: comic.path + \\\"/\\\" + comic.name + \\\".jpg\\\",\\n                url: pageUrl+\\\"?rule=\\\" + MY_RULE._title,\\n                desc: sonDir.name,\\n                extra: comic\\n            });\\n        }\\n    }\\n\\n}\\nsetResult(searchResult);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.设置\",\"path\":\"Setting.view\",\"rule\":\"js:\\nsetPageTitle(MY_RULE.title + \\\"|设置\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\nlet layout = [];\\n\\nlayout.push({\\n    title: \\\"<strong>基础设置</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"目录路径\\\",\\n    url: \\\"hiker://page/Setting/More.view#noRefresh##noRecordHistory##noHistory#?settingType=contents\\\",\\n    desc: Config.homePath,\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"设置默认封面\\\",\\n    desc: Config.def_Pic,\\n    url: \\\"hiker://page/Setting/More.view#noRefresh##noRecordHistory##noHistory#?settingType=defaultPic\\\",\\n    col_type: \\\"text_1\\\",\\n    extra: {\\n        lineVisible: false\\n    }\\n});\\nlayout.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlayout.push({\\n    title: \\\"<strong>下载器设置</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\n\\nfunction setNum(key, test) {\\n    let Config = JSON.parse(readFile(\\\"config.json\\\") || \\\"{}\\\");\\n    input = parseInt(input);\\n    if (Number.isNaN(input)) return \\\"toast://请输入数字\\\";\\n    if (!test(input)) return \\\"toast://不符合条件\\\";\\n    Config[key] = input;\\n    saveFile(\\\"config.json\\\", JSON.stringify(Config));\\n    refreshPage(false);\\n    return \\\"toast://修改成功\\\";\\n}\\nlayout.push({\\n    title: \\\"log数\\\",\\n    url: $(Config.logNum, \\\"0<N<100\\\").input(setNum, \\\"logNum\\\", it => it > 0 && it < 100),\\n    desc: \\\"\\\" + Config.logNum,\\n    col_type: \\\"text_1\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"分批下载数(0不开启)\\\",\\n    url: $(\\\"\\\" + Config.threadNum, \\\"N>-1\\\").input(setNum, \\\"threadNum\\\", it => it > -1),\\n    desc: \\\"\\\" + Config.threadNum,\\n    col_type: \\\"text_1\\\",\\n    extra: {\\n        lineVisible: false,\\n    }\\n});\\n\\n\\nlayout.push({\\n    col_type: \\\"line_blank\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"<strong>小说阅读器设置</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"默认开启分页阅读\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((def_isPaginate) => {\\n        let Config = JSON.parse(readFile(\\\"config.json\\\") || \\\"{}\\\");\\n\\n        Config.def_isPaginate = def_isPaginate === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\";\\n\\n        saveFile(\\\"config.json\\\", JSON.stringify(Config));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\";\\n    }, Config.def_isPaginate),\\n    desc: Config.def_isPaginate === \\\"0\\\" ? \\\"不开启\\\" : \\\"开启\\\",\\n    col_type: \\\"text_1\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"每页最大章数\\\",\\n    url: $(Config.viewPageSize, \\\"30<N<500\\\").input(setNum, \\\"viewPageSize\\\", it => it > 30 && it < 500),\\n    desc: \\\"\\\" + Config.viewPageSize,\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"替换规则\\\",\\n    url: \\\"hiker://page/Setting/More.view#noRecordHistory##noHistory##noRefresh#?settingType=replaceRule\\\",\\n    col_type: \\\"text_1\\\",\\n    extra: {\\n        lineVisible: false\\n    }\\n});\\n\\nlayout.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nlayout.push({\\n    title: \\\"<strong>其他设置</strong>\\\".big(),\\n    col_type: \\\"rich_text\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line\\\"\\n});\\nlayout.push({\\n    title: \\\"规则发布页\\\",\\n    url: \\\"hiker://page/ruleDetail#noHistory##noRecordHistory#?rule=道长仓库Pro\\\",\\n    extra: {\\n        lver: MY_PARAMS.version || \\\"获取版本失败，自行查看\\\",\\n        id: \\\"3559\\\"\\n    },\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"关于如何调用\\\",\\n    url: \\\"https://qun.qq.com/qqweb/qunpro/share?_wv=3&_wwv=128&inviteCode=1HFyBJ&from=246610&biz=ka\\\",\\n    desc: \\\"详细点击加入频道，频道里@LoyDgIk\\\",\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"恢复默认设置\\\",\\n    url: $(\\\"确认恢复默认设置？\\\").confirm(() => {\\n        deleteFile(\\\"config.json\\\");\\n        refreshPage(false);\\n        return \\\"toast://恢复完成\\\";\\n    }),\\n    col_type: \\\"text_1\\\"\\n});\\nlayout.push({\\n    title: \\\"清理缓存\\\",\\n    url: \\\"hiker://page/Setting/More.view#noRecordHistory##noHistory#?settingType=cache\\\",\\n    col_type: \\\"text_1\\\"\\n});\\n/*\\nlayout.push({\\n    title: \\\"清除小说分页记录\\\",\\n    url: $(\\\"确认清除小说分页记录？\\\").confirm(() => {\\n        deleteFile(\\\"novelFootprint.json\\\");\\n        return \\\"toast://清除完成\\\";\\n    }),\\n    col_type: \\\"text_1\\\"\\n});\\n*/\\nsetResult(layout);\"},{\"col_type\":\"text_1\",\"name\":\"#v.小说查看\",\"path\":\"NovelBrowser.view\",\"rule\":\"js:\\nif (getParam(\\\"hasParams\\\") === \\\"true\\\") {\\n    MY_PARAMS = {\\n        path: decodeURIComponent(getParam(\\\"path\\\")),\\n        name: decodeURIComponent(getParam(\\\"name\\\"))\\n    }\\n}\\nlet path = MY_PARAMS.path;\\nsetPageTitle(\\\"NV|\\\" + MY_PARAMS.name);\\nconst File = $.require(\\\"hiker://page/File.js\\\");\\nconst Tool = $.require(\\\"hiker://page/Tool.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\nconst bookInfo = Object.assign({\\n    foot: 0,\\n    isReplace: true\\n}, JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\"));\\nlet id = \\\"#\\\" + new Date().getTime();\\nvar layout = [];\\nlet mode = getMyVar(\\\".mode\\\", \\\"0\\\");\\nlet mode2 = getMyVar(\\\".mode2\\\", Config.def_isPaginate);\\n\\nlet isReverse = getMyVar(\\\".isReverse\\\", \\\"0\\\");\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\".mode\\\");\\n    clearMyVar(\\\".mode2\\\");\\n    clearMyVar(\\\".isReverse\\\");\\n    clearMyVar(\\\".pageNum\\\");\\n}));\\n\\nfunction getTitle(title) {\\n    let titles = Tool.split(title, \\\"$\\\", 2);\\n    return titles[2] !== undefined ? titles[2].slice(0, titles[2].lastIndexOf(\\\".\\\")) : title;\\n}\\nlayout.push({\\n    title: \\\"删除整本\\\",\\n    url: $(\\\"确认删除整本小说？\\\").confirm((path) => {\\n        const File = $.require(\\\"hiker://page/File.js\\\");\\n        if (File.deleteFiles(path)) {\\n            back();\\n            return \\\"toast://删除成功\\\";\\n        } else {\\n            return \\\"toast://删除失败\\\";\\n        }\\n    }, path),\\n    col_type: \\\"text_2\\\"\\n});\\n\\nlayout.push({\\n    title: [\\\"看小说\\\", \\\"删除章节\\\"][mode],\\n    url: $(\\\"#noLoading#\\\").lazyRule((mode) => {\\n        putMyVar(\\\".mode\\\", mode === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n        refreshPage(true);\\n        return \\\"hiker://empty\\\"\\n    }, mode),\\n    col_type: \\\"text_2\\\"\\n});\\n\\nlayout.push({\\n    title: \\\"‘‘更多功能 >’’\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"scroll_button\\\"\\n});\\n\\nfunction txt(paths) {\\n    showLoading(\\\"正在合并...\\\");\\n    const File = $.require(\\\"hiker://page/File.js\\\");\\n    const Tool = $.require(\\\"hiker://page/Tool.js\\\");\\n    const Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\n    let filelist = File.getFilePath(paths.path, \\\"file\\\", \\\".txt\\\");\\n    let listLength = filelist.length;\\n    if (listLength === 0) {\\n        hideLoading();\\n        return \\\"toast://空的章节\\\";\\n    }\\n    const bookInfo = Object.assign({\\n        selected: [],\\n        isReplace: true\\n    }, JSON.parse($.log(request(\\\"file://\\\" + paths.path + \\\"/bookInfo.json\\\")) || \\\"{}\\\"));\\n    let bufilelist = [];\\n    for (let i = 0; i < listLength; i++) {\\n        let file = filelist[i];\\n        let fileInfo = Tool.split(file.name, \\\"$\\\", 2);\\n        bufilelist.push({\\n            name: fileInfo[2].slice(0, fileInfo[2].lastIndexOf(\\\".\\\")),\\n            path: \\\"file://\\\" + file.path,\\n            id: Number(fileInfo[0]) || 0\\n        });\\n    }\\n    bufilelist.sort((a, b) => a.id - b.id);\\n    let entirePath = paths.path.replace(Config.novelPath, Config.novelFullPath) + \\\".txt\\\";\\n    let entirePathto = bookInfo.isReplace ? entirePath + \\\".tmp\\\" : entirePath;\\n\\n    if (fileExist(\\\"file://\\\" + entirePath)) {\\n        toast(\\\"初始化文件\\\");\\n        if (!File.deleteFiles(entirePath)) {\\n            hideLoading();\\n            return \\\"toast://初始化失败\\\";\\n        } else {\\n            toast(\\\"初始化成功\\\");\\n        }\\n    }\\n\\n    for (let i = 0; i < listLength; i++) {\\n        let item = bufilelist[i];\\n        let content = request(item.path);\\n        File.fileWriteAppend(entirePathto, item.name + \\\"\\\\n　　\\\" + content.replace(/^\\\\s+|\\\\s+$/gm, \\\"\\\").split(/\\\\n+/).join(\\\"\\\\r　　\\\") + \\\"\\\\n\\\\n\\\");\\n    }\\n\\n    if (bookInfo.isReplace) {\\n        let ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n        let len = ruleList.length;\\n        let replacePattern = [\\\"replace\\\", \\\"replaceAll\\\"];\\n        let flag = File.fileRule(entirePathto, entirePath, (javaString) => {\\n            for (let i = 0; i < len; i++) {\\n                let replaceRule = ruleList[i];\\n                if (!bookInfo.selected.includes(replaceRule.id)) {\\n                    continue;\\n                }\\n                let replace = replacePattern[0 + replaceRule.isRegex];\\n                javaString = javaString[replace](replaceRule.pattern, replaceRule.replacement);\\n            }\\n            return javaString.getBytes();\\n        });\\n        if (!flag) {\\n            hideLoading();\\n            return \\\"toast://合并失败\\\";\\n        }\\n\\n    }\\n    hideLoading();\\n    return \\\"toast://合并完成\\\";\\n}\\nlayout.push({\\n    title: \\\"合并小说\\\",\\n    url: $(\\\"确定合并?\\\\n会覆盖已有TXT\\\").confirm(txt, MY_PARAMS),\\n    col_type: \\\"scroll_button\\\"\\n});\\nlayout.push({\\n    title: [\\\"☐分页\\\", \\\"☑分页\\\"][mode2],\\n    url: $(\\\"#noLoading#\\\").lazyRule((mode2) => {\\n        putMyVar(\\\".mode2\\\", mode2 === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n        refreshPage(true);\\n        return \\\"hiker://empty\\\";\\n    }, mode2),\\n    col_type: \\\"scroll_button\\\"\\n});\\nlayout.push({\\n    title: \\\"净化\\\",\\n    url: \\\"hiker://page/NovelCustom.view#noRecordHistory##noHistory##noRefresh#\\\",\\n    extra: MY_PARAMS,\\n    col_type: \\\"scroll_button\\\"\\n});\\nlayout.push({\\n    title: \\\"外部查看\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((path) => {\\n        const Config = $.require(\\\"hiker://page/Config.json\\\");\\n        let entirePath = path.replace(Config.novelPath, Config.novelFullPath) + \\\".txt\\\";\\n        if (fileExist(\\\"file://\\\" + entirePath)) {\\n            toast(\\\"调用第三方应用打开文件\\\");\\n            return \\\"openFile://file://\\\" + entirePath\\n        } else {\\n            return \\\"toast://本地暂无可供外部打开的txt文件，请先合并小说！\\\"\\n        }\\n    }, path),\\n    col_type: \\\"scroll_button\\\"\\n});\\nlayout.push({\\n    col_type: \\\"line_blank\\\"\\n});\\n\\nlet mhlist = File.getFilePath(path, \\\"file\\\", \\\".txt\\\");\\nmhlist.sort((a, b) => {\\n    a = (a.name.match(/\\\\d+/) || [])[0] || 0;\\n    b = (b.name.match(/\\\\d+/) || [])[0] || 0;\\n    return a - b;\\n});\\nlet chapterList = [];\\nlet chapterCount = mhlist.length;\\n\\nif (mode2 === \\\"1\\\") {\\n    let mhlistChunk = Tool.chunk(mhlist, Config.viewPageSize);\\n    let viewPageCount = mhlistChunk.length;\\n    let defPage = (viewPageCount - 1 < bookInfo.foot ? 0 : bookInfo.foot) || 0;\\n    let pageNum = Number(getMyVar(\\\".pageNum\\\", \\\"\\\" + defPage));\\n    chapterList = mhlistChunk[pageNum] || [];\\n    layout.push({\\n        title: \\\"““””\\\" + \\\"章节 \\\".big() + (\\\"本页:\\\" + chapterList.length + \\\" 共有:\\\" + chapterCount + \\\"章 当前:\\\" + (pageNum + 1) + \\\"/\\\" + viewPageCount).small(),\\n        url: $(\\\"#noLoading#\\\").lazyRule((isReverse) => {\\n            putMyVar(\\\".isReverse\\\", isReverse === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n            refreshPage(true);\\n            return \\\"hiker://empty\\\"\\n        }, isReverse),\\n        col_type: \\\"text_1\\\"\\n    });\\n    layout.push({\\n        title: \\\"跳集\\\",\\n        url: $(chapterCount, \\\"输入跳转章节 1-\\\" + chapterCount).input((chapterCount, pageNum, viewPageSize, path) => {\\n            let inputNum = Number(input);\\n            if (Number.isNaN(inputNum) || inputNum < 0 || inputNum > chapterCount) {\\n                return \\\"toast://请输入正确范围内的数字\\\";\\n            }\\n            inputNum = Math.floor((inputNum + viewPageSize) / viewPageSize) - 1;\\n            if (pageNum === inputNum) return \\\"toast://正在当前页面\\\";\\n            putMyVar(\\\".pageNum\\\", \\\"\\\" + inputNum);\\n            const bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n            bookInfo.foot = inputNum;\\n            writeFile(\\\"file://\\\" + path, JSON.stringify(bookInfo));\\n            refreshPage(false);\\n        }, chapterCount, pageNum, Config.viewPageSize, path),\\n        col_type: \\\"text_5\\\"\\n    });\\n    layout.push({\\n        title: \\\"跳页\\\",\\n        url: $(pageNum + 1, \\\"跳转页数 1-\\\" + viewPageCount).input((viewPageCount, pageNum, path) => {\\n            let inputNum = Number(input) - 1;\\n            if (Number.isNaN(inputNum) || inputNum < 0 || inputNum > viewPageCount - 1) {\\n                return \\\"toast://请输入正确范围内的数字\\\";\\n            }\\n            if (pageNum === inputNum) return \\\"toast://正在当前页面\\\";\\n            putMyVar(\\\".pageNum\\\", \\\"\\\" + inputNum);\\n            const bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n            bookInfo.foot = inputNum;\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            refreshPage(false);\\n        }, viewPageCount, pageNum, path),\\n        col_type: \\\"text_5\\\"\\n    });\\n    layout.push({\\n        title: \\\"上一页\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((pageNum, path) => {\\n            let inputNum = pageNum - 1;\\n            if (inputNum < 0) {\\n                return \\\"toast://已经是第一页了\\\";\\n            }\\n            putMyVar(\\\".pageNum\\\", \\\"\\\" + inputNum);\\n            const bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n            bookInfo.foot = inputNum;\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, pageNum, path),\\n        col_type: \\\"text_5\\\"\\n    });\\n    layout.push({\\n        title: \\\"下一页\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((viewPageCount, pageNum, path) => {\\n            let inputNum = pageNum + 1;\\n            if (inputNum > viewPageCount - 1) {\\n                return \\\"toast://已经是最后一页了\\\";\\n            }\\n            putMyVar(\\\".pageNum\\\", \\\"\\\" + inputNum);\\n            const bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n            bookInfo.foot = inputNum;\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, viewPageCount, pageNum, path),\\n        col_type: \\\"text_5\\\"\\n    });\\n    layout.push({\\n        title: \\\"末页\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((viewPageCount, pageNum, path) => {\\n            let inputNum = viewPageCount - 1;\\n            if (pageNum === inputNum || inputNum === -1) {\\n                return \\\"toast://已经是最后一页了\\\";\\n            }\\n            putMyVar(\\\".pageNum\\\", \\\"\\\" + inputNum);\\n            const bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n            bookInfo.foot = inputNum;\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        }, viewPageCount, pageNum, path),\\n        col_type: \\\"text_5\\\"\\n    });\\n} else {\\n    chapterList = mhlist;\\n    layout.push({\\n        title: \\\"““””\\\" + \\\"章节 \\\".big() + (\\\"共有:\\\" + chapterCount + \\\"章\\\").small(),\\n        url: $(\\\"#noLoading#\\\").lazyRule((isReverse) => {\\n            putMyVar(\\\".isReverse\\\", isReverse === \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n            refreshPage(true);\\n            return \\\"hiker://empty\\\"\\n        }, isReverse),\\n        col_type: \\\"text_1\\\"\\n    });\\n}\\nlet array = [];\\nif (mode === \\\"0\\\") {\\n    for (let item of chapterList) {\\n        let name = getTitle(item.name);\\n        array.push({\\n            title: name,\\n            url: \\\"hiker://page/NovelMainBody#autoPage##readTheme#\\\",\\n            extra: {\\n                path: item.path,\\n                dirPath: path,\\n                title: name,\\n            },\\n            col_type: Config.def_View_Style\\n        });\\n    }\\n} else {\\n    for (let item of chapterList) {\\n        let name = getTitle(item.name);\\n        array.push({\\n            title: name,\\n            url: $(\\\"确认删除[\\\" + name + \\\"]？\\\").confirm((path) => {\\n                const File = $.require(\\\"hiker://page/File.js\\\");\\n                if (File.deleteFiles(path)) {\\n                    refreshPage(true);\\n                    return \\\"toast://删除成功\\\";\\n                } else {\\n                    return \\\"toast://删除失败\\\";\\n                }\\n            }, item.path),\\n            col_type: Config.def_View_Style\\n        });\\n    }\\n}\\nif (isReverse === \\\"1\\\") {\\n    array.reverse();\\n}\\nlayout.push.apply(layout, array);\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.小说正文阅读\",\"path\":\"NovelMainBody\",\"rule\":\"js:\\nvar layout = [];\\nlet content = request(\\\"file://\\\" + MY_PARAMS.path);\\n//content = content.replace(/\\\\n|\\\\r/g, \\\"<br>\\\").replace(/(&nbsp;)+/g,\\\" \\\");\\nconst bookInfo = Object.assign({\\n    selected: [],\\n    isReplace: true\\n}, JSON.parse(request(\\\"file://\\\" + MY_PARAMS.dirPath + \\\"/bookInfo.json\\\") || \\\"{}\\\"));\\n\\nif (bookInfo.isReplace) {\\n    let javaString = java.lang.String(content);\\n    let ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n    let replacePattern = [\\\"replace\\\", \\\"replaceAll\\\"];\\n    for (let i = 0, len = ruleList.length; i < len; i++) {\\n        let replaceRule = ruleList[i];\\n        if (!bookInfo.selected.includes(replaceRule.id)) {\\n            continue;\\n        }\\n        let replace = replacePattern[0 + replaceRule.isRegex];\\n        javaString = javaString[replace](replaceRule.pattern, replaceRule.replacement);\\n    }\\n    content = String(javaString);\\n}\\ncontent = \\\"　　\\\" + content.replace(/^\\\\s+|\\\\s+$/gm, \\\"\\\").split(/\\\\n+/).join(\\\"<br>　　\\\");\\n\\nlayout.push({\\n    col_type: \\\"rich_text\\\",\\n    title: (\\\"<strong>\\\" + MY_PARAMS.title + \\\"</strong>\\\").big(),\\n});\\n\\nlayout.push({\\n    title: content,\\n    col_type: 'rich_text',\\n    extra: {\\n        textSize: 18,\\n        click: true\\n    }\\n});\\nsetResult(layout);\"},{\"col_type\":\"text_1\",\"name\":\"#v.小说全集查看\",\"path\":\"NovelCollected.view\",\"rule\":\"js:\\nconst File = $.require(\\\"hiker://page/File.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\nlet rulelDir = File.getFilePath(Config.novelFullPath, \\\"dir\\\");\\n\\nlet layout = [];\\n\\nfunction operation(path) {\\n    switch (input) {\\n        case \\\"分享\\\":\\n            return \\\"share://\\\" + path;\\n            break;\\n        case \\\"删除\\\":\\n            const File = $.require(\\\"hiker://page/File.js\\\");\\n            if (File.deleteFiles(path)) {\\n                refreshPage();\\n                return \\\"toast://删除成功\\\";\\n            } else {\\n                return \\\"toast://删除失败\\\";\\n            }\\n            break;\\n        case \\\"海阔预览\\\":\\n            return \\\"editFile://file://\\\" + path;\\n            break;\\n        case \\\"打开方式\\\":\\n            return \\\"openFile://file://\\\" + path;\\n            break;\\n    }\\n}\\nfor (let rulePaths of rulelDir) {\\n    let novels = File.getFilePath(rulePaths.path, \\\"file\\\");\\n    for (let novel of novels) {\\n        layout.push({\\n            title: novel.name,\\n            url: $([\\\"分享\\\", \\\"删除\\\", \\\"海阔预览\\\", \\\"打开方式\\\"], 1).select(operation, novel.path),\\n            desc: \\\"来源：\\\" + rulePaths.name,\\n            col_type: \\\"text_1\\\"\\n        });\\n    }\\n}\\nif (layout.length === 0) {\\n    layout.push({\\n        title: '<h1 style=\\\"text-align: center;\\\">啥都没有耶</h1>',\\n        col_type: \\\"rich_text\\\"\\n    });\\n}\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.更多设置\",\"path\":\"Setting/More.view\",\"rule\":\"js:\\nconst File = $.require(\\\"hiker://page/File.js\\\");\\nconst Config = $.require(\\\"hiker://page/Config.json\\\");\\n\\nconst settingType = MY_PARAMS.settingType || getParam(\\\"settingType\\\");\\n\\nlet layout = [];\\nlet id = \\\"#\\\" + new Date().getTime();\\nswitch (settingType) {\\n    case \\\"cache\\\":\\n        setPageTitle(\\\"清除缓存|设置\\\");\\n        const knownList = new Map([\\n            [File.getName(Config.novelPath), \\\"#管理器#小说缓存目录[不建议清除]\\\"],\\n            [File.getName(Config.comicPath), \\\"#管理器#漫画缓存目录[不建议清除]\\\"],\\n            [File.getName(Config.novelFullPath), \\\"#管理器#小说合并目录[可以清除]\\\"],\\n            [\\\"dr章节缓存\\\", \\\"道长模板临时缓存[建议清除]\\\"]\\n        ]);\\n\\n        let cacheDir = File.getFilePath(Config.homePath, \\\"dir\\\");\\n\\n        function cleanCache(path) {\\n            const File = $.require(\\\"hiker://page/File.js\\\");\\n            if (File.deleteFiles(path)) {\\n                refreshPage(false);\\n                return \\\"toast://清除完成\\\";\\n            } else {\\n                return \\\"toast://清除失败\\\";\\n            }\\n        }\\n        for (let cache of cacheDir) {\\n            layout.push({\\n                title: cache.name,\\n                desc: \\\"大小：\\\" + File.getFileSize(cache.path) + \\\"\\\\n描述：\\\" + knownList.get(cache.name) || \\\"未知目录[风险未知]\\\",\\n                col_type: \\\"text_1\\\",\\n                url: $(\\\"确认清除 \\\" + cache.name + \\\" ?\\\").confirm(cleanCache, cache.path)\\n            });\\n        }\\n        layout.push({\\n            col_type: \\\"line_blank\\\"\\n        });\\n        layout.push({\\n            title: \\\"全部清除(\\\" + File.getFileSize(Config.homePath) + \\\")\\\",\\n            col_type: \\\"text_center_1\\\",\\n            url: $(\\\"确认清除全部缓存数据?\\\").confirm(cleanCache, Config.homePath)\\n        });\\n        break;\\n    case \\\"defaultPic\\\":\\n        setPageTitle(\\\"默认封面|设置\\\");\\n\\n        function setDefaultPic(url) {\\n            let Config = JSON.parse(readFile(\\\"config.json\\\") || \\\"{}\\\");\\n            Config.def_Pic = url;\\n            saveFile(\\\"config.json\\\", JSON.stringify(Config));\\n            back();\\n            return \\\"toast://修改成功\\\";\\n        }\\n        for (let i = 1; i <= 4; i++) {\\n            layout.push({\\n                title: \\\"图片\\\" + i,\\n                col_type: \\\"movie_3\\\",\\n                pic_url: \\\"hiker://images/home_pic\\\" + i,\\n                url: $(\\\"#noLoading#\\\").lazyRule(setDefaultPic, \\\"hiker://images/home_pic\\\" + i)\\n            });\\n        }\\n        break;\\n    case \\\"replaceRule\\\":\\n        if (MY_PARAMS.isRefresh) {\\n            addListener(\\\"onClose\\\", $.toString(() => refreshPage()));\\n        }\\n        setPageTitle(\\\"替换规则|设置\\\");\\n        let ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n        layout.push({\\n            title: \\\"新建替换\\\",\\n            url: \\\"hiker://page/editReplaceRule.view#noRecordHistory##noHistory##noRefresh#?isNew=true\\\",\\n            col_type: \\\"text_3\\\"\\n        });\\n        layout.push({\\n            title: \\\"导出规则\\\",\\n            url: $(\\\"确认导出\\\" + ruleList.length + \\\"条规则？\\\\n({homePtah}/replaceRule.json)\\\").confirm((num) => {\\n                const Config = $.require(\\\"hiker://page/Config.json\\\");\\n                let savePta = Config.homePath + \\\"/replaceRule.json\\\";\\n                writeFile(savePta, readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n                log(\\\"\\\\n路径：\\\" + savePta + \\\"\\\\n导出规则 \\\" + num + \\\" 条\\\");\\n                return \\\"share://\\\" + savePta;\\n            }, ruleList.length),\\n            col_type: \\\"text_3\\\"\\n        });\\n        layout.push({\\n            title: \\\"导入规则\\\",\\n            url: $(\\\"\\\", \\\"输入规则文件路径(*.json)\\\", \\\"规则导入\\\").input(() => {\\n                input = input.startsWith(\\\"file://\\\") ? input : \\\"file://\\\" + input\\n                let ruleText = request(input);\\n                if (!ruleText) return \\\"toast://获取文件为空\\\";\\n                try {\\n                    let newRuleList = JSON.parse(ruleText);\\n                    let ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n                    let newCount = 0,\\n                        updateCount = 0;\\n                    for (let i in newRuleList) {\\n                        let newRule = newRuleList[i];\\n                        if(!newRule.hasOwnProperty(\\\"replacement\\\")||!newRule.hasOwnProperty(\\\"pattern\\\")||!newRule.hasOwnProperty(\\\"name\\\")||(newRule.scopeContent===undefined?false:!newRule.scopeContent)){\\n                            continue;\\n                        }\\n                        let id = newRule.id;\\n                        newRule.id = id || new Date().getTime();\\n                        let idIndex = ruleList.findIndex(rule => rule.id === id);\\n                        if (idIndex > -1) {\\n                            updateCount++;\\n                            ruleList.splice(idIndex, 1, newRule);\\n                        } else {\\n                            newCount++;\\n                            ruleList.push(newRule);\\n                        }\\n                    }\\n                    saveFile(\\\"replaceRule.json\\\", JSON.stringify(ruleList));\\n                    refreshPage();\\n                    log(\\\"\\\\n路径：\\\" + input + \\\"\\\\n总规则数：\\\" + newRuleList.length + \\\"\\\\n更新规则 \\\" + updateCount + \\\" 条\\\\t新增规则 \\\" + newCount + \\\" 条\\\");\\n                    return \\\"toast://导入成功\\\";\\n                } catch (e) {\\n                    log(e.toString());\\n                    return \\\"toast://导入失败\\\";\\n                }\\n            }),\\n            col_type: \\\"text_3\\\"\\n        });\\n        layout.push({\\n            col_type: \\\"line_blank\\\"\\n        });\\n        for (let i = 0, len = ruleList.length; i < len; i++) {\\n            let replaceRule = ruleList[i];\\n            layout.push({\\n                title: replaceRule.name,\\n                col_type: \\\"text_1\\\",\\n                url: \\\"hiker://empty\\\",\\n                extra: {\\n                    cls: id + \\\".\\\" + i,\\n                    lineVisible: false\\n                }\\n            });\\n            layout.push({\\n                title: \\\"删除\\\",\\n                url: $(\\\"#noLoading#\\\").lazyRule((id, index) => {\\n                    var ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n                    let g = ruleList.splice(index, 1);\\n\\n                    saveFile(\\\"replaceRule.json\\\", JSON.stringify(ruleList));\\n                    //deleteItemByCls(id + \\\".\\\" + index);\\n                    refreshPage(false);\\n                    toast(\\\"删除成功\\\");\\n                    return \\\"hiker://empty\\\";\\n                }, id, i),\\n                extra: {\\n                    cls: id + \\\".\\\" + i\\n                },\\n                col_type: \\\"text_2\\\"\\n            });\\n            layout.push({\\n                title: \\\"编辑\\\",\\n                url: \\\"hiker://page/editReplaceRule.view#noRecordHistory##noHistory##noRefresh#?index=\\\" + i,\\n                col_type: \\\"text_2\\\",\\n                extra: {\\n                    cls: id + \\\".\\\" + i\\n                }\\n            });\\n            layout.push({\\n                col_type: \\\"line_blank\\\",\\n                extra: {\\n                    cls: id + \\\".\\\" + i\\n                }\\n            });\\n        }\\n        break;\\n    case \\\"contents\\\":\\n        let f = require(\\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\\\");\\n        setPageTitle(\\\"目录设置|设置\\\");\\n        layout.push({\\n            title: \\\"选择文件夹\\\",\\n            url: JSON.stringify(f.fileSelectionUri({\\n                callback: $.toString((id) => {\\n                    let target = findItem(id).extra;\\n                    updateItem(id, {\\n                        extra: Object.assign(target, {\\n                            defaultValue: PATH\\n                        })\\n                    });\\n                    return true;\\n                },id),\\n                initialPath:Config.homePath,\\n                requireUrl:\\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5099\\\",\\n                pattern: 1\\n            })),\\n            col_type: \\\"input\\\",\\n            desc: \\\"支持hiker://files路径(该操作不会初始化目录)\\\",\\n            extra: {\\n                defaultValue: Config.homePath,\\n                onChange: $.toString((id) => {\\n                    putMyVar(id, input);\\n                }, id),\\n                id:id\\n            }\\n        });\\n        layout.push({\\n            col_type: \\\"line_blank\\\"\\n        });\\n        layout.push({\\n            title: \\\"确认\\\",\\n            url: $(\\\"#noLoading#\\\").lazyRule((id) => {\\n                let input = getMyVar(id, findItem(id).extra.defaultValue || \\\"\\\");\\n                const Config = $.require(\\\"hiker://page/Config.json\\\");\\n                if (input.startsWith(\\\"hiker://files/\\\")) input = getPath(input).slice(7);\\n                if (Config.homePath == input) return \\\"toast://已经是当前目录\\\";\\n                Config = JSON.parse(readFile(\\\"config.json\\\") || \\\"{}\\\");\\n                Config.homePath = input;\\n                saveFile(\\\"config.json\\\", JSON.stringify(Config));\\n                back();\\n                return \\\"toast://已保存\\\";\\n            }, id),\\n            col_type: \\\"text_center_1\\\",\\n        });\\n\\n        break;\\n}\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.编辑替换规则\",\"path\":\"editReplaceRule.view\",\"rule\":\"js:\\nconst isNew = MY_PARAMS.isNew || getParam(\\\"isNew\\\");\\nconst index = MY_PARAMS.index || Number(getParam(\\\"index\\\"));\\nlet layout = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\".editReplaceRule.name\\\");\\n    clearMyVar(\\\".editReplaceRule.isRegex\\\");\\n    clearMyVar(\\\".editReplaceRule.pattern\\\");\\n    clearMyVar(\\\".editReplaceRule.replacement\\\");\\n    clearMyVar(\\\".editReplaceRule.first\\\");\\n    //clearMyVar(\\\".editReplaceRule.scope\\\");\\n}));\\nlet ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\nlet id = \\\"#\\\" + new Date().getTime();\\n//let replaceRule = isNew == \\\"true\\\"?{}:ruleList[index];\\nif (isNew == \\\"true\\\") {\\n    replaceRule = {\\n        id: new Date().getTime(),\\n        isRegex: false,\\n    }\\n} else {\\n    replaceRule = ruleList[index];\\n}\\n//首次初始化\\nif(getMyVar(\\\".editReplaceRule.first\\\",\\\"\\\")==\\\"\\\"){\\n    putMyVar(\\\".editReplaceRule.isRegex\\\", \\\"\\\" + replaceRule.isRegex);\\n    putMyVar(\\\".editReplaceRule.first\\\",\\\"1\\\");\\n}\\nlayout.push({\\n    title: \\\"拷贝\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let att = [\\\"name\\\", \\\"isRegex\\\", \\\"pattern\\\", \\\"replacement\\\"];\\n        let json = {};\\n        att.forEach(key => {\\n            let value = getMyVar(\\\".editReplaceRule.\\\" + key, \\\"\\\");\\n            if (key === \\\"isRegex\\\") {\\n                value = value === \\\"true\\\" ? true : false;\\n            }\\n            json[key] = value;\\n        });\\n        copy(JSON.stringify(json));\\n        return \\\"hiker://empty\\\";\\n    }),\\n    col_type: \\\"text_2\\\"\\n});\\nlayout.push({\\n    title: \\\"粘贴\\\",\\n    url: $(\\\"{{clipboard}}\\\").input(() => {\\n        try {\\n            let json = JSON.parse(input);\\n            if (Array.isArray(json) || json.pattern == undefined) return;\\n            let att = [\\\"name\\\", \\\"isRegex\\\", \\\"pattern\\\", \\\"replacement\\\"];\\n            att.forEach(key => {\\n                putMyVar(\\\".editReplaceRule.\\\" + key, String(json[key]));\\n            });\\n            refreshPage(false);\\n        } catch (e) {\\n            log(e.toString());\\n        }\\n    }),\\n    col_type: \\\"text_2\\\"\\n});\\nlayout.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"替换规则名称\\\",\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getMyVar(\\\".editReplaceRule.name\\\", replaceRule.name),\\n        onChange: 'putMyVar(\\\".editReplaceRule.name\\\",input);'\\n    }\\n});\\n\\nlayout.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"替换规则\\\",\\n    extra: {\\n        titleVisible: false,\\n        type: \\\"textarea\\\",\\n        height: -1,\\n        defaultValue: getMyVar(\\\".editReplaceRule.pattern\\\", replaceRule.pattern),\\n        onChange: 'putMyVar(\\\".editReplaceRule.pattern\\\", input);'\\n    }\\n});\\nlayout.push({\\n    title: \\\"是否使用正则表达式：\\\" + getMyVar(\\\".editReplaceRule.isRegex\\\"),\\n    url: $(\\\"#noLoading#\\\").lazyRule((id) => {\\n        let isRegex = getMyVar(\\\".editReplaceRule.isRegex\\\") === \\\"true\\\" ? false : true;\\n        updateItem({\\n            extra: {\\n                id: id\\n            },\\n            title: \\\"是否使用正则表达式：\\\" + isRegex\\n        });\\n        putMyVar(\\\".editReplaceRule.isRegex\\\", \\\"\\\" + isRegex);\\n        return \\\"hiker://empty\\\";\\n    }, id),\\n    col_type: \\\"text_1\\\",\\n    extra: {\\n        id: id\\n    }\\n});\\nlayout.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"替换为\\\",\\n    extra: {\\n        titleVisible: false,\\n        type: \\\"textarea\\\",\\n        height: -1,\\n        defaultValue: getMyVar(\\\".editReplaceRule.replacement\\\", replaceRule.replacement),\\n        onChange: 'putMyVar(\\\".editReplaceRule.replacement\\\",input);'\\n    }\\n});\\nlayout.push({\\n    title: \\\"保存\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule((replaceRule, isNew, index) => {\\n        let pattern = getMyVar(\\\".editReplaceRule.pattern\\\", \\\"\\\");\\n        if (!pattern) {\\n            return \\\"toast://替换规则不能为空\\\";\\n        }\\n        Object.assign(replaceRule, {\\n            name: getMyVar(\\\".editReplaceRule.name\\\", \\\"\\\"),\\n            isRegex: getMyVar(\\\".editReplaceRule.isRegex\\\") === \\\"true\\\" ? true : false,\\n            pattern: pattern,\\n            replacement: getMyVar(\\\".editReplaceRule.replacement\\\", \\\"\\\")\\n        });\\n        let ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\n        if (isNew == \\\"true\\\") {\\n            ruleList.push(replaceRule);\\n        } else {\\n            ruleList.splice(index, 1, replaceRule);\\n        }\\n        saveFile(\\\"replaceRule.json\\\", JSON.stringify(ruleList));\\n        back();\\n        return \\\"toast://保存成功\\\";\\n    }, replaceRule, isNew, index),\\n    col_type: \\\"text_center_1\\\",\\n});\\n\\n/*\\nlayout.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"替换范围\\\",\\n    extra: {\\n        titleVisible: false,\\n        type: \\\"textarea\\\",\\n        height: -1,\\n        defaultValue: \\\"\\\",\\n        onChange: 'putMyVar(\\\".editReplaceRule.scope\\\",input);'\\n    }\\n});\\n\\n*/\\nsetResult(layout);\"},{\"col_type\":\"movie_3\",\"name\":\"#v.小说个性化净化\",\"path\":\"NovelCustom.view\",\"rule\":\"js:\\nsetPageTitle(\\\"替换规则|\\\" + MY_PARAMS.name);\\nlet ruleList = JSON.parse(readFile(\\\"replaceRule.json\\\") || \\\"[]\\\");\\nlet id = \\\"#\\\" + new Date().getTime();\\n\\nconst bookInfo = Object.assign({\\n    foot: 0,\\n    isReplace: true,\\n    selected: []\\n}, JSON.parse(request(\\\"file://\\\" + MY_PARAMS.path + \\\"/bookInfo.json\\\") || \\\"{}\\\"));\\n\\nlet layout = [];\\nlayout.push({\\n    title: [\\\"☐净化\\\", \\\"☑净化\\\"][0 + bookInfo.isReplace],\\n    url: $(\\\"#noLoading#\\\").lazyRule(($id, path) => {\\n\\n        var bookInfo = JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\");\\n        let isReplace = bookInfo.isReplace===undefined?true:bookInfo.isReplace;\\n        bookInfo.isReplace = !isReplace;\\n        writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n        updateItem($id, {\\n            title: isReplace ? \\\"☐净化\\\" : \\\"☑净化\\\",\\n        });\\n        return \\\"hiker://empty\\\";\\n    }, id + \\\"#-1\\\", MY_PARAMS.path),\\n    extra: {\\n        id: id + \\\"#-1\\\"\\n    },\\n    col_type: \\\"text_2\\\"\\n});\\nlayout.push({\\n    title: \\\"编辑规则\\\",\\n    url: \\\"hiker://page/Setting/More.view#noRecordHistory##noHistory##noRefresh#?settingType=replaceRule\\\",\\n    col_type: \\\"text_2\\\",\\n    extra:{\\n        isRefresh: true\\n    }\\n});\\nfor (let i = 0, len = ruleList.length; i < len; i++) {\\n    let replaceRule = ruleList[i];\\n    let isTrue = bookInfo.selected.includes(replaceRule.id);\\n    layout.push({\\n        title: (isTrue ? \\\"●\\\" : \\\"○\\\") + replaceRule.name,\\n        col_type: \\\"text_1\\\",\\n        url: \\\"hiker://empty\\\",\\n        y: 0,\\n        extra: {\\n            isTrue: isTrue,\\n            id: id + i,\\n            lineVisible: false\\n        }\\n    });\\n    layout.push({\\n        title: \\\"开启\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(($id, replaceRule, path) => {\\n            if (findItem($id).extra.isTrue) {\\n                return \\\"toast://已开启\\\";\\n            }\\n            const bookInfo = Object.assign({\\n                selected: []\\n            }, JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\"));\\n            bookInfo.selected.push(replaceRule.id);\\n            updateItem($id, {\\n                title: \\\"●\\\" + replaceRule.name,\\n                extra: {\\n                    isTrue: true,\\n                    id: $id,\\n                    lineVisible: false\\n                }\\n            });\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            return \\\"hiker://empty\\\";\\n        }, id + i, replaceRule, MY_PARAMS.path),\\n        col_type: \\\"text_2\\\"\\n    });\\n    layout.push({\\n        title: \\\"关闭\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(($id, replaceRule, path) => {\\n            if (!findItem($id).extra.isTrue) {\\n                return \\\"toast://已关闭\\\";\\n            }\\n            const bookInfo = Object.assign({\\n                selected: []\\n            }, JSON.parse(request(\\\"file://\\\" + path + \\\"/bookInfo.json\\\") || \\\"{}\\\"));\\n            bookInfo.selected.splice(bookInfo.selected.indexOf(replaceRule.id), 1);\\n            updateItem($id, {\\n                title: \\\"○\\\" + replaceRule.name,\\n                extra: {\\n                    isTrue: false,\\n                    id: $id,\\n                    lineVisible: false\\n                }\\n            });\\n            writeFile(\\\"file://\\\" + path + \\\"/bookInfo.json\\\", JSON.stringify(bookInfo));\\n            return \\\"hiker://empty\\\";\\n        }, id + i, replaceRule, MY_PARAMS.path),\\n        col_type: \\\"text_2\\\"\\n    });\\n    layout.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n}\\n\\nsetResult(layout);\"}]","proxy":"","icon":"https://lanmeiguojiang.com/tubiao/q/58.png"},{"firstHeader":"sort","last_chapter_rule":"","title":"道长仓库Pro","author":"@LoyDgIk","version":155,"type":"tool","url":"hiker://empty","col_type":"icon_2_round","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n    const {\n        getApi,\n        color,\n        small,\n        getFile,\n        htmlTag,\n        api,\n        md\n    } = $.require(\"hiker://page/utiliy\");\n\nconst lsg=$.require(\"hiker://page/localStorage?rule=道长仓库Pro\");\nlet classA = getVar(\"Warehouse.class\", \"0\");\nlet listUrl = getApi(\"usersUrl\") + classA,\n    myUrl = getApi(\"devSelf\");\n// myUrl = getApi(\"rulesAllUrl\");\nputVar(\"Warehouse.filter\", \"\");\nvar noWait=true;//无需重试\nvar timeout=500;\nvar tmp_headers={\n    timeout:timeout\n};\ntry{\n    var userList = JSON.parse(request(listUrl,tmp_headers)).result,\n        nowCon = 0,\n        ruleCount = JSON.parse(request(getApi(\"ruleCountUrl\"),tmp_headers)).result;\n}catch(e){\n    noWait=false;\n    setResult([{\n        title:'仓库同时访问量过大或网络差，繁忙中...\\n请耐心等待稍后再试',\n        desc:'点击尝试重新访问',\n        col_type:'text_1',\n        url:$('#noLoading#').lazyRule(()=>{\n            refreshPage(false);\n            return 'toast://已刷新'\n        })\n    }]);\n}\nif(noWait){\n    let data = [];\n    let classTab = [\n        [\"上次活跃\", \"0\"],\n        [\"规则数\", \"1\"],\n        [\"注册时间\", \"-1\"]\n    ]\n    for (let item of classTab) {\n        data.push({\n            title: item[1] === classA ? \"““\" + item[0] + \"””\" : item[0],\n            url: $(\"#noLoading#\").lazyRule((key) => {\n                putVar(\"Warehouse.class\", key);\n                refreshPage(false);\n                return \"hiker://empty\";\n            }, item[1]),\n            col_type: \"scroll_button\"\n        });\n    }\n    data.push({\n        title: \"全部规则\",\n        url: \"hiker://page/AllPublicRule?url=hiker://empty#fypage#noHistory##noRecordHistory#\",\n        col_type: \"scroll_button\"\n    });\n    data.push({\n        title: \"刷新依赖\",\n        url: $('#noLoading#').lazyRule((jsonUrl)=>{\n            jsonUrl = jsonUrl+'2505';\n            // log(jsonUrl);\n            let text = request(jsonUrl);\n            if(!/version/.test(text)){\n                return 'toast://服务器正忙,请稍候再试...'\n            }\n            deleteCache(jsonUrl);\n            try {\n                require(jsonUrl);\n                confirm({title:'刷新成功提示',content:\"toast://已刷新,当前版本信息:\\n\"+JSON.stringify(version)})\n                return 'hiker://empty'\n            }catch (e) {\n                return 'toast://糟糕，本地缓存插件被清除了，但是服务器通讯失败!'\n            }\n        },getApi(\"importUrl\")),\n        col_type: \"scroll_button\"\n    });\n    data.push({\n        title:\"通免:\"+color(lsg.getItem(\"通免\",\"X5\"),\"#ff7000\"),\n        col_type:\"scroll_button\",\n        url:$('#noLoading#').lazyRule(()=>{\n            const lsg=$.require(\"hiker://page/localStorage?rule=道长仓库Pro\");\n            if(lsg.getItem(\"通免\",\"X5\")==\"X5\"){\n                lsg.setItem(\"通免\",\"WEB\");\n            }else{\n                lsg.setItem(\"通免\",\"X5\");\n            }\n            refreshPage(false);\n            return \"toast://已设置仓库通免模式为:\"+lsg.getItem(\"通免\");\n        })\n    });\n    data.push({\n        title:\"排序:\"+color(getItem(\"排序\",\"时间\"),\"#ff7000\"),\n        col_type:\"scroll_button\",\n        url:$('#noLoading#').lazyRule((color)=>{\n            let next=getItem(\"排序\",\"时间\")==='时间'?'归并':'时间';\n            setItem(\"排序\",next);\n            //refreshPage(false);\n            updateItem('sort',{title:\"排序:\"+color(next,\"#ff7000\")})\n            return \"toast://已设置仓库开发者规则排序模式为:\"+next;\n        },color),\n        extra:{\n            id:'sort'\n        }\n    });\n    data.push({\n        title:color(\"仓库公告\",\"#ff7000\"),\n        col_type:\"scroll_button\",\n        url:$('hiker://empty#noHistory##noRecordHistory#').rule((md)=>{\n            require(md);\n            let d = [];\n            let 仓库公告=\"暂无公告\";\n            try{\n                仓库公告=fetch('https://gitcode.net/qq_32394351/dr/-/raw/master/js/仓库公告.md');\n            }catch(e){}\n            if(仓库公告) {\n                d.push({\n                    title: marked.parse(仓库公告),\n                    col_type: 'rich_text',\n                    url: 'hiker://empty'\n                });\n            }\n            setResult(d);\n        },md)\n    });\n\n    data.push({\n        title:color(\"升级仓库\",\"#15ab21\"),\n        col_type:\"scroll_button\",\n        url:$('#noLoading#').lazyRule(()=>{\n            const {getApi} = $.require(\"hiker://page/utiliy\");\n            let ruleHead = '海阔视界首页频道规则【道长仓库Pro】￥home_rule_url￥';\n            let url = getApi('importUrl')+\"1094\";\n            let importUrl = 'rule://'+base64Encode(ruleHead+url);\n            return importUrl\n        })\n    });\n\n    data.push({\n        title:color(\"升级$扩展\",\"#15ab21\"),\n        col_type:\"scroll_button\",\n        url:$('#noLoading#').lazyRule(()=>{\n            const {getApi} = $.require(\"hiker://page/utiliy\");\n            let ruleHead = '海阔视界，网页插件￥js_url￥$hiker@';\n            let url = getApi('importUrl')+\"5111\";\n            let importUrl = 'rule://'+base64Encode(ruleHead+url);\n            return importUrl\n        })\n    });\n\n    addListener('onClose', $.toString(() => {\n        clearVar(\"Warehouse.class\");\n    }));\n    let {\n        username,\n        password,\n        user\n    } = getFile();\n\n    let is_login = false;\n    let is_manager = false;\n    if (username !== void 0 && password !== void 0) {\n        myUrl += '?qq=' + username + '&password=' + password;\n        let code_str = request(myUrl,tmp_headers);\n        let code = {};\n        try{\n            code=JSON.parse(code_str);\n        }catch(e){}\n        if (code.status === 0&& code.result.active) {\n            is_login = true;\n            if(code.result.is_manager){\n                is_manager = true;\n                putVar('house.is_manager','真');\n                putVar('house.username',username);\n                putVar('house.password',password);\n            }else{\n                putVar('house.is_manager','');\n                clearVar('house.username');\n                clearVar('house.password');\n            }\n        }\n    }\n    if (is_login) {\n        try{\n            nowCon = JSON.parse(request(getApi(\"nowConUrl\"),tmp_headers)).result;\n        }catch(e){\n            nowCon='未知';\n        }\n        let devData = userList.find(item => item.qq === username);\n        data.push({\n            title: '<strong><span style=\"color: #ff7000\">' + devData.name + '</span></strong>&nbsp;&nbsp;&nbsp;&nbsp;<small><u>规则管理 ></u></small>',\n            pic_url: devData.avatar,\n            col_type: \"avatar\",\n            url: \"hiker://page/devManage#noHistory##noRecordHistory#\",\n            extra: {\n                //username: username,\n                //password: password,\n                dev: devData\n            }\n        });\n        data.push({\n            col_type: 'text_1',\n            title: small(\"现有 \" + color(userList.length, \"#ff7000\") + \" 名开发者，\" + color(ruleCount[0], \"#ff7000\") + \" 条公开规则，\" + color(ruleCount[1], \"#ff7000\") + \" 条集芳阁规则。在线:\"+color(nowCon, \"#ff7000\")),\n            url: \"toast://喵喵喵?\",\n        });\n    } else {\n        data.push({\n            title: small(color(\"开发者登录\", \"#00BFFF\")),\n            col_type: 'text_center_1',\n            desc: small(\"现有\" + color(userList.length, \"#ff7000\") + \"名开发者，\" + color(ruleCount[0], \"#ff7000\") + \"条公开规则，\" + color(0, \"#ff7000\") + \"条集芳阁规则。\"),\n            url: \"hiker://page/devLogin\"\n        });\n    }\n    if (Array.isArray(user) && user.length === 2) {\n        let userlogin = request(api.dis_login, {\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({\n                \"params\": {\n                    \"qq\": user[0],\n                    \"auth_code\": user[1]\n                }\n            }),\n            method: 'POST',\n            timeout:timeout\n        });\n        userlogin = JSON.parse(userlogin).result;\n        if (userlogin.status === 0) {\n            userlogin = userlogin.result\n            data.push({\n                title: userlogin.name + \"&nbsp;&nbsp;\" + userlogin.qq + \"&nbsp;&nbsp;&nbsp;&nbsp;<small><u>更换账号 ></u></small>\",\n                col_type: 'avatar',\n                pic_url: userlogin.avatar_url,\n                url: \"hiker://page/Userregistration\"\n            });\n            data.splice(3,0,{\n                title: userlogin.has_reply?\"🆕回复\":\"🔔回复\",\n                url: \"hiker://page/MyReply?url=hiker://empty#fypage#noHistory##noRecordHistory#\",\n                col_type: \"scroll_button\",\n                extra:{\n                    auth_code:user[1],\n                    qq:user[0]\n                }\n            });\n        } else {\n            data.push({\n                title: userlogin.detail,\n                col_type: 'text_center_1',\n                desc: \"““””<small><u>重新获取验证码 ></u></small>\",\n                url: \"hiker://page/Userregistration\"\n            });\n        }\n    } else {\n        data.push({\n            title: \"评论登录/注册\",\n            col_type: 'text_center_1',\n            desc: \"\",\n            url: \"hiker://page/Userregistration\"\n        });\n    }\n    for (var item of userList) {\n        data.push({\n            title: item.name + \"(\" + item.rule_num + \")\",\n            desc: item.id + ':' + item.nick_name,\n            pic_url: item.avatar,\n            url: \"hiker://page/rules#noHistory#\",\n            extra: {\n                avatarUrl: item.avatar,\n                qq: item.qq,\n                id:item.id,\n                can_upload:item.can_upload\n            }\n        });\n    }\n\n    data.push({\n        col_type: 'long_text'\n    });\n    setResult(data);\n    let img = [\n        [\n            \"hiker://files/icon/赞.svg\", \"https://bafybeiaeetwbc3thoy22y5zd7al6rndeqbrbwhszqb6oitnf7a5zvsz5pe.ipfs.cf-ipfs.com/\"\n        ],\n        [\n            \"hiker://files/icon/踩.svg\", \"https://bafybeiehxynphaafe4mukacs7we4d6lrb35kppdiffjv4vwnsq22nfqnl4.ipfs.cf-ipfs.com/\"\n        ],\n        [\n            \"hiker://files/icon/评论.svg\", \"https://bafybeifhxi5rdnxq5xly7r4qdbwico2343smelxdqoytalguctgc2ojsdy.ipfs.cf-ipfs.com/\"\n        ]\n    ]\n    for (let item of img) {\n        if (!fileExist(item[0])) {\n            writeFile(item[0], request(item[1]));\n        }\n    }\n}","searchFind":"js:\nvar d = [];\nconst {\n    api,\n    getApi,\n    localRuleVer    \n} = $.require(\"hiker://page/utiliy\");\nvar html = request(getApi(\"search\") + \"?key=\" + MY_URL.replace(\"hiker://empty#\", \"\")); // 获取源码\nvar rule_list = JSON.parse(html).result;\nlet filter = getVar(\"Warehouse.filter\", \"\");\nif (filter !== \"\") {\n    rule_list = rule_list.filter(item => item.author === filter);\n}\nif (rule_list.length === 0) {\n    d.push({\n        title: '共搜索到' + rule_list.length + \"条记录\",\n        desc: '详情请找道长,qq 434857005',\n        url: \"hiker://empty\",\n        col_type: 'text_center_1'\n    });\n}\nlet homeList = JSON.parse(request(api.home));\n\nfor (let item of rule_list) {\n    //let lver=localRuleVer(homeList, item);\n    let label = \"\",\n        lver = -2;\n    if (item.data_type === \"home_rule_url\") {\n        lver = localRuleVer(homeList, item);\n        if (lver === -1) {\n            label = \"🆕\";\n        } else if (lver < item.ver) {\n            label = \"🆙\";\n        }\n    }\n    d.push({\n        title: label+item.name,\n        desc: item.type,\n        content: item.author/*+\"\\n本地版本:\"+lver+\"\\t\\t云端版本:\"+item.ver*/+ '\\n更新于:' + item.last_update,\n        url: \"hiker://page/ruleDetail#noHistory##noRecordHistory#\",\n        extra: {\n            lver: lver,\n            id: item.id\n        },\n        pic_url: item.pic_url\n    });\n\n}\n\nsetResult(d);","search_url":"hiker://empty#**","titleColor":"#ff228be6","group":"①推荐","detail_col_type":"text_1","detail_find_rule":"","sdetail_col_type":"text_1","sdetail_find_rule":"","ua":"mobile","preRule":"$.require('hiker://page/libs?rule=道长仓库Pro');","pages":"[{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"utiliy\",\"rule\":\"js:\\nlet host = \\\"http://hiker.nokia.press\\\";\\n//let host = \\\"http://192.168.3.94:8079\\\";\\nlet home = base64Decode(\\\"aGlrZXI6Ly9ob21l\\\");\\nvar api = {\\n    host: host+\\\"/hikerule\\\",\\n    usersUrl: \\\"/dev/users?order=\\\", //用户列表\\n    ruleCountUrl: \\\"/dev/rulecount\\\", //获取规则数量\\n    rulesUrl: \\\"/dev/get\\\", //用户对应的规则列表仅仅获取公开\\n    rulesAllUrl: \\\"/dev/getall\\\", //开发者对应的规则列表可获取私有\\n    devSelf:'/dev/getself',//获取开发者信息\\n    manCanUpload:'/set_can_upload/',//超管设置开发者是否可上传\\n    manRuleSafe:'/set_rule_safe/',//超管设置规则安全性\\n    manRuleGood:'/set_rule_good/',//超管设置规则优质性\\n    importUrl: \\\"/rulelist.json?id=\\\", //规则详情可导入\\n    infoSetUrl: \\\"/dev/set_info\\\",\\n    nowConUrl: \\\"/sql_info/get_now_con\\\",\\n    infoGetUrl: \\\"/dev/get_info?name=\\\",\\n    settingsGetUrl: \\\"/dev/get_settings?name=\\\",\\n    gupload: \\\"/dev/gupload\\\",\\n    gtimeover: \\\"/dev/gtimeover\\\",\\n    getbyid: \\\"/dev/getbyid\\\",\\n    ruleListJson: \\\"/rulelist.json\\\",\\n    auth: \\\"/dev/get_auth\\\",\\n    timeover: \\\"/dev/timeover\\\",\\n    share: \\\"/dev/share\\\",\\n    genAuth: \\\"/dev/gen_auth\\\",\\n    deleteUrl: \\\"/dev/delete\\\",\\n    jsonList: \\\"/dev/json_list\\\",\\n    search: \\\"/dev/search\\\",\\n    new_dev: \\\"/dev_regist/new\\\",\\n    new_getId: \\\"/dev_regist/get_id\\\",\\n    new_confirm: \\\"/dev_regist/confirm\\\",\\n    modify_pwd: \\\"/modify/password\\\",\\n    modify_name: \\\"/modify/name\\\",\\n    modify_ava: \\\"/modify/avatar\\\",\\n    user: \\\"/dev/user/\\\",\\n    get_rule_note: \\\"/modify/get_rule_note/\\\",\\n    set_rule_pic: \\\"/modify/rule_pic/\\\",\\n    set_rule_note: \\\"/modify/rule_note/\\\"\\n}\\n$.exports.range = function(m, n) {\\n    return Math.floor(Math.random() * (m - n + 1) + n);\\n}\\n$.exports.mapColType = function(target, type, n) {\\n    for (let i = 0; i < n; i++) {\\n        target.push({\\n            col_type: type\\n        });\\n    }\\n}\\nvar getApi = function(k) {\\n    return api.host + api[k];\\n};\\n$.exports.getApi=getApi;\\n$.exports.md=getApi('importUrl')+\\\"3187\\\";\\n$.exports.localRuleVer = function(localRuleList, rule) {\\n    let localRule;\\n    for (let i = 0; i < localRuleList.length; i++) {\\n        let item = localRuleList[i];\\n        let au = item.author || \\\"\\\";\\n        let sameAu=au.length > 0 && rule.author.includes(au);\\n        sameAu=true;//不判断作者默认为true\\n        if (item.title === rule.name && sameAu) {\\n            localRule = item;\\n            break;\\n        }\\n    }\\n    if (localRule === void 0) {\\n        return -1;\\n    } else {\\n        return localRule.version;\\n    }\\n}\\n$.exports.color = function(text, color) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n}\\n\\n$.exports.sleep = function(timeout){\\n    java.lang.Thread.sleep(timeout);\\n}\\nfunction htmlTag(tag, text) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n\\n}\\n\\nfunction getNowFormatDate() {\\n            let date = new Date();\\n            let seperator1 = \\\"-\\\";\\n            let seperator2 = \\\":\\\";\\n            let month = date.getMonth() + 1;\\n            let strDate = date.getDate();\\n            let strHours = date.getHours();\\n            let strMinutes = date.getMinutes();\\n            let strSeconds = date.getSeconds()+1;\\n            if (month >= 1 && month <= 9) {\\n                month = \\\"0\\\" + month\\n            }\\n            if (strDate >= 0 && strDate <= 9) {\\n                strDate = \\\"0\\\" + strDate\\n            }\\n            if (strHours >= 0 && strHours <= 9) {\\n                strHours = \\\"0\\\" + strHours\\n            }\\n            if (strMinutes >= 0 && strMinutes <= 9) {\\n                strMinutes = \\\"0\\\" + strMinutes\\n            }\\n            if (strSeconds >= 0 && strSeconds <= 9) {\\n                strSeconds = \\\"0\\\" + strSeconds\\n            }\\n            //let currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + \\\" \\\" + strHours + seperator2 + strMinutes + seperator2 + strSeconds;\\n            let currentdate = (date.getFullYear()-2020)+''+ month +''+ strDate +''+ strHours+'' + strMinutes +''+ Math.ceil(strSeconds/7);\\n            return parseInt(currentdate)\\n        }\\n$.exports.getNowFormatDate = getNowFormatDate;\\n$.exports.htmlTag = htmlTag;\\n$.exports.small = function(text) {\\n    return htmlTag(\\\"small\\\", text);\\n}\\n$.exports.getFile = function() {\\n    var File = request(\\\"hiker://files/WarehouseUSER.json\\\") || \\\"{}\\\";\\n    try {\\n        return JSON.parse(File);\\n    } catch (e) {\\n        writeFile(\\\"hiker://files/WarehouseUSER.json\\\", \\\"{}\\\");\\n        return {};\\n    }\\n}\\n$.exports.getUserDate =function(){\\n    var File = request(\\\"hiker://files/WarehouseUSERA.json\\\") || \\\"[]\\\";\\n    try {\\n        return JSON.parse(File);\\n    } catch (e) {\\n        writeFile(\\\"hiker://files/WarehouseUSERA.json\\\", \\\"[]\\\");\\n        return [];\\n    }\\n}\\n$.exports.existFile = function(spath, ipath, headers) {\\n    let scode = request(spath);\\n    if (!scode) {\\n        writeFile(spath, request(ipath, headers));\\n    }\\n}\\n\\nlet newApi = {\\n    \\\"dis_new\\\": \\\"/hikerule/new_rule_discuss/\\\",\\n    \\\"dis_verify\\\": \\\"/hikerule/rule_discuss/get_yzm\\\",\\n    \\\"dis_get\\\": \\\"/hikerule/rule_discuss/\\\",\\n    \\\"dis_set\\\": \\\"/hikerule/modify/can_discuss/\\\",\\n    \\\"dis_new_user\\\": \\\"/hikerule/rule_discuss/new_user\\\",\\n    \\\"dis_login\\\":\\\"/hikerule/rule_discuss/user_login\\\",\\n    \\\"dis_dev_discuss\\\":\\\"/hikerule/modify/dev_can_discuss\\\",\\n    \\\"dis_dev_control\\\":\\\"/hikerule/rule_discuss/remove/\\\",\\n    \\\"all_rule\\\":\\\"/hikerule/get_rules\\\",\\n    \\\"dis_get_reply\\\":\\\"/hikerule/get_reply_rule_discuss\\\",\\n    \\\"dis_reply\\\":\\\"/hikerule/dev_new_rule_discuss/\\\",\\n}\\n\\nfunction setApi(object) {\\n    let target = {};\\n    for (let key in object) {\\n        target[key]=host+object[key]\\n    }\\n    return target;\\n}\\n\\n$.exports.api = setApi(newApi);\\n$.exports.api.host=host;\\n$.exports.api.home=home;\"},{\"col_type\":\"movie_3\",\"name\":\"开发者登录\",\"path\":\"devLogin\",\"rule\":\"js:\\nsetPageTitle(\\\"开发者登录\\\");\\nconst {\\n    getApi,\\n    htmlTag,\\n    mapColType,\\n    small,\\ngetFile\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nvar data = [];\\naddListener('onClose', $.toString(()=>{\\n    clearVar(\\\"WarehouseUsername\\\");\\n    clearVar(\\\"WarehousePassword\\\");\\n}))\\ndata.push({\\n    title: '账号',\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('WarehouseUsername',''),\\n        type:\\\"number\\\",\\n        onChange: 'putVar(\\\"WarehouseUsername\\\",input)'\\n    }\\n}, {\\n    title: '密码',\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('WarehousePassword', ''),\\n        type: \\\"password\\\",\\n        onChange: 'putVar(\\\"WarehousePassword\\\",input)'\\n    }\\n});\\n\\ndata.push({\\n    title:\\\"&nbsp;&nbsp;<a href='hiker://page/Register'>注册</a>\\\",\\n    col_type:\\\"rich_text\\\"\\n});\\nmapColType(data, \\\"line_blank\\\", 1);\\nlet user = getFile();\\ndata.push({\\n    title: htmlTag(\\\"b\\\", \\\"登录\\\"),\\n    url: $().lazyRule((url, f)=> {\\n        let username = getVar('WarehouseUsername', ''),\\n            password = getVar('WarehousePassword', '');\\n        if(username === \\\"\\\" && password ===\\\"\\\"){\\n            return \\\"toast://账号和密码不能为空\\\"\\n        }\\n        let myUrl = url + '?qq=' + username + '&password=' + password;\\n        let code_str = request(myUrl);\\n        let code = JSON.parse(code_str);\\n        if (code.status == 0) {\\n            f.username=username;\\n            f.password=password\\n            writeFile('hiker://files/WarehouseUSER.json', JSON.stringify(f));\\n            back();\\n            return \\\"toast://登录成功\\\";\\n        }else{\\n            return \\\"toast://账号或密码错误\\\";\\n        }\\n    }, getApi(\\\"rulesAllUrl\\\"),user),\\n    col_type: 'text_center_1'\\n});\\nsetResult(data);\"},{\"col_type\":\"icon_2_round\",\"name\":\"开发者管理\",\"path\":\"devManage\",\"rule\":\"js:\\nsetPageTitle(\\\"规则管理\\\");\\naddListener('onClose', 'clearVar(\\\"Warehouse.back\\\",\\\"\\\");');\\nif (getVar(\\\"Warehouse.back\\\") === \\\"1\\\") {\\n    back();\\n}\\nconst {\\n    getApi,\\n    color,\\n    small,\\n    getFile,\\n    existFile,\\n    mapColType,\\n    api\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    dev\\n} = MY_PARAMS;\\nlet {\\n    username,\\n    password,\\n} = getFile();\\n//existFile(\\\"hiker://files/rules/dzHouse/html/开发者分享.html\\\", \\\"https://erp.scwinbao.com/hikerule/rulelist.json?id=539\\\");\\nlet ruleList = JSON.parse(request(getApi(\\\"rulesAllUrl\\\") + '?qq=' + username + '&password=' + password)).result;\\nlet MOBILE_UA = 'Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Mobile Safari/537.36';\\nlet infoSetUrl = getApi(\\\"infoSetUrl\\\");\\nlet infoGetUrl = getApi(\\\"infoGetUrl\\\") + username;\\nlet settingsGetUrl = getApi(\\\"settingsGetUrl\\\") + username;\\nputMyVar(\\\"dev_set_info\\\", [username, password, infoSetUrl, MOBILE_UA, infoGetUrl].join(\\\"$$\\\"));\\nlet data = [];\\ndata.push({\\n    title: '““””<big>仓库设置</big>&nbsp;&nbsp;&nbsp;<small><u>（ 个人资料 >）</u></small>',\\n    desc: '““””您共有 <span style=\\\"color: #ff7000\\\">' + ruleList.length + '</span>' + \\\" 条规则。\\\\n点击规则可进行分享、删除、导入操作及查看详情\\\",\\n    url: \\\"hiker://page/PersonalData#noHistory##noRecordHistory#\\\",\\n    extra:{id:dev.id},\\n    col_type: 'text_1'\\n});\\nmapColType(data, \\\"line\\\", 2);\\ndata.push({\\n    title: small(color(\\\"更改公告✍\\\", \\\"#34b1ff\\\")),\\n    // url: \\\"x5://file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/dzHouse/html/dev_info_edit.html\\\",\\n    url: \\\"hiker://page/devInfoEdit\\\",\\n    col_type: 'text_3'\\n});\\ndata.push({\\n    title: small(color(\\\"更多分享📲\\\", \\\"#34b1ff\\\")),\\n    //url: \\\"x5://file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/dzHouse/html/开发者分享.html\\\",\\n    url: \\\"hiker://page/moreShare\\\",\\n    col_type: 'text_3'\\n});\\ndata.push({\\n    title: small(color(\\\"升级依赖📥\\\", \\\"#34b1ff\\\")),\\n    url: $(\\\"升级会重新从仓库拉取相关的静态页面到本地\\\\n确认升级吗?\\\").confirm((host) => {\\n        writeFile(\\\"hiker://files/rules/dzHouse/html/开发者分享.html\\\", request(host+'/hikerule/rulelist.json?id=539'));\\n        writeFile(\\\"hiker://files/rules/dzHouse/html/dev_info_edit.html\\\", request(host+'/hikerule/rulelist.json?id=402'));\\n        writeFile(\\\"hiker://files/rules/dzHouse/html/dev_info_get.html\\\", request(host+'/hikerule/rulelist.json?id=404'));\\n        refreshPage(false);\\n        return \\\"toast://已重置开发者分享,简介查看,简介编辑等静态文件\\\";\\n    },api.host),\\n    col_type: 'text_3'\\n});\\nlet devSetBack;\\ntry {\\n    devSetBack = JSON.parse(request(settingsGetUrl));\\n} catch (e) {\\n    devSetBack = {};\\n}\\n\\nfunction setSettingItem(basic) {\\n    let temp = {\\n        title: basic.title,\\n        col_type: basic.col_type,\\n        url: $(basic.confirm).confirm((url, msg) => {\\n            let back = request(url);\\n            let ret = JSON.parse(back);\\n            if (ret.status == 0) {\\n                refreshPage(true);\\n                return \\\"toast://\\\" + msg[0];\\n            } else {\\n                refreshPage(false);\\n                return \\\"toast://\\\" + msg[1] + \\\"\\\\n\\\" + ret.detail;\\n            }\\n        }, basic.url, basic.msg)\\n    };\\n    return temp;\\n}\\nif (devSetBack.status == 0) {\\n    let devSettings = devSetBack.result;\\n    let share = {\\n        col_type: \\\"text_3\\\"\\n    };\\n    if (devSettings.share_public) {\\n        share.title = small(color(\\\"公开上传\\\", \\\"green\\\") + color(\\\"(私藏)\\\", \\\"#00bfff\\\"));\\n        share.url = getApi(\\\"gupload\\\") + \\\"?qq=\\\" + username + \\\"&password=\\\" + password + \\\"&flag=1\\\";\\n        share.confirm = \\\"是否确认私藏以后提交的规则?\\\";\\n        share.msg = [\\\"已私藏\\\", \\\"私藏失败\\\"];\\n    } else {\\n        share.title = small(color(\\\"私密上传\\\", \\\"red\\\") + color(\\\"(公开)\\\", \\\"#adff2f\\\"));\\n        share.url = getApi(\\\"gupload\\\") + \\\"?qq=\\\" + username + \\\"&password=\\\" + password;\\n        share.confirm = \\\"是否确认公开以后提交的规则?\\\";\\n        share.msg = [\\\"已公开\\\", \\\"公开失败\\\"];\\n    }\\n    data.push(setSettingItem(share));\\n    let timeOver = {\\n        col_type: \\\"text_3\\\"\\n    };\\n    if (devSettings.time_over) {\\n        timeOver.title = small(color(\\\"短时秘钥\\\", \\\"green\\\") + color(\\\"(永久)\\\", \\\"#00bfff\\\"));\\n        timeOver.url = getApi(\\\"gtimeover\\\") + \\\"?qq=\\\" + username + \\\"&password=\\\" + password + \\\"&flag=1\\\";\\n        timeOver.confirm = \\\"是否确认以后的私藏规则分享不过期?\\\";\\n        timeOver.msg = [\\\"已设为永久\\\", \\\"设为永久失败\\\"];\\n    } else {\\n        timeOver.title = small(color(\\\"永久秘钥\\\", \\\"red\\\") + color(\\\"(过期)\\\", \\\"#adff2f\\\"));\\n        timeOver.url = getApi(\\\"gtimeover\\\") + \\\"?qq=\\\" + username + \\\"&password=\\\" + password;\\n        timeOver.confirm = \\\"确认要以后分享的私藏规则自动到期?\\\";\\n        timeOver.msg = [\\\"已设为过期\\\", \\\"设为过期失败\\\"];\\n    }\\n    data.push(setSettingItem(timeOver));\\n    let discuss = {\\n        col_type: \\\"text_3\\\"\\n    };\\n    if (devSettings.can_discuss) {\\n        discuss.title = small(color(\\\"允许评论\\\", \\\"red\\\") + color(\\\"(不许)\\\", \\\"#adff2f\\\"));\\n        discuss.url = api.dis_dev_discuss + \\\"?qq=\\\" + username + \\\"&password=\\\" + password+ \\\"&flag=1\\\";\\n        discuss.confirm = \\\"是否确认以后上传的规则允许评论?\\\";\\n        discuss.msg = [\\\"已设为不许\\\", \\\"设置失败\\\"];\\n\\n    } else {\\n        discuss.title = small(color(\\\"不许评论\\\", \\\"green\\\") + color(\\\"(允许)\\\", \\\"#00bfff\\\"));\\n        discuss.url = api.dis_dev_discuss + \\\"?qq=\\\" + username + \\\"&password=\\\" + password;\\n        discuss.confirm = \\\"是否确认以后上传的规则允许评论?\\\";\\n        discuss.msg = [\\\"已设为允许\\\", \\\"设置失败\\\"];\\n    }\\n    data.push(setSettingItem(discuss));\\n}\\nmapColType(data, \\\"line\\\", 2);\\nfor (let item of ruleList) {\\n    let my_t_excode1 = '';\\n    let my_t_excode2 = '';\\n    if (item.state != 'public') {\\n        my_t_excode1 += '㊙️';\\n    } else {\\n        my_t_excode1 += '';\\n    }\\n    data.push({\\n        title: my_t_excode1 + item.name + my_t_excode2,\\n        url: \\\"hiker://page/manageRule#noHistory##noRecordHistory#\\\",\\n        extra: {\\n            id: item.id,\\n            //username: username,\\n            //password: password\\n        },\\n        pic_url: item.pic,\\n    })\\n}\\nif (ruleList.length === 0) {\\n    data.push({\\n        title: \\\"<h5 style='text-align:center'>快来上传你的第一条规则吧！</h5>\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n}\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"规则详细-dev\",\"path\":\"manageRule\",\"rule\":\"js:\\n    const {\\n        getApi,\\n        color,\\n        small,\\n        getFile,\\n        existFile,\\n        mapColType,\\n        htmlTag,\\n        api,\\n        md,\\n    } = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    id\\n} = MY_PARAMS;\\nlet {\\n    username,\\n    password,\\n} = getFile();\\naddListener('onClose', $.toString(() => {\\n    refreshPage(false);\\n}));\\nlet dataItem = JSON.parse(request(getApi(\\\"getbyid\\\") + \\\"?id=\\\" + id)).result;\\nsetPageTitle(\\\"编辑「\\\" + dataItem.name + \\\"」\\\");\\nlet reqByGet = \\\"?id=\\\" + dataItem.id + \\\"&qq=\\\" + username + \\\"&password=\\\" + password;\\nlet ruleListJson = getApi(\\\"ruleListJson\\\") + \\\"?id=\\\";\\nlet data = [];\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"版本\\\"),\\n    desc: \\\"““””云端版本:\\\" + color(dataItem.ver, \\\"#5cff2c\\\") + \\\"\\\\n上次提交于: [\\\" + color(dataItem.last_update, \\\"#ff7000\\\") + \\\"]\\\",\\n    url: $(\\\"<开发者>\\\\n\\\" + dataItem.author + \\\"\\\\n<名称>\\\\n\\\" + dataItem.name + \\\"\\\\n<云端版本>\\\\n\\\" + dataItem.ver + \\\"\\\\n<更新时间>\\\\n[\\\" + dataItem.last_update + \\\"]\\\").confirm(() => {}),\\n    col_type: 'text_1'\\n});\\nlet dataType = {\\n    home_rule_url: '首页云规则',\\n    publish: '提交云仓库规则',\\n    js_url: '网页插件规则',\\n    html: '静态页面',\\n    config: '主页配置'\\n};\\n\\nlet basic = {\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://empty\\\"\\n};\\nlet dataTypeTips = dataType[dataItem.data_type] || '未知规则:' + dataItem.data_type;\\n\\nbasic.title = htmlTag(\\\"big\\\", \\\"类型\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(\\\"(id:\\\" + dataItem.id + \\\")\\\");\\nbasic.desc = \\\"数据类型：\\\" + color(dataTypeTips, \\\"#cb54ff\\\") + \\\"\\\\n分享状态为：\\\" + dataItem.state;\\nif ([\\\"html\\\", \\\"config\\\", \\\"js_url\\\"].includes(dataItem.data_type)) {\\n    basic.desc += \\\"\\\\n““”” =>\\\" + small(\\\"点此预览\\\");\\n    basic.url = ruleListJson + dataItem.id;\\n}\\nlet auth = \\\"\\\";\\nif (dataItem.state == \\\"private\\\") {\\n    let auth_back = JSON.parse(request(getApi(\\\"auth\\\") + reqByGet));\\n    basic.title = basic.title + \\\"\\\\n\\\" + small(color(auth_back.result, \\\"grey\\\"));\\n    auth = '&auth=' + auth_back.result;\\n    basic.url = basic.url === \\\"hiker://empty\\\" ? basic.url : basic.url + auth;\\n}\\ndata.push(basic);\\nlet notes = request(getApi(\\\"get_rule_note\\\") + id);\\nnotes = JSON.parse(notes).result;\\nrequire(md);\\nlet notesHtml=\\\"\\\"\\ntry{\\n    notesHtml=marked.parse(notes);\\n}catch(e){}\\nif (notes !== false) {\\n    data.push({\\n        title: htmlTag(\\\"big\\\", \\\"备注\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(htmlTag(\\\"u\\\", \\\"查看完整公告 >\\\")),\\n        desc: notes,\\n        col_type: \\\"text_1\\\",\\n        url: \\\"hiker://page/info\\\",\\n        extra: {\\n            text: notesHtml,\\n            name: dataItem.name,\\n            // type: \\\"long_text\\\"\\n            type: \\\"rich_text\\\"\\n        }\\n    });\\n}\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"操作\\\"),\\n    col_type: \\\"text_1\\\",\\n    url: \\\"toast://你才是最帅的那个人！\\\"\\n});\\nlet importUrl, ruleCode, shareUrl, backCode = \\\"\\\";\\nlet subUrl = ruleListJson + dataItem.id + auth;\\nif (!dataItem.is_json) {\\n    backCode = request(subUrl);\\n}\\nswitch (dataItem.data_type) {\\n    case \\\"home_rule_url\\\":\\n        ruleCode = \\\"海阔视界首页频道规则【\\\" + dataItem.name + \\\"】￥home_rule_url￥\\\" + ruleListJson + dataItem.id + auth;\\n        importUrl = \\\"rule://\\\" + base64Encode(ruleCode)\\n        break;\\n    case 'publish':\\n        ruleCode = '海阔视界规则分享，当前分享的是：' + dataItem.name + '￥publish￥' + base64Encode(backCode);\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break;\\n    case 'js_url':\\n        ruleCode = '海阔视界规则分享，当前分享的是：网页插件￥js_url￥' + dataItem.name + '@base64://' + base64Encode(backCode);\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break;\\n    case 'html':\\n        let file_tmp = dataItem.name.split('.');\\n        let file_path = file_tmp.length > 1 ? file_tmp[file_tmp.length - 1] + \\\"/\\\" + dataItem.name : dataItem.name;\\n        ruleCode = \\\"海阔视界本地文件分享￥file_url￥hiker://files/rules/dzHouse/\\\" + file_path + \\\"@\\\" + ruleListJson + dataItem.id + auth;\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break\\n    case \\\"config\\\":\\n        importUrl = $().rule(password => {\\n            eval(fetch(\\\"hiker://assets/home.js\\\"));\\n            HikerHome.load(\\\"import\\\", password);\\n        }, backCode);\\n        break;\\n}\\nlet my_col_type = \\\"text_2\\\";\\nif (importUrl) {\\n    data.push({\\n        title: \\\"导入规则\\\",\\n        url: importUrl,\\n        col_type: my_col_type\\n    });\\n    if(dataItem.is_json_list&&/home_rule_url|html/.test(dataItem.data_type)){\\n        data.push({\\n            title: '““””<span style=\\\"color: #ff7000\\\">导入道德经</span>',\\n            url: $().lazyRule((dataItem,subUrl)=>{\\n                // let title = \\\"H-\\\"+dataItem.name+\\\".\\\"+dataItem.author;\\n                let title = \\\"J-\\\"+dataItem.name.split('.')[0];\\n                let subObj = {\\n                    title: title,\\n                    url: subUrl,\\n                    desc: \\\"hiker://files/rules/dzHouse/ruleCache/\\\"+title+\\\".json\\\",\\n                    code: \\\"\\\",\\n                    active: false,//禁用并发更新\\n                }\\n                let shareText = base64Encode(JSON.stringify(subObj));\\n                var pastes = getPastes();\\n                var url = sharePaste(shareText,pastes.slice(-1)[0]);\\n                let import_rule= \\\"轻合集订阅：\\\"+title+'\\\\n'+url;\\n                copy(import_rule);\\n                const path = 'hiker://files/rules/dzHouse/ruleCache/sub.json';\\n                $.rc(config.lib.sub);\\n                return 订阅导入(path)\\n            },dataItem,subUrl),\\n            col_type: my_col_type\\n        });\\n    }\\n}\\nif (ruleCode) {\\n    data.push({\\n        title: \\\"分享规则\\\",\\n        url: \\\"copy://\\\" + ruleCode,\\n        col_type: my_col_type\\n    });\\n}\\n\\nfunction setSettingItem(basic, pattern) {\\n    let temp = {\\n        title: basic.title,\\n        col_type: basic.col_type,\\n        url: $(basic.confirm).confirm((url, msg, pattern) => {\\n            let backA = request(url);\\n            let ret = JSON.parse(backA);\\n            if (ret.status == 0) {\\n                pattern ? back() : refreshPage(false);\\n                return \\\"toast://\\\" + msg[0];\\n            } else {\\n                pattern ? back() : refreshPage(false);\\n                return \\\"toast://\\\" + msg[1] + \\\"\\\\n\\\" + ret.detail;\\n            }\\n        }, basic.url, basic.msg, pattern)\\n    };\\n    return temp;\\n}\\nif (dataItem.state == 'private') {\\n    data.push({\\n        title: \\\"设为公开\\\",\\n        url: $(getApi(\\\"share\\\") + reqByGet + \\\"&flag\\\" + \\\"#noLoading#\\\").lazyRule(() => {\\n            request(input);\\n            refreshPage(false);\\n            return \\\"toast://已设为公开\\\";\\n        }),\\n        col_type: my_col_type\\n    }, {\\n        title: \\\"随机密钥\\\",\\n        col_type: my_col_type,\\n        url: $(getApi(\\\"genAuth\\\") + reqByGet + \\\"#noLoading#\\\").lazyRule(() => {\\n            let back = request(input);\\n            let ret = JSON.parse(back);\\n            if (ret.status == 0) {\\n                refreshPage(false);\\n                return \\\"toast://已生成随机密码\\\\n\\\" + ret.result\\n            } else {\\n                refreshPage(true);\\n                return \\\"toast://随机密码生成失败\\\"\\n            }\\n        })\\n    });\\n    let timeOver = {\\n        col_type: my_col_type\\n    };\\n    if (dataItem.time_over) {\\n        timeOver.title = small(color(\\\"短时密钥\\\", \\\"green\\\") + color(\\\"(→永久)\\\", \\\"red\\\"));\\n        timeOver.url = getApi(\\\"timeover\\\") + reqByGet + \\\"&flag=1\\\";\\n        timeOver.confirm = \\\"是否确认以后的私藏规则分享不过期?\\\";\\n        timeOver.msg = [\\\"已设为永久\\\", \\\"设为永久失败\\\"];\\n    } else {\\n        timeOver.title = small(color(\\\"永久密钥\\\", \\\"red\\\") + color(\\\"(→短时)\\\", \\\"green\\\"));\\n        timeOver.url = getApi(\\\"timeover\\\") + reqByGet;\\n        timeOver.confirm = \\\"确认要以后分享的私藏规则自动到期?\\\";\\n        timeOver.msg = [\\\"已设为过期\\\", \\\"设为过期失败\\\"];\\n    }\\n    data.push(setSettingItem(timeOver));\\n} else if (dataItem.state == 'public') {\\n    data.push({\\n        title: \\\"设为私有\\\",\\n        url: $(getApi(\\\"share\\\") + reqByGet + \\\"&flag=1#noLoading#\\\").lazyRule(() => {\\n            request(input);\\n            refreshPage(false);\\n            return \\\"toast://已设为私有\\\";\\n        }),\\n        col_type: my_col_type\\n    });\\n}\\ndata.push(setSettingItem({\\n    title: \\\"删除数据\\\",\\n    confirm: \\\"是否确认删除\\\",\\n    msg: [\\\"已删除\\\", \\\"删除失败\\\"],\\n    url: getApi(\\\"deleteUrl\\\") + reqByGet,\\n    col_type: my_col_type\\n}, true));\\ndata.push({\\n    title: \\\"设置图标\\\",\\n    url: $(dataItem.pic_url, \\\"输入图标地址\\\").input(api => {\\n        if (input === \\\"\\\") {\\n            return \\\"toast://你在逗我链接哪?\\\"\\n        }\\n        let result = request(api + \\\"&rule_pic=\\\" + input);\\n        result = JSON.parse(result);\\n        if (result.status !== 0) {\\n            return \\\"toast://\\\" + result.detail;\\n        }\\n        return \\\"toast://修改成功\\\";\\n    }, getApi(\\\"set_rule_pic\\\") + dataItem.id + reqByGet),\\n    col_type: my_col_type\\n});\\n\\ndata.push({\\n    title: dataItem.can_discuss ? \\\"禁止评论\\\" : \\\"开启评论\\\",\\n    url: $(api.dis_set + dataItem.id + reqByGet + \\\"&state=\\\" + (dataItem.can_discuss ? \\\"\\\" : 1)).lazyRule((can_discuss) => {\\n        request(input);\\n        refreshPage(false);\\n        return can_discuss ? \\\"toast://已禁止评论\\\" : \\\"toast://已开启评论\\\";\\n    }, dataItem.can_discuss),\\n    col_type: my_col_type\\n});\\nMY_PARAMS.name = dataItem.name;\\nMY_PARAMS.username=username;\\nMY_PARAMS.password=password;\\ndata.push({\\n    title: \\\"设置备注\\\",\\n    url: \\\"hiker://page/set_rule_notes\\\",\\n    extra: MY_PARAMS,\\n    col_type: my_col_type\\n});\\nif (dataItem.is_json && dataItem.data_type === \\\"home_rule_url\\\" && !dataItem.is_json_list) {\\n    data.push({\\n        title: '进入频道',\\n        url: $( /*\\\"#noLoading#\\\"*/ ).lazyRule((name,home) => {\\n            let ruleList = JSON.parse(request(home));\\n            let hasRule = ruleList.some(item => item.title === name);\\n            if (hasRule) {\\n                putVar(\\\"Warehouse.back\\\", \\\"1\\\");\\n                back();\\n                return home+\\\"s@\\\" + name;\\n            } else {\\n                return \\\"toast://未安装\\\";\\n            }\\n        }, dataItem.name,api.home),\\n        col_type: my_col_type\\n    });\\n}\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: dataItem.good_num,\\n    pic_url: \\\"hiker://files/icon/赞.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://empty\\\"\\n});\\ndata.push({\\n    title: dataItem.bad_num,\\n    pic_url: \\\"hiker://files/icon/踩.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://empty\\\"\\n});\\ndata.push({\\n    title: \\\"评论\\\",\\n    pic_url: \\\"hiker://files/icon/评论.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://page/Reply#noHistory##noRecordHistory#\\\",\\n    extra: {\\n        ruleId: dataItem.id,\\n        name: dataItem.author,\\n        password: password,\\n        username: username\\n    }\\n});\\nlet totalSum = dataItem.good_num + dataItem.bad_num;\\n\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"评论(\\\" + totalSum + \\\")\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(htmlTag(\\\"u\\\", \\\"查看全部评论(控评) >\\\")),\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://page/Comment\\\",\\n    extra: {\\n        url: \\\"hiker://empty#fypage#noHistory##noRecordHistory#\\\",\\n        id: dataItem.id,\\n        totalSum: totalSum,\\n        no_active: true,\\n        username: username,\\n        password: password\\n    }\\n});\\n//const longestSum=120;\\nlet icon = {\\n    \\\"good\\\": \\\"👍\\\",\\n    \\\"bad\\\": \\\"👎\\\",\\n    \\\"reply\\\": \\\"开发者🗣\\\"\\n}\\nif (totalSum === 0) {\\n    data.push({\\n        title: \\\"<h5 style='text-align:center'>一条评论也没有，快来抢沙发吧！</h5>\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n} else {\\n    let commentList = JSON.parse(request(api.dis_get + dataItem.id + \\\"?limit=5\\\")).result;\\n    for (let item of commentList) {\\n        let Reply = item.discuss_type===\\\"reply\\\"&&item.reply_to_name!==false&&item.reply_to_id!==false?\\\"‘‘回复@\\\"+item.reply_to_name+\\\" #\\\"+item.discuss_id+\\\"’’\\\\n\\\":\\\"\\\";\\n        data.push({\\n            title: item.name + \\\"&nbsp;&nbsp;<font color='gray'><small>#\\\" + item.id + \\\"</small><font>\\\",\\n            col_type: \\\"avatar\\\",\\n            url: \\\"hiker://page/Reply\\\",\\n            extra:{\\n                ruleId: dataItem.id,\\n                name: item.name,\\n                password: password,\\n                username: username,\\n                replyId:item.id\\n            },\\n            pic_url: item.avatar_url\\n        });\\n        data.push({\\n            title: item.discuss_text,\\n            desc: Reply+item.create_date + \\\"·\\\" + icon[item.discuss_type],\\n            col_type: \\\"text_1\\\",\\n            url: \\\"hiker://page/info\\\",\\n            extra: {\\n                name: item.name,\\n                type: \\\"long_text\\\",\\n                text: item.discuss_text\\n            },\\n            pic_url: item.avatar_url\\n        });\\n    }\\n}\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nsetResult(data);\"},{\"col_type\":\"icon_2_round\",\"name\":\"规则列表\",\"path\":\"rules\",\"rule\":\"js:\\n    addListener('onClose',$.toString(()=>{\\n        clearVar(\\\"Warehouse.back\\\");\\n        clearVar(\\\"Warehouse.filter\\\");\\n        clearVar(\\\"Warehouse.type\\\");\\n        if(getVar('Warehouse.can_upload','')){\\n            log('操作过禁止上传:'+getVar('Warehouse.can_upload'));\\n            clearVar(\\\"Warehouse.can_upload\\\");\\n            refreshPage(true);\\n        }\\n    }));\\n\\nif (getVar(\\\"Warehouse.back\\\") === \\\"1\\\") {\\n    back(false);\\n}\\n\\nconst {\\n    getApi,\\n    api,\\n    color,\\n    small,\\n    localRuleVer,\\n    htmlTag,\\n    md\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nconst { mergeSort } = $.require(\\\"hiker://page/sort\\\");\\nlet {\\n    avatarUrl,\\n    qq,\\n    id,\\n    can_upload\\n} = MY_PARAMS;\\nlet dataType = getVar(\\\"Warehouse.type\\\",\\\"\\\");\\nlet backCode = JSON.parse(request(getApi(\\\"rulesUrl\\\") + \\\"?name=\\\" + qq+\\\"&data_type=\\\"+dataType));\\nlet devName = backCode.dev_name;\\nputVar(\\\"Warehouse.filter\\\", devName);\\nlet ruleList = backCode.result;\\nlet subUrl = getApi(\\\"jsonList\\\") + \\\"?name=\\\" + qq;\\nlet hasSub = hasHomeSub(subUrl);\\nlet devInfo = \\\"这个人很懒,什么都没写哦~\\\";\\nlet tmpJson = JSON.parse(request(getApi(\\\"infoGetUrl\\\") + qq));\\nif (tmpJson.status == 0) {\\n    devInfo = tmpJson.result || devInfo;\\n}\\nlet subFlag = hasSub ? '🆗' : '📡';\\nlet data = [];\\nrequire(md);\\ndevInfo=marked.parse(devInfo);\\ndata.push({\\n    title: \\\"““””\\\" + devName + \\\"\\\\n\\\\n\\\" + small(htmlTag(\\\"u\\\", \\\"点击查看完整公告\\\")),\\n    desc: small(devInfo),\\n    url: 'hiker://page/info',\\n    extra: {\\n        text: devInfo,\\n        name: devName,\\n        type:\\\"rich_text\\\"\\n    },\\n    pic_url: avatarUrl,\\n    col_type: 'movie_1_vertical_pic'\\n});\\ndata.push({\\n    title: \\\"<big>订阅管理</big>&nbsp;&nbsp;<small>(当前\\\" + (hasSub ? \\\"已订阅\\\" : \\\"未订阅\\\") + \\\")</small>\\\",\\n    col_type: \\\"rich_text\\\"\\n});\\n\\nlet sub_code = '海阔视界合集规则订阅￥home_sub￥' + devName + \\\"合集@@\\\" + subUrl;\\nlet rulesCode = '海阔视界合集规则￥home_rule_url￥' + subUrl;\\ndata.push({\\n    title: '““””<span style=\\\"color: #ff7000\\\">一键订阅</span>',\\n    desc: '订阅““””<span style=\\\"color: #5cff2c\\\">' + devName + '</span>的所有单规则，合集需单独订阅',\\n    url: sub_code,\\n    col_type: 'text_2'\\n});\\ndata.push({\\n    title: '““””<span style=\\\"color: #ff7000\\\">导入全部</span>',\\n    url: rulesCode,\\n    col_type: 'text_2'\\n});\\ndata.push({\\n    title: '““””<span style=\\\"color: #ff7000\\\">导入轻合集</span>',\\n    url: $().lazyRule((devName,subUrl,avatarUrl)=>{\\n        const {genRule}=$.require(\\\"hiker://page/genApi\\\");\\n        log(\\\"轻合集图标链接:\\\"+avatarUrl);\\n        let import_rule=genRule(\\\"轻合集.\\\"+devName,subUrl,avatarUrl);\\n        //copy(import_rule);\\n        let ruleCode=parsePaste(import_rule.split(\\\"\\\\n\\\")[0]);\\n        //return \\\"hiker://empty\\\"\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        return importUrl\\n    },devName,subUrl,avatarUrl),\\n    col_type: 'text_2'\\n});\\ndata.push({\\n    title: '““””<span style=\\\"color: #ff7000\\\">导入道德经</span>',\\n    url: $().lazyRule((devName,subUrl,avatarUrl)=>{\\n        let title = \\\"H-\\\"+devName;\\n        let subObj = {\\n            title: title,\\n            url: subUrl,\\n            desc: \\\"hiker://files/rules/dzHouse/ruleCache/\\\"+title+\\\".json\\\",\\n            code: \\\"\\\",\\n            active: false,//禁用并发更新\\n        }\\n        let shareText = base64Encode(JSON.stringify(subObj));\\n        var pastes = getPastes();\\n        var url = sharePaste(shareText,pastes.slice(-1)[0]);\\n        let import_rule= \\\"轻合集订阅：\\\"+title+'\\\\n'+url;\\n        copy(import_rule);\\n        const path = 'hiker://files/rules/dzHouse/ruleCache/sub.json';\\n        $.rc(config.lib.sub);\\n        return 订阅导入(path)\\n    },devName,subUrl,avatarUrl),\\n    col_type: 'text_2'\\n});\\nlet can_upload_api = getApi(\\\"manCanUpload\\\")+id;\\nif(getVar('house.is_manager')){\\n    let tips = can_upload?'能':'否';\\n    // log('tips:'+tips);\\n    // log('can_upload:'+can_upload);\\n    data.push({\\n        title:'⚠能否上传:'+(getVar('Warehouse.can_upload')||tips),\\n        col_type:'scroll_button',\\n        url:'hiker://empty'\\n    });\\n    function setUpload(flag,can_upload_api) {\\n        flag = flag || '';\\n        try {\\n            let code = fetch(can_upload_api, {\\n                headers: {\\\"User-Agent\\\": MOBILE_UA},\\n                body: {\\n                    \\\"params\\\":\\n                        {\\n                            \\\"username\\\": getVar('house.username'),\\n                            \\\"password\\\": getVar('house.password'),\\n                            \\\"can_upload\\\": !!flag\\n                        }\\n                }\\n            });\\n            code = JSON.parse(code).result;\\n            if (code.status === 0) {\\n                return code.detail\\n            } else {\\n                return '操作失败:' + code.detail\\n            }\\n        } catch (e) {\\n            return '操作失败:' + e.message\\n        }\\n    }\\n    data.push({\\n        title:'🚫禁止上传',\\n        col_type:'scroll_button',\\n        url:$('禁止该开发者上传规则?你的操作将被系统记录').confirm((id,can_upload_api,setUpload)=>{\\n            let ret = setUpload(false,can_upload_api);\\n            if(!/操作失败/.test(ret)){\\n                putVar('Warehouse.can_upload','否');\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },id,can_upload_api,setUpload)\\n    });\\n    data.push({\\n        title:'✅允许上传',\\n        col_type:'scroll_button',\\n        url:$('允许该开发者上传规则?你的操作将被系统记录').confirm((id,can_upload_api,setUpload)=>{\\n            let ret = setUpload(true,can_upload_api);\\n            if(!/操作失败/.test(ret)){\\n                putVar('Warehouse.can_upload','是');\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },id,can_upload_api,setUpload)\\n    });\\n}\\ndata.push({\\n    title: \\\"<small>提示：开发者单独分享的合集文件只能单独导入。</small>\\\",\\n    col_type: \\\"rich_text\\\"\\n});\\ndata.push({\\n    title: \\\"<big>规则列表</big>&nbsp;&nbsp;<small>(共\\\" + ruleList.length + \\\"条)</small>\\\",\\n    col_type: \\\"rich_text\\\"\\n});\\nlet dataTypeList = {\\n    \\\"\\\":\\\"全部\\\",\\n    \\\"home_rule_url\\\": '小程序',\\n    //\\\"publish\\\": '提交云仓库规则',\\n    \\\"js_url\\\": '网页插件',\\n    \\\"html\\\": '静态页面',\\n    \\\"config\\\": '主题'\\n};\\nfor(let key in dataTypeList){\\n    data.push({\\n        title:dataType===key?\\\"““\\\"+dataTypeList[key]+\\\"””\\\":dataTypeList[key],\\n        url:$(\\\"#noLoading#\\\").lazyRule((key)=>{\\n            putVar(\\\"Warehouse.type\\\",key);\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\";\\n        },key),\\n        col_type:\\\"scroll_button\\\"\\n    });\\n}\\nif (ruleList.length > 20) {\\n    data.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(name => \\\"hiker://search?s=\\\" + input + \\\"&rule=\\\" + name, MY_RULE.title),\\n        col_type: \\\"input\\\",\\n        desc: \\\"搜索当前开发者的规则\\\"\\n    });\\n}\\nlet homeList = JSON.parse(request(api.home));\\nlet mRuleList = [];\\nfor (var item of ruleList) {\\n    var name = item.name;\\n    if (item.is_tap) {\\n        let location = JSON.parse(request(getApi(\\\"ruleListJson\\\") + \\\"?id=\\\" + item.id));\\n        item.id = location.id;\\n        item.name = location.name;\\n        item.author = location.author;\\n        item.data_type = location.data_type;\\n        item.ver = location.ver\\n    }\\n    item.version = item.ver;\\n    let label = \\\"\\\",\\n        lver = -2;\\n    if (item.is_json && item.data_type === \\\"home_rule_url\\\") {\\n        lver = localRuleVer(homeList, item);\\n        if (lver === -1) {\\n            label = \\\"🆕\\\";\\n        } else if (lver < item.ver) {\\n            label = \\\"🆙\\\";\\n        }\\n    }\\n    mRuleList.push({\\n        title: label + name,\\n        url: \\\"hiker://page/ruleDetail#noHistory##noRecordHistory#\\\",\\n        extra: {\\n            lver: lver,\\n            id: item.id\\n        },\\n        pic_url: item.pic,\\n    });\\n}\\n/* 归并排序 Start */\\nif(getItem(\\\"排序\\\",\\\"时间\\\")==='归并'){\\n    mRuleList = mergeSort(mRuleList);\\n}\\n/* 归并排序 End */\\ndata.push.apply(data, mRuleList)\\nsetResult(data);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"规则详细-user\",\"path\":\"ruleDetail\",\"rule\":\"js:\\n    const {\\n        getApi,\\n        color,\\n        small,\\n        htmlTag,\\n        api,\\n        md\\n    } = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    id,\\n    lver,\\n    isAll\\n} = MY_PARAMS;\\nif(getParam(\\\"id\\\")){\\n    isAll=true;\\n    id=getParam(\\\"id\\\");\\n    lver=lver||'未获取版本号';\\n}\\naddListener('onClose', $.toString((isAll) => {\\n    if(!isAll){\\n        refreshPage(false);\\n    }\\n},isAll));\\nlet dataItem = JSON.parse(request(getApi(\\\"getbyid\\\") + \\\"?id=\\\" + id)).result;\\nsetPageTitle(\\\"「\\\" + dataItem.name + \\\"」\\\")\\nlet ruleListJson = getApi(\\\"ruleListJson\\\") + \\\"?id=\\\";\\nlet data = [];\\nvar hasSub = false;\\n\\nif (dataItem.is_json_list) {\\n    hasSub = hasHomeSub(ruleListJson + dataItem.id);\\n} else if (!dataItem.is_json_list && dataItem.data_type == 'home_rule_url') {\\n    hasSub = hasHomeSub(ruleListJson + dataItem.id + '&debug=true');\\n}\\n\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"版本\\\"),\\n    desc: \\\"““””开发者：\\\" + color(dataItem.author, \\\"#228BE6\\\") + \\\"\\\\n云端版本：\\\" + color(dataItem.ver, \\\"#5cff2c\\\") + \\\"\\\\t\\\\t本地版本：\\\" + color(lver, \\\"#5cff2c\\\") + \\\"\\\\n更新于: [\\\" + color(dataItem.last_update, \\\"#ff7000\\\") + \\\"]\\\",\\n    url: $(\\\"<开发者>\\\\n\\\" + dataItem.author + \\\"\\\\n<名称>\\\\n\\\" + dataItem.name + \\\"\\\\n<云端版本>\\\\n\\\" + dataItem.ver + \\\"\\\\n<本地版本>\\\\n\\\" + lver + \\\"\\\\n<更新时间>\\\\n[\\\" + dataItem.last_update + \\\"]\\\").confirm(() => {}),\\n    col_type: 'text_1'\\n});\\nlet dataType = {\\n    home_rule_url: '首页云规则',\\n    publish: '提交云仓库规则',\\n    js_url: '网页插件规则',\\n    html: '静态页面',\\n    config: '主页配置'\\n};\\n\\nlet basic = {\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://empty\\\"\\n};\\nlet dataTypeTips = dataType[dataItem.data_type] || '未知规则：' + dataItem.data_type;\\n\\nlet safe_tip=dataItem.is_safe?\\\"安全\\\":\\\"危险\\\";\\nlet good_tip = dataItem.is_good?small(color(\\\"【优质规则】\\\",'#ff7000')):\\\"\\\";\\nlet not_safe_note=dataItem.not_safe_note;\\nbasic.title = htmlTag(\\\"big\\\", \\\"类型\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(\\\"(id:\\\" + dataItem.id + \\\")\\\")+\\\"\\\\t\\\\t\\\\t\\\" + small(\\\"(风险检测:\\\" +safe_tip+\\\")\\\")+good_tip;\\nbasic.desc = \\\"数据类型：\\\" + color(dataTypeTips, \\\"#cb54ff\\\") + \\\"\\\\n分享状态为：\\\" + dataItem.state;\\nif ([\\\"html\\\", \\\"config\\\", \\\"js_url\\\"].includes(dataItem.data_type)) {\\n    basic.desc += \\\"\\\\n““”” =>\\\" + small(\\\"点此预览\\\");\\n    basic.url = ruleListJson + dataItem.id;\\n}\\n\\ndata.push(basic);\\nlet hasSubs = \\\"\\\";\\nif (hasSub) {\\n    hasSubs = \\\"\\\\t\\\\t\\\\t\\\" + small(\\\"已订阅\\\")\\n}\\n\\nlet notes = request(getApi(\\\"get_rule_note\\\") + id);\\nnotes = JSON.parse(notes).result;\\nrequire(md);\\nlet notesHtml=\\\"\\\"\\ntry{\\n    notesHtml=marked.parse(notes);\\n}catch(e){}\\n\\nif (notes !== false) {\\n    data.push({\\n        title: htmlTag(\\\"big\\\", \\\"备注\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(htmlTag(\\\"u\\\", \\\"查看完整公告 >\\\")),\\n        desc: notes,\\n        col_type: \\\"text_1\\\",\\n        url: \\\"hiker://page/info\\\",\\n        extra: {\\n            text: notesHtml,\\n            name: dataItem.name,\\n            // type: \\\"long_text\\\"\\n            type: \\\"rich_text\\\"\\n        }\\n    });\\n}\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"操作\\\") + hasSubs,\\n    col_type: \\\"text_1\\\",\\n    url: \\\"toast://你才是最帅的那个人！\\\"\\n});\\nlet importUrl, ruleCode, shareUrl, backCode = \\\"\\\";\\nif (!dataItem.is_json) {\\n    backCode = request(ruleListJson + dataItem.id);\\n}\\nswitch (dataItem.data_type) {\\n    case \\\"home_rule_url\\\":\\n        ruleCode = \\\"海阔视界首页频道规则【\\\" + dataItem.name + \\\"】￥home_rule_url￥\\\" + ruleListJson + dataItem.id;\\n        importUrl = \\\"rule://\\\" + base64Encode(ruleCode)\\n        break;\\n    case 'publish':\\n        ruleCode = '海阔视界规则分享，当前分享的是：' + dataItem.name + '￥publish￥' + base64Encode(backCode);\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break;\\n    case 'js_url':\\n        ruleCode = '海阔视界规则分享，当前分享的是：网页插件￥js_url￥' + dataItem.name + '@base64://' + base64Encode(backCode);\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break;\\n    case 'html':\\n        let file_tmp = dataItem.name.split('.');\\n        let file_path = file_tmp.length > 1 ? file_tmp[file_tmp.length - 1] + \\\"/\\\" + dataItem.name : dataItem.name;\\n        ruleCode = \\\"海阔视界本地文件分享￥file_url￥hiker://files/rules/dzHouse/\\\" + file_path + \\\"@\\\" + ruleListJson + dataItem.id;\\n        importUrl = 'rule://' + base64Encode(ruleCode);\\n        break\\n    case \\\"config\\\":\\n        importUrl = $().rule(password => {\\n            eval(fetch(\\\"hiker://assets/home.js\\\"));\\n            HikerHome.load(\\\"import\\\", password);\\n        }, backCode);\\n        break;\\n}\\nlet my_col_type = \\\"text_2\\\";\\nlet my_col_type2 = \\\"text_3\\\";\\nif (importUrl) {\\n    data.push({\\n        title: \\\"导入规则\\\",\\n        url: dataItem.is_safe?importUrl:'toast://风险规则禁止导入!!!',\\n        col_type: my_col_type\\n    });\\n}\\nif (ruleCode) {\\n    data.push({\\n        title: \\\"分享口令\\\",\\n        url: \\\"copy://\\\" + ruleCode,\\n        col_type: my_col_type\\n    });\\n}\\n\\nif (importUrl) {\\n    if (dataItem.is_json_list && !hasSub) {\\n        let sub_rule_code = '海阔视界合集规则订阅￥home_sub￥' + dataItem.name + \\\"@@\\\" + ruleListJson + dataItem.id;\\n        let sub_url = 'rule://' + base64Encode(sub_rule_code);\\n        data.push({\\n            title: '订阅合集',\\n            url: sub_url,\\n            col_type: my_col_type2\\n        });\\n        data.push({\\n            title: '““””<span style=\\\"color: #ff7000\\\">导入轻合集</span>',\\n            url: $().lazyRule((dataItem,subUrl)=>{\\n                const {genRule}=$.require(\\\"hiker://page/genApi\\\");\\n                let import_rule=genRule(dataItem.name+\\\".\\\"+dataItem.author,subUrl);\\n                //copy(import_rule);\\n                let ruleCode=parsePaste(import_rule.split(\\\"\\\\n\\\")[0]);\\n                //return \\\"hiker://empty\\\"\\n                importUrl = 'rule://' + base64Encode(ruleCode);\\n                return importUrl\\n            },dataItem,ruleListJson + dataItem.id),\\n            col_type: my_col_type2\\n        });\\n        data.push({\\n            title: '““””<span style=\\\"color: #ff7000\\\">导入道德经</span>',\\n            url: $().lazyRule((dataItem,subUrl)=>{\\n                // let title = \\\"H-\\\"+dataItem.name+\\\".\\\"+dataItem.author;\\n                let title = \\\"J-\\\"+dataItem.name.split('.')[0];\\n                let subObj = {\\n                    title: title,\\n                    url: subUrl,\\n                    desc: \\\"hiker://files/rules/dzHouse/ruleCache/\\\"+title+\\\".json\\\",\\n                    code: \\\"\\\",\\n                    active: false,//禁用并发更新\\n                }\\n                let shareText = base64Encode(JSON.stringify(subObj));\\n                var pastes = getPastes();\\n                var url = sharePaste(shareText,pastes.slice(-1)[0]);\\n                let import_rule= \\\"轻合集订阅：\\\"+title+'\\\\n'+url;\\n                copy(import_rule);\\n                const path = 'hiker://files/rules/dzHouse/ruleCache/sub.json';\\n                $.rc(config.lib.sub);\\n                return 订阅导入(path)\\n            },dataItem,ruleListJson + dataItem.id),\\n            col_type: my_col_type2\\n        });\\n        data.push({\\n            title: \\\"<small>提示：开发者单独分享的合集文件只能单独导入。</small>\\\",\\n            col_type: \\\"rich_text\\\"\\n        });\\n    } else if (!dataItem.is_json_list && !hasSub && dataItem.data_type == 'home_rule_url') {\\n        let sub_rule_code = '海阔视界单规则订阅￥home_sub￥' + dataItem.name + \\\"@@\\\" + ruleListJson + dataItem.id + '&debug=true';\\n        let sub_url = 'rule://' + base64Encode(sub_rule_code);\\n        data.push({\\n            title: '订阅规则',\\n            url: sub_url,\\n            col_type: my_col_type\\n        })\\n    }\\n}\\nif (dataItem.is_json && dataItem.data_type === \\\"home_rule_url\\\" && !dataItem.is_json_list) {\\n    data.push({\\n        title: '进入频道',\\n        url: $( /*\\\"#noLoading#\\\"*/ ).lazyRule((name,home) => {\\n            let ruleList = JSON.parse(request(home));\\n            let hasRule = ruleList.some(item => item.title === name);\\n            if (hasRule) {\\n                putVar(\\\"Warehouse.back\\\", \\\"1\\\");\\n                back();\\n                return home+\\\"s@\\\" + name;\\n            } else {\\n                return \\\"toast://未安装\\\";\\n            }\\n        }, dataItem.name,api.home),\\n        col_type: my_col_type\\n    })\\n}\\nlet man_rule_safe = getApi(\\\"manRuleSafe\\\")+dataItem.id;\\nlet man_rule_good = getApi(\\\"manRuleGood\\\")+dataItem.id;\\n// dataItem.is_safe;\\nif(getVar('house.is_manager')){\\n    function setIsSafe(flag,man_rule_safe) {\\n        flag = flag || '';\\n        try {\\n            let code = fetch(man_rule_safe, {\\n                headers: {\\\"User-Agent\\\": MOBILE_UA},\\n                body: {\\n                    \\\"params\\\":\\n                        {\\n                            \\\"username\\\": getVar('house.username'),\\n                            \\\"password\\\": getVar('house.password'),\\n                            \\\"is_safe\\\": !!flag\\n                        }\\n                }\\n            });\\n            code = JSON.parse(code).result;\\n            if (code.status === 0) {\\n                return code.detail\\n            } else {\\n                return '操作失败:' + code.detail\\n            }\\n        } catch (e) {\\n            return '操作失败:' + e.message\\n        }\\n    }\\n    function setIsGood(flag,man_rule_good) {\\n        flag = flag || '';\\n        try {\\n            let code = fetch(man_rule_good, {\\n                headers: {\\\"User-Agent\\\": MOBILE_UA},\\n                body: {\\n                    \\\"params\\\":\\n                        {\\n                            \\\"username\\\": getVar('house.username'),\\n                            \\\"password\\\": getVar('house.password'),\\n                            \\\"is_good\\\": !!flag\\n                        }\\n                }\\n            });\\n            code = JSON.parse(code).result;\\n            if (code.status === 0) {\\n                return code.detail\\n            } else {\\n                return '操作失败:' + code.detail\\n            }\\n        } catch (e) {\\n            return '操作失败:' + e.message\\n        }\\n    }\\n    data.push({\\n        title:'🚫风险',\\n        col_type:'scroll_button',\\n        url:$('标记该规则为风险?风险规则无法被导入').confirm((id,man_rule_safe,setIsSafe)=>{\\n            let ret = setIsSafe(false,man_rule_safe);\\n            if(!/操作失败/.test(ret)){\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },dataItem.id,man_rule_safe,setIsSafe)\\n    });\\n    data.push({\\n        title:'✅正常',\\n        col_type:'scroll_button',\\n        url:$('标记该规则为正常?').confirm((id,man_rule_safe,setIsSafe)=>{\\n            let ret = setIsSafe(true,man_rule_safe);\\n            if(!/操作失败/.test(ret)){\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },dataItem.id,man_rule_safe,setIsSafe)\\n    });\\n    data.push({\\n        title:'♥非优质',\\n        col_type:'scroll_button',\\n        url:$('标记该规则为非优质?').confirm((id,man_rule_good,setIsGood)=>{\\n            let ret = setIsGood(false,man_rule_good);\\n            if(!/操作失败/.test(ret)){\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },dataItem.id,man_rule_good,setIsGood)\\n    });\\n    data.push({\\n        title:'💖优质',\\n        col_type:'scroll_button',\\n        url:$('标记该规则为优质?').confirm((id,man_rule_good,setIsGood)=>{\\n            let ret = setIsGood(true,man_rule_good);\\n            if(!/操作失败/.test(ret)){\\n                refreshPage(false);\\n            }\\n            return 'toast://'+ret\\n        },dataItem.id,man_rule_good,setIsGood)\\n    });\\n}\\n\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: dataItem.good_num,\\n    pic_url: \\\"hiker://files/icon/赞.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://page/MakeAcomment#noHistory##noRecordHistory#\\\",\\n    extra: {\\n        id: dataItem.id,\\n        name: dataItem.name\\n    }\\n});\\ndata.push({\\n    title: dataItem.bad_num,\\n    pic_url: \\\"hiker://files/icon/踩.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://page/MakeAcomment#noHistory##noRecordHistory#\\\",\\n    extra: {\\n        id: dataItem.id,\\n        name: dataItem.name,\\n        defaultType:\\\"bad\\\"\\n    }\\n});\\ndata.push({\\n    title: \\\"评论\\\",\\n    pic_url: \\\"hiker://files/icon/评论.svg\\\",\\n    col_type: \\\"icon_small_3\\\",\\n    url: \\\"hiker://page/MakeAcomment#noHistory##noRecordHistory#\\\",\\n    extra: {\\n        id: dataItem.id,\\n        name: dataItem.name\\n    }\\n});\\nlet totalSum = dataItem.good_num + dataItem.bad_num;\\n\\ndata.push({\\n    title: htmlTag(\\\"big\\\", \\\"评论(\\\" + totalSum + \\\")\\\") + \\\"\\\\t\\\\t\\\\t\\\" + small(htmlTag(\\\"u\\\", \\\"查看全部评论 >\\\")),\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://page/Comment\\\",\\n    extra: {\\n        url: \\\"hiker://empty#fypage#noHistory##noRecordHistory#\\\",\\n        id: dataItem.id,\\n        totalSum: totalSum,\\n        no_active: false\\n    }\\n});\\n//const longestSum=120;\\nlet icon = {\\n    \\\"good\\\": \\\"👍\\\",\\n    \\\"bad\\\": \\\"👎\\\",\\n    \\\"reply\\\":\\\"开发者🗣\\\"\\n}\\nif (totalSum === 0) {\\n    data.push({\\n        title: \\\"<h5 style='text-align:center'>一条评论也没有，快来抢沙发吧！</h5>\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n} else {\\n    let commentList = JSON.parse(request(api.dis_get + dataItem.id + \\\"?limit=5\\\")).result;\\n    for (let item of commentList) {\\n        let Reply = item.discuss_type===\\\"reply\\\"&&item.reply_to_name!==false&&item.reply_to_id!==false?\\\"‘‘回复@\\\"+item.reply_to_name+\\\" #\\\"+item.discuss_id+\\\"’’\\\\n\\\":\\\"\\\";\\n        data.push({\\n            title: item.name + \\\"&nbsp;&nbsp;<font color='gray'><small>#\\\" + item.id + \\\"</small><font>\\\",\\n            col_type: \\\"avatar\\\",\\n            //url: \\\"toast://\\\" + item.qq,\\n            url:\\\"mqqwpa://im/chat?chat_type=wpa&uin=\\\"+item.qq,\\n            pic_url: item.avatar_url\\n        });\\n        data.push({\\n            title: item.discuss_text,\\n            desc: Reply+item.create_date + \\\"·\\\" + icon[item.discuss_type],\\n            col_type: \\\"text_1\\\",\\n            url: \\\"hiker://page/info\\\",\\n            extra:{\\n                name:item.name,\\n                type:\\\"long_text\\\",\\n                text:item.discuss_text\\n            },\\n            pic_url: item.avatar_url\\n        });\\n    }\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n}\\n\\nsetResult(data);\"},{\"col_type\":\"rich_text\",\"name\":\"查看\",\"path\":\"info\",\"rule\":\"js:\\nsetPageTitle(\\\"查看「\\\"+MY_PARAMS.name+\\\"」\\\")\\nsetResult([{\\n    title: MY_PARAMS.text,\\n    col_type:MY_PARAMS.type\\n}]);\"},{\"col_type\":\"movie_3\",\"name\":\"开发者注册\",\"path\":\"Register\",\"rule\":\"js:\\nsetPageTitle(\\\"开发者注册\\\");\\nconst {\\n    getApi,\\n    htmlTag,\\n    mapColType,\\n    small\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nvar data = [];\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.Password\\\");\\n    clearVar(\\\"Warehouse.Username\\\");\\n    clearVar(\\\"Warehouse.Description\\\");\\n    clearVar(\\\"Warehouse.UserAddress\\\");\\n}));\\naddListener('onRefresh', $.toString(()=>{\\n    putVar(\\\"Warehouse.Wait\\\", \\\"\\\");\\n}));\\ndata.push({\\n    title: '账号',\\n    desc: \\\"请输入账号(必填)\\\",\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('Warehouse.Username', ''),\\n        type: \\\"number\\\",\\n        onChange: 'putVar(\\\"Warehouse.Username\\\",input)'\\n    }\\n}, {\\n    title: '密码',\\n    desc: \\\"请输入密码(必填)\\\",\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('Warehouse.Password', ''),\\n        type: \\\"password\\\",\\n        onChange: 'putVar(\\\"Warehouse.Password\\\",input)'\\n    }\\n});\\nmapColType(data, \\\"line_blank\\\", 1);\\ndata.push({\\n    title: '昵称',\\n    desc: \\\"请输入昵称(必填)\\\",\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('Warehouse.UserAddress', ''),\\n        onChange: 'putVar(\\\"Warehouse.UserAddress\\\",input)'\\n    }\\n}, {\\n    title: '描述',\\n    desc: \\\"说说为什么要注册吧\\\\n(可以增加通过概率,选填)\\\",\\n    col_type: 'input',\\n    extra: {\\n        defaultValue: getVar('Warehouse.Description', ''),\\n        type: \\\"textarea\\\",\\n        onChange: 'putVar(\\\"Warehouse.Description\\\",input)'\\n    }\\n})\\n\\nmapColType(data, \\\"line_blank\\\", 1);\\n\\ndata.push({\\n    title: htmlTag(\\\"b\\\", \\\"注册\\\"),\\n    url: $(getApi(\\\"new_dev\\\")+\\\"#noLoading#\\\").lazyRule((getId, confirm) => {\\n        let username = getVar('Warehouse.Username', \\\"\\\"),\\n            password = getVar('Warehouse.Password', \\\"\\\"),\\n            description = getVar('Warehouse.Description', \\\"\\\"),\\n            name = getVar(\\\"Warehouse.UserAddress\\\", \\\"\\\");\\n        if ([username, password, name].includes(\\\"\\\")) {\\n            return \\\"toast://账号,密码和昵称不能为空\\\";\\n        }\\n        showLoading(\\\"正在提交申请表\\\");\\n        let result = request(input, {\\n            headers: {\\n                'content-type': 'application/json'\\n            },\\n            body: JSON.stringify({\\n                \\\"params\\\": {\\n                    \\\"reason\\\": description,\\n                    \\\"name\\\": name,\\n                    \\\"password\\\": password,\\n                    \\\"qq\\\": username\\n                }\\n            }),\\n            method: 'post'\\n        });\\n        result = JSON.parse(result).result;\\n        hideLoading();\\n        if (result.status !== 0) {\\n            return \\\"toast://\\\" + result.detail;\\n        }\\n        let idresult = JSON.parse(request(getId + \\\"?qq=\\\" + username));\\n        if (idresult.status !== 0) {\\n            return \\\"toast://\\\" + idresult.detail;\\n        }\\n        \\n        return $(\\\"\\\", \\\"输入邮箱验证码\\\\n\\\" + result.detail).input((confirm, id, account) => {\\n            showLoading(\\\"请耐心等待\\\");\\n            try {\\n                let result = request(confirm, {\\n                    headers: {\\n                        'content-type': 'application/json'\\n                    },\\n                    body: JSON.stringify({\\n                        \\\"params\\\": {\\n                            \\\"regist_id\\\": id,\\n                            \\\"yzm\\\": input\\n                        }\\n                    }),\\n                    method: 'POST'\\n                });\\n                result = JSON.parse(result).result;\\n                if (result.status !== 0) {\\n                    hideLoading();\\n                    return \\\"toast://\\\" + result.detail;\\n                } else {\\n                    putVar(\\\"WarehouseUsername\\\", account[0]);\\n                    putVar(\\\"WarehousePassword\\\", account[1]);\\n                    hideLoading();\\n                    back();\\n                    return \\\"toast://成功提交注册注册\\\\n\\\"+result.detail;\\n                }\\n            } catch (e) {\\n                hideLoading();\\n                return \\\"toast://出错了呐\\\";\\n            }\\n        }, confirm, idresult.result, [username, password]);\\n    }, getApi(\\\"new_getId\\\"), getApi(\\\"new_confirm\\\")),\\n    col_type: 'text_center_1'\\n});\\nsetResult(data);\"},{\"col_type\":\"text_1\",\"name\":\"个人资料\",\"path\":\"PersonalData\",\"rule\":\"js:\\nsetPageTitle(\\\"个人资料\\\");\\nvar data=[];\\nconst {\\n    getApi,\\n    getFile,\\n    api\\n} = $.require(\\\"hiker://page/utiliy\\\");\\n\\ndata.push({\\n    col_type:\\\"line_blank\\\"\\n});\\n\\nlet {username,password} = getFile();\\nlet dev = JSON.parse(request(getApi(\\\"user\\\")+MY_PARAMS.id)).result;\\ndata.push({\\n    title:\\\"头像\\\",\\n    desc:dev.avatar,\\n    url:\\\"hiker://page/modify_PersonalData#noHistory##noRecordHistory#\\\",\\n    extra:{\\n        dev:dev,\\n        username:username,\\n        password:password,\\n        Pattern:0\\n    },\\n    col_type:\\\"text_1\\\"\\n});\\n\\n\\ndata.push({\\n    title:\\\"昵称\\\",\\n    desc:dev.name,\\n    url:\\\"hiker://page/modify_PersonalData#noHistory##noRecordHistory#\\\",\\n    extra:{\\n        dev:dev,\\n        username:username,\\n        password:password,\\n        Pattern:1\\n    },\\n    col_type:\\\"text_1\\\"\\n});\\n\\ndata.push({\\n    title:\\\"密码\\\",\\n    url:\\\"hiker://page/modify_PersonalData#noHistory##noRecordHistory#\\\",\\n    extra:{\\n        dev:dev,\\n        username:username,\\n        password:password,\\n        Pattern:2\\n    },\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    col_type:\\\"line_blank\\\"\\n});\\ndata.push({\\n    title:\\\"账号：\\\"+username,\\n    url:\\\"copy://\\\"+username,\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    title:\\\"UID：\\\"+dev.id,\\n    url:\\\"copy://\\\"+dev.id,\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    col_type:\\\"line_blank\\\"\\n});\\ndata.push({\\n    title:\\\"提交云仓库规则\\\",\\n    url:$(\\\"#noLoading#\\\").lazyRule((host)=>{\\n        let code=request(host+\\\"/hikerule/rulelist.json?id=145\\\");\\n        let word=\\\"￥publish￥\\\"+base64Encode(code);\\n        return \\\"rule://\\\"+base64Encode(word);\\n    },api.host),\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    title:\\\"同步提交云仓库账号密码\\\",\\n    url:\\\"rule://\\\"+base64Encode(\\\"￥publish_account￥\\\"+username+\\\"@\\\"+password),\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    col_type:\\\"line_blank\\\"\\n});\\ndata.push({\\n    title:\\\"你一共发布了「\\\"+dev.rule_num+\\\"」条规则\\\",\\n    url:\\\"hiker://empty\\\",\\n    col_type:\\\"text_1\\\"\\n});\\ndata.push({\\n    col_type:\\\"line_blank\\\"\\n});\\nlet user = getFile();\\ndata.push({\\n    title:\\\"注销登录\\\",\\n    url:$(\\\"确认注销登录?\\\").confirm(f => {\\n        f.username=\\\"\\\";\\n        f.password=\\\"\\\";\\n        writeFile('hiker://files/WarehouseUSER.json', JSON.stringify(f));\\n        putVar(\\\"Warehouse.back\\\",\\\"1\\\");\\n        back();\\n        return \\\"toast://已注销\\\";\\n    },user),\\n    col_type:\\\"text_center_1\\\"\\n});\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"更改个人资料\",\"path\":\"modify_PersonalData\",\"rule\":\"js:\\nconst {\\n    getApi,\\n    color,\\n    small,\\n    getFile,\\n    htmlTag\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    dev,\\n    username,\\n    password,\\n    Pattern\\n} = MY_PARAMS;\\nvar data = [];\\nlet path = \\\"?qq=\\\" + username + \\\"&password=\\\" + password;\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.m.petName\\\");\\n    clearVar(\\\"Warehouse.m.avatar\\\");\\n    clearVar(\\\"Warehouse.m.Password.c\\\");\\n    clearVar(\\\"Warehouse.m.Password.x\\\");\\n    clearVar(\\\"Warehouse.m.Password.y\\\");\\n}));\\nfunction m_petName() {\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        col_type: 'input',\\n        desc: \\\"请输入新昵称\\\",\\n        extra: {\\n            titleVisible: false,\\n            defaultValue: getVar('Warehouse.m.petName', '')||dev.name,\\n            onChange: 'putVar(\\\"Warehouse.m.petName\\\",input)'\\n        }\\n    });\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        title: \\\"保存\\\",\\n        url: $(getApi(\\\"modify_name\\\") + path).lazyRule(() => {\\n            let newPetName = getVar('Warehouse.m.petName', '');\\n            if (newPetName == \\\"\\\") {\\n                return \\\"toast://你还什么都没填啊!\\\";\\n            }\\n            let result = request(input + \\\"&name=\\\" + encodeURIComponent(newPetName));\\n            result = JSON.parse(result);\\n            if (result.status === 0) {\\n                back();\\n                return \\\"toast://修改成功\\\";\\n            } else {\\n                return \\\"toast://\\\" + result.detail;\\n            }\\n        }),\\n        col_type: 'text_center_1'\\n    });\\n}\\n\\nfunction m_avatar() {\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        col_type: 'input',\\n        desc: \\\"请输入新的头像链接\\\",\\n        extra: {\\n            titleVisible: false,\\n            defaultValue: getVar('Warehouse.m.avatar', '') || dev.avatar,\\n            onChange: 'putVar(\\\"Warehouse.m.avatar\\\",input)'\\n        }\\n    });\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        title: \\\"保存\\\",\\n        url: $(getApi(\\\"modify_ava\\\") + path).lazyRule(() => {\\n            let newAvatar = getVar('Warehouse.m.avatar', '');\\n            \\n            let result = request(input + \\\"&avatar_url=\\\" + encodeURIComponent(newAvatar));\\n            result = JSON.parse(result);\\n            if (result.status === 0) {\\n                back();\\n                return \\\"toast://修改成功\\\";\\n            } else {\\n                return \\\"toast://\\\" + result.detail;\\n            }\\n        }),\\n        col_type: 'text_center_1'\\n    });\\n}\\n\\nfunction m_pwd() {\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        title:\\\"原密码\\\",\\n        col_type: 'input',\\n        desc: \\\"请输入原密码\\\",\\n        extra: {\\n            type:\\\"password\\\",\\n            defaultValue: getVar('Warehouse.m.Password.y', ''),\\n            onChange: 'putVar(\\\"Warehouse.m.Password.y\\\",input)'\\n        }\\n    });\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        title:\\\"新密码\\\",\\n        col_type: 'input',\\n        desc: \\\"请输入新密码\\\",\\n        extra: {\\n            type:\\\"password\\\",\\n            defaultValue: getVar('Warehouse.m.Password.x', ''),\\n            onChange: 'putVar(\\\"Warehouse.m.Password.x\\\",input)'\\n        }\\n    });\\n    data.push({\\n        title:\\\"重复新密码\\\",\\n        col_type: 'input',\\n        desc: \\\"请重复新密码\\\",\\n        extra: {\\n            type:\\\"password\\\",\\n            titleVisible: false,\\n            defaultValue: getVar('Warehouse.m.Password.c', ''),\\n            onChange: 'putVar(\\\"Warehouse.m.Password.c\\\",input)'\\n        }\\n    });\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    data.push({\\n        title: \\\"保存\\\",\\n        url: $(getApi(\\\"modify_pwd\\\")+path).lazyRule((password,username) => {\\n            let old_password = getVar('Warehouse.m.Password.y', '');\\n            let new_password = getVar('Warehouse.m.Password.x', '');\\n            let new_password_again = getVar('Warehouse.m.Password.c', '');\\n            if (old_password!==password) {\\n                return \\\"toast://原密码错误\\\";\\n            }\\n            if(new_password===\\\"\\\"){\\n                return \\\"toast://请输入新密码\\\";\\n            }\\n            if(new_password!==new_password_again){\\n                return \\\"toast://两次密码不同\\\"\\n            }\\n            let result = request(input + \\\"&new_password=\\\" + new_password+\\\"&new_password_re=\\\"+new_password_again);\\n            result = JSON.parse(result);\\n            if (result.status === 0) {\\n                writeFile(\\\"hiker://files/WarehouseUSER.json\\\",JSON.stringify({\\n                    username:username,\\n                    password:new_password\\n                }));\\n                back();\\n                return \\\"toast://修改成功\\\";\\n            } else {\\n                return \\\"toast://\\\" + result.detail;\\n            }\\n        },password,username),\\n        col_type: 'text_center_1'\\n    });\\n}\\n\\nswitch (Pattern) {\\n    case 0:\\n        setPageTitle(\\\"修改头像\\\");\\n        m_avatar();\\n        break;\\n    case 1:\\n        setPageTitle(\\\"修改昵称\\\");\\n        m_petName();\\n        break;\\n    case 2:\\n        setPageTitle(\\\"修改密码\\\");\\n        m_pwd();\\n        break;\\n}\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"编辑规则备注\",\"path\":\"set_rule_notes\",\"rule\":\"js:\\nlet data = [];\\nconst {\\n    getApi\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    id,\\n    username,\\n    password,\\n    name\\n} = MY_PARAMS;\\nsetPageTitle(\\\"备注「\\\"+name+\\\"」\\\");\\naddListener('onClose',\\\"clearVar('Warehouse.rule.notes', '')\\\");\\nlet notes=request(getApi(\\\"get_rule_note\\\")+id);\\nnotes=JSON.parse(notes).result;\\ndata.push({\\n    desc: \\\"规则备注......\\\",\\n    col_type: 'input',\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getVar('Warehouse.rule.notes', '')||notes||\\\"\\\",\\n        type: \\\"textarea\\\",\\n        height:-1,\\n        onChange: 'putVar(\\\"Warehouse.rule.notes\\\",input)'\\n    }\\n});\\n\\ndata.push({\\n    title: \\\"保存\\\",\\n    col_type: \\\"text_center_1\\\",\\n    url: $(getApi(\\\"set_rule_note\\\") + id).lazyRule((username, password) => {\\n        let notes = getVar('Warehouse.rule.notes', '');\\n        let result = request(input, {\\n            headers: {\\n                'content-type': 'application/json'\\n            },\\n            body: JSON.stringify({\\n                \\\"params\\\": {\\n                    \\\"qq\\\": username,\\n                    \\\"password\\\": password,\\n                    \\\"note\\\":notes\\n                }\\n            }),\\n            method: 'POST'\\n        });\\n        result = JSON.parse(result).result;\\n        if (result.status !== 0) {\\n            return \\\"toast://\\\" + result.detail;\\n        }\\n        back(false);\\n        return \\\"toast://修改成功\\\";\\n    }, username, password)\\n});\\nsetResult(data);\"},{\"col_type\":\"line\",\"name\":\"评论列表\",\"path\":\"Comment\",\"rule\":\"js:\\nsetPageTitle(\\\"评论列表\\\");\\nconst {\\n    api\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet data = [];\\nlet {\\n    totalSum,\\n    id,\\n    no_active,\\n    username,\\n    password\\n} = MY_PARAMS;\\nlet page = parseInt(MY_URL.split(\\\"#\\\")[1]);\\nlet discuss_type = getVar(\\\"Warehouse.comment.discuss_type\\\", \\\"\\\");\\nif (page === 1) {\\n    data.push({\\n        col_type: \\\"line_blank\\\"\\n    });\\n    addListener('onClose', $.toString(() => {\\n        putVar(\\\"Warehouse.comment.discuss_type\\\", \\\"\\\");\\n    }));\\n    data.push({\\n        title: \\\"全部\\\" + (discuss_type === \\\"\\\" ? \\\"◉\\\" : \\\"○\\\"),\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            putVar(\\\"Warehouse.comment.discuss_type\\\", \\\"\\\");\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: 'text_4'\\n\\n    });\\n    data.push({\\n        title: \\\"👍赞\\\" + (discuss_type === \\\"good\\\" ? \\\"◉\\\" : \\\"○\\\"),\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            putVar(\\\"Warehouse.comment.discuss_type\\\", \\\"good\\\");\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: 'text_4'\\n\\n    });\\n    data.push({\\n        title: \\\"👎踩\\\" + (discuss_type === \\\"bad\\\" ? \\\"◉\\\" : \\\"○\\\"),\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            putVar(\\\"Warehouse.comment.discuss_type\\\", \\\"bad\\\");\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: 'text_4'\\n    });\\n    data.push({\\n        title: \\\"回复\\\" + (discuss_type === \\\"reply\\\" ? \\\"◉\\\" : \\\"○\\\"),\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            putVar(\\\"Warehouse.comment.discuss_type\\\", \\\"reply\\\");\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: 'text_4'\\n    });\\n}\\n\\n\\nlet icon = {\\n    \\\"good\\\": \\\"👍\\\",\\n    \\\"bad\\\": \\\"👎\\\",\\n    \\\"reply\\\":\\\"开发者🗣\\\"\\n}\\nlet control=(pid,active)=>void 0;\\nif(no_active){\\n    control=function(pid,active){\\n        data.push({\\n            title:active?\\\"隐藏评论\\\":\\\"展示评论\\\",\\n            url:$(api.dis_dev_control+pid+\\\"?qq=\\\" + username + \\\"&password=\\\" + password+\\\"#noLoading#\\\").lazyRule(()=>{\\n                let result=JSON.parse(request(input));\\n                refreshPage(false)\\n                return \\\"toast://\\\"+result.detail;\\n            }),\\n            col_type:\\\"text_2\\\"\\n        });\\n        data.push({\\n            title:\\\"删除评论\\\",\\n            url:$(\\\"确认删除该评论?\\\").confirm((input)=>{\\n                let result=JSON.parse(request(input));\\n                refreshPage(false)\\n                return \\\"toast://\\\"+result.detail;\\n            },api.dis_dev_control+pid+\\\"?qq=\\\" + username + \\\"&password=\\\" + password+\\\"&delete=1\\\"),\\n            col_type:\\\"text_2\\\"\\n        });\\n        data.push({\\n            col_type:\\\"line\\\"\\n        });\\n        data.push({\\n            col_type:\\\"line\\\"\\n        });\\n    }\\n}\\nif (totalSum === 0) {\\n    data.push({\\n        title: \\\"<h5 style='text-align:center'>一条评论也没有，快来抢沙发吧！</h5>\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n} else {\\n    let commentList = JSON.parse(request(api.dis_get + id + \\\"?limit=5&page=\\\" + page + \\\"&no_active=\\\" + no_active + \\\"&discuss_type=\\\" + discuss_type)).result;\\n    for (let item of commentList) {\\n        let Reply = item.discuss_type===\\\"reply\\\"&&item.reply_to_name!==false&&item.reply_to_id!==false?\\\"‘‘回复@\\\"+item.reply_to_name+\\\" #\\\"+item.discuss_id+\\\"’’\\\\n\\\":\\\"\\\";\\n        data.push({\\n            title: item.name + \\\"&nbsp;&nbsp;<font color='gray'><small>#\\\" + item.id + \\\"</small><font>\\\",\\n            col_type: \\\"avatar\\\",\\n            //url: no_active?\\\"hiker://page/Reply\\\":\\\"toast://\\\" + item.qq,\\n\\t\\t       url:no_active?\\\"hiker://page/Reply\\\":\\\"mqqwpa://im/chat?chat_type=wpa&uin=\\\"+item.qq,\\n            extra:{\\n                ruleId: id,\\n                name: item.name,\\n                password: password,\\n                username: username,\\n                replyId:item.id\\n            },\\n            pic_url: item.avatar_url\\n        });\\n        data.push({\\n            title: item.discuss_text,\\n            desc: Reply+item.create_date + \\\"·\\\" + icon[item.discuss_type],\\n            col_type: \\\"text_1\\\",\\n            url: \\\"hiker://page/info\\\",\\n            extra:{\\n                name:item.name,\\n                type:\\\"long_text\\\",\\n                text:item.discuss_text\\n            },\\n            pic_url: item.avatar_url\\n        });\\n        control(item.id,item.active);\\n    }\\n    if (commentList.length === 0) {\\n        data.push({\\n            col_type: \\\"line_blank\\\"\\n        });\\n    }\\n}\\n\\nsetResult(data)\"},{\"col_type\":\"movie_3\",\"name\":\"发表评论\",\"path\":\"MakeAcomment\",\"rule\":\"js:\\nlet data = [];\\nconst {\\n    api,\\n    getFile\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    id,\\n    name,\\n    defaultType\\n} = MY_PARAMS;\\nlet user=getFile().user||[\\\"\\\",\\\"\\\"];\\n\\nsetPageTitle(\\\"评论(\\\" + name + \\\")\\\");\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.comment.type\\\");\\n    clearVar(\\\"Warehouse.comment.text\\\");\\n    clearVar(\\\"Warehouse.comment.qq\\\");\\n    refreshPage(false);\\n}));\\nlet type = getVar(\\\"Warehouse.comment.type\\\") || defaultType||\\\"good\\\";\\ndata.push({\\n    desc: \\\"评论......\\\",\\n    col_type: 'input',\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getVar('Warehouse.comment.text', ''),\\n        type: \\\"textarea\\\",\\n        height:7,\\n        onChange: 'putVar(\\\"Warehouse.comment.text\\\",input)'\\n    }\\n});\\ndata.push({\\n    title:\\\"账号：\\\"+(user[0]||\\\"\\\"),\\n    desc:\\\"验证码：\\\"+(user[1]||\\\"\\\"),\\n    url:\\\"hiker://page/Userregistration\\\",\\n    col_type: 'text_1',\\n    \\n});\\n\\ndata.push({\\n    title:  (type === \\\"good\\\" ? \\\"◉\\\" : \\\"○\\\")+\\\" 👍\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        putVar(\\\"Warehouse.comment.type\\\", \\\"good\\\");\\n        refreshPage();\\n        return \\\"hiker://empty\\\";\\n    }),\\n    col_type: 'text_2'\\n\\n});\\ndata.push({\\n    title:  (type === \\\"bad\\\" ? \\\"◉\\\" : \\\"○\\\")+\\\" 👎\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        putVar(\\\"Warehouse.comment.type\\\", \\\"bad\\\");\\n        refreshPage();\\n        return \\\"hiker://empty\\\";\\n    }),\\n    col_type: 'text_2'\\n});\\n\\ndata.push({\\n    title: \\\"提交\\\",\\n    col_type: \\\"text_center_1\\\",\\n    url: $(api.dis_new + id).lazyRule((Account) => {\\n        let text = getVar('Warehouse.comment.text', '');\\n        let [qq,auth_code] = Account;\\n        let type = getVar('Warehouse.comment.type') || 'good';\\n        qq=qq||\\\"\\\";\\n        auth_code=auth_code||\\\"\\\";\\n        if(qq==\\\"\\\"||auth_code==\\\"\\\"){\\n            return \\\"toast://未登录账号\\\";\\n        }\\n        if(text==\\\"\\\"){\\n            return \\\"toast://你还什么都没写啊\\\";\\n        }\\n        function r(p) {\\n            let result = request(input, {\\n                headers: {\\n                    'content-type': 'application/json'\\n                },\\n                body: JSON.stringify(p),\\n                method: 'POST'\\n            });\\n            return JSON.parse(result).result;\\n        }\\n        let p = {\\n            \\\"params\\\": {\\n                \\\"discuss_text\\\": text,\\n                \\\"qq\\\": qq,\\n                \\\"discuss_type\\\": type,\\n                \\\"auth_code\\\": auth_code\\n            }\\n        }\\n        let result = r(p);\\n        if(result.status===0){\\n            back(false);\\n        }\\n        return \\\"toast://\\\"+result.detail;\\n\\n    },user)\\n});\\n\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"伪用户注册\",\"path\":\"Userregistration\",\"rule\":\"js:\\nconst {\\n    api,\\n    getFile,\\n    getUserDate\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet data = [];\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\nsetPageTitle(\\\"用户列表管理\\\");\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.m.qq\\\");\\n    clearVar(\\\"Warehouse.m.yzm\\\");\\n}));\\nlet user = getFile();\\nlet userName = user.user || [\\\"\\\"];\\nuserName = userName[0];\\ndata.push({\\n    title: \\\"““””<big>(添加/验证)账号</big>\\\",\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://empty\\\"\\n});\\n\\ndata.push({\\n    title: \\\"获取\\\",\\n    col_type: 'input',\\n    desc: \\\"请输入qq\\\",\\n    url: $.toString((a, b) => {\\n        let qq = input;\\n        if (qq == \\\"\\\") {\\n            return \\\"toast://你还什么都没填啊!\\\";\\n        }\\n        showLoading(\\\"获取中...\\\")\\n        return $(\\\"#noLoading#\\\").lazyRule((qq, a, b) => {\\n        try {\\n            let result = request(a, {\\n                headers: {\\n                    'content-type': 'application/json'\\n                },\\n                body: JSON.stringify({\\n                    \\\"params\\\": {\\n                        \\\"qq\\\": qq\\n                    }\\n                }),\\n                method: 'POST'\\n            });\\n            result = JSON.parse(result).result;\\n            if (result.status === 0) {\\n                hideLoading();\\n                return \\\"toast://\\\" + result.detail;\\n            } else {\\n                let result2 = JSON.parse(request(b + \\\"?qq=\\\" + qq));\\n                hideLoading();\\n                return \\\"toast://\\\" + result2.detail;\\n            }\\n        } catch (e) {\\n            hideLoading();\\n            throw e;\\n        }\\n        }, qq, a, b);\\n\\n    }, api.dis_new_user, api.dis_verify),\\n    extra: {\\n        type: \\\"number\\\",\\n        defaultValue: getVar('Warehouse.m.qq', '') || userName,\\n        onChange: 'putVar(\\\"Warehouse.m.qq\\\",input)'\\n    }\\n});\\n\\ndata.push({\\n    col_type: 'input',\\n    desc: \\\"请输入验证码\\\",\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getVar('Warehouse.m.yzm', ''),\\n        onChange: 'putVar(\\\"Warehouse.m.yzm\\\",input)'\\n    }\\n});\\ndata.push({\\n    col_type: 'rich_text',\\n    title: \\\"<small>提示：1.每天只能获取5次验证码.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.<s>验证码有效期持续一周左右</s>(暂时不会，忘记验证码可通过QQ号获取)</small>\\\"\\n});\\n\\nlet userList = getUserDate();\\ndata.push({\\n    title: \\\"验证/登录\\\",\\n    url: $(\\\"确定保存，验证码填错，无法评论哦\\\").confirm((f, l, login) => {\\n        let qq = getVar('Warehouse.m.qq', '');\\n        let yzm = getVar('Warehouse.m.yzm', '');\\n        if (qq == \\\"\\\" || yzm == \\\"\\\") {\\n            return \\\"toast://qq或验证码为空\\\";\\n        }\\n        let result = request(login, {\\n            headers: {\\n                'content-type': 'application/json'\\n            },\\n            body: JSON.stringify({\\n                \\\"params\\\": {\\n                    \\\"qq\\\": qq,\\n                    \\\"auth_code\\\": yzm\\n                }\\n            }),\\n            method: 'POST'\\n        });\\n        result = JSON.parse(result).result;\\n        if (result.status === 0) {\\n            f.user = [qq, yzm];\\n            writeFile(\\\"hiker://files/WarehouseUSER.json\\\", JSON.stringify(f));\\n            let index = l.findIndex(item => item[0] === qq);\\n            if (index > -1) {\\n                l.splice(index, 1, [qq, yzm]);\\n            } else if (l.length < 6) {\\n                l.push([qq, yzm]);\\n            } else {\\n                l.splice(0, 1);\\n                l.push([qq, yzm]);\\n            }\\n            writeFile(\\\"hiker://files/WarehouseUSERA.json\\\", JSON.stringify(l));\\n            back();\\n            return \\\"toast://验证成功\\\";\\n        }\\n        return \\\"toast://\\\" + result.detail;\\n    }, user, userList, api.dis_login),\\n    col_type: 'text_center_1'\\n});\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: \\\"““””<big>账号列表</big>\\\\t\\\\t\\\\t<small>(保留5条记录)</small>\\\",\\n    col_type: \\\"text_1\\\",\\n    url: \\\"hiker://empty\\\"\\n});\\nuserList.reverse();\\n\\nfor (let item of userList) {\\n    data.push({\\n        title: \\\"账号：\\\" + item[0] + (userName === item[0] ? \\\"\\\\t\\\\t\\\\t““[当前账号]””\\\" : \\\"\\\"),\\n        desc: \\\"验证码：\\\" + item[1],\\n        url: $(\\\"是否切换为该[\\\" + item[0] + \\\"]账号\\\").confirm((f, item) => {\\n            f.user = item;\\n            writeFile(\\\"hiker://files/WarehouseUSER.json\\\", JSON.stringify(f));\\n            back();\\n            return \\\"toast://切换成功\\\";\\n        }, user, item),\\n        col_type: \\\"text_1\\\"\\n    });\\n}\\ndata.push({\\n    col_type: \\\"line_blank\\\"\\n});\\ndata.push({\\n    title: \\\"退出账号\\\",\\n    url: $(\\\"确认退出登录状态\\\").confirm((f) => {\\n        f.user = [];\\n        writeFile(\\\"hiker://files/WarehouseUSER.json\\\", JSON.stringify(f));\\n        back();\\n        return \\\"toast://退出成功\\\";\\n    }, user),\\n    col_type: 'text_center_1'\\n});\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"列表排序算法\",\"path\":\"sort\",\"rule\":\"js:\\n/* 规则列表排序 [ UP、NEW、无更新 ] 顺序 */\\n/* 归并排序 Start */\\nfunction mergeSort(arr) {\\n    var len = arr.length;\\n    if (len < 2) {\\n        return arr;\\n    }\\n    var middle = Math.floor(len / 2),\\n        left = arr.slice(0, middle),\\n        right = arr.slice(middle);\\n    return merge(mergeSort(left), mergeSort(right));\\n}\\nfunction merge(left, right) {\\n    var result = [];\\n    var isThisVersionList = [];\\n\\n    while (left.length > 0 && right.length > 0) {\\n        if (left[0].title.includes(\\\"🆙\\\")) {\\n            result.push(left.shift());\\n        } else if (right[0].title.includes(\\\"🆙\\\")) {\\n            result.push(right.shift());\\n        } else if (left[0].title.includes(\\\"🆕\\\")) {\\n            result.push(left.shift());\\n        } else if (right[0].title.includes(\\\"🆕\\\")) {\\n            result.push(right.shift());\\n        } else {\\n            isThisVersionList.push(left.shift());\\n            isThisVersionList.push(right.shift());\\n        }\\n    }\\n\\n    while (isThisVersionList.length) result.push(isThisVersionList.shift());\\n\\n    while (left.length)\\n        result.push(left.shift());\\n\\n    while (right.length)\\n        result.push(right.shift());\\n\\n    return result;\\n}\\n$.exports.mergeSort = mergeSort;\\n/* 归并排序 End */\"},{\"col_type\":\"icon_2_round\",\"name\":\"全部公开规则\",\"path\":\"AllPublicRule\",\"rule\":\"js:\\n    const {\\n        api,\\n        localRuleVer,\\n        getApi\\n    } = $.require(\\\"hiker://page/utiliy\\\");\\nconst {\\n    mergeSort\\n} = $.require(\\\"hiker://page/sort\\\");\\nlet dataType = getVar(\\\"Warehouse.type\\\", \\\"\\\");\\nlet order = getVar(\\\"Warehouse.order\\\", \\\"0\\\");\\nlet sort = getVar(\\\"Warehouse.sort\\\", \\\"0\\\");\\nlet good = getVar(\\\"Warehouse.good\\\", \\\"\\\");\\nlet page = MY_URL.split(\\\"#\\\")[1] || 1;\\nlet ruleList = JSON.parse(request(api.all_rule + \\\"?data_type=\\\" + dataType + \\\"&page=\\\" + page + \\\"&limit=20&order=\\\" + order + \\\"&sort=\\\" + sort+ \\\"&is_good=\\\" + good)).result;\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.type\\\");\\n    clearVar(\\\"Warehouse.order\\\");\\n    clearVar(\\\"Warehouse.sort\\\");\\n    clearVar(\\\"Warehouse.good\\\");\\n    clearVar(\\\"Warehouse.back\\\");\\n}));\\nlet data = [];\\nif (getVar(\\\"Warehouse.back\\\") === \\\"1\\\") {\\n    back();\\n}\\nfunction tab(arr, type, contrast) {\\n    for (let item of arr) {\\n        data.push({\\n            title: item[1] === contrast ? \\\"““\\\" + item[0] + \\\"””\\\" : item[0],\\n            url: $(\\\"#noLoading#\\\").lazyRule((key, type) => {\\n                putVar(type, key);\\n                refreshPage(false);\\n                return \\\"hiker://empty\\\";\\n            }, item[1], type),\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    }\\n    data.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n}\\nif (page === \\\"1\\\") {\\n    tab([\\n        [\\\"全部\\\", \\\"\\\"],\\n        [\\\"小程序\\\", \\\"home_rule_url\\\"],\\n        [\\\"提交云仓库规则\\\", \\\"publish\\\"],\\n        [\\\"网页插件\\\", \\\"js_url\\\"],\\n        [\\\"静态页面\\\", \\\"html\\\"],\\n        [\\\"主题\\\", \\\"config\\\"]\\n    ], \\\"Warehouse.type\\\", dataType);\\n    tab([\\n        [\\\"时间\\\", \\\"0\\\"],\\n        [\\\"ID\\\", \\\"1\\\"],\\n        [\\\"好评度\\\", \\\"2\\\"],\\n        [\\\"差评度\\\", \\\"3\\\"],\\n        [\\\"回复数\\\", \\\"4\\\"]\\n    ], \\\"Warehouse.order\\\", order);\\n    tab([\\n        [\\\"倒序\\\", \\\"0\\\"],\\n        [\\\"正序\\\", \\\"1\\\"]\\n    ], \\\"Warehouse.sort\\\", sort);\\n    tab([\\n        [\\\"不论\\\", \\\"\\\"],\\n        [\\\"优质\\\", \\\"1\\\"]\\n    ], \\\"Warehouse.good\\\", good);\\n    data.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(name => \\\"hiker://search?s=\\\" + input + \\\"&rule=\\\" + name, MY_RULE.title),\\n        col_type: \\\"input\\\",\\n        desc: \\\"搜索全部规则\\\"\\n    });\\n}\\n\\nlet homeList = JSON.parse(request(api.home));\\nlet mRuleList = [];\\nfor (var item of ruleList) {\\n    var name = item.name;\\n    if (item.is_tap) {\\n        let location = JSON.parse(request(getApi(\\\"ruleListJson\\\") + \\\"?id=\\\" + item.id));\\n        item.id = location.id;\\n        item.name = location.name;\\n        item.author = location.author;\\n        item.data_type = location.data_type;\\n        item.ver = location.ver\\n    }\\n    item.version = item.ver;\\n    let label = \\\"\\\",\\n        lver = -2;\\n    if (item.is_json && item.data_type === \\\"home_rule_url\\\") {\\n        lver = localRuleVer(homeList, item);\\n        if (lver === -1) {\\n            label = \\\"🆕\\\";\\n        } else if (lver < item.ver) {\\n            label = \\\"🆙\\\";\\n        }\\n    }\\n    mRuleList.push({\\n        title: label + name,\\n        url: \\\"hiker://page/ruleDetail#noHistory##noRecordHistory#\\\",\\n        extra: {\\n            lver: lver,\\n            id: item.id,\\n            isAll:true\\n        },\\n        pic_url: item.pic,\\n    })\\n}\\n/* 归并排序 Start */\\n//mRuleList = mergeSort(mRuleList);\\n/* 归并排序 End */\\ndata.push.apply(data, mRuleList)\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"回复\",\"path\":\"Reply\",\"rule\":\"js:\\nlet data = [];\\nconst {\\n    api\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    replyId,\\n    ruleId,\\n    name,\\n    password,\\n    username\\n} = MY_PARAMS;\\n\\n\\nsetPageTitle(\\\"回复(\\\" + name + \\\")\\\");\\naddListener('onClose', $.toString(() => {\\n    clearVar(\\\"Warehouse.comment.text\\\");\\n    refreshPage(false);\\n}));\\n\\ndata.push({\\n    desc: \\\"回复......\\\",\\n    col_type: 'input',\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getVar('Warehouse.comment.text', ''),\\n        type: \\\"textarea\\\",\\n        height:7,\\n        onChange: 'putVar(\\\"Warehouse.comment.text\\\",input)'\\n    }\\n});\\n\\n\\ndata.push({\\n    title: \\\"提交\\\",\\n    col_type: \\\"text_center_1\\\",\\n    url: $(api.dis_reply + ruleId).lazyRule((password, username, ruleId) => {\\n        let text = getVar('Warehouse.comment.text', '');\\n        if (password == \\\"\\\" || username == \\\"\\\") {\\n            return \\\"toast://未登录账号\\\";\\n        }\\n        if (text == \\\"\\\") {\\n            return \\\"toast://你还什么都没写啊\\\";\\n        }\\n        let result = request(input, {\\n            headers: {\\n                'content-type': 'application/json'\\n            },\\n            body: JSON.stringify({\\n                \\\"params\\\": {\\n                    \\\"discuss_text\\\": text,\\n                    \\\"qq\\\": username,\\n                    \\\"password\\\": password,\\n                    \\\"discuss_id\\\": ruleId\\n                }\\n            }),\\n            method: 'POST'\\n        });\\n        result = JSON.parse(result).result;\\n        if (result.status === 0) {\\n            back(false);\\n        }\\n        return \\\"toast://\\\" + result.detail;\\n\\n    }, password, username, replyId)\\n});\\n\\nsetResult(data);\"},{\"col_type\":\"movie_3\",\"name\":\"我的回复\",\"path\":\"MyReply\",\"rule\":\"js:\\nconst {\\n    api\\n} = $.require(\\\"hiker://page/utiliy\\\");\\nlet {\\n    auth_code,\\n    qq\\n} = MY_PARAMS;\\nlet page = parseInt(MY_URL.split(\\\"#\\\")[1]);\\nlet data=[];\\nlet commentList = JSON.parse(request(api.dis_get_reply + \\\"?limit=5&page=\\\" + page + \\\"&qq=\\\" + qq + \\\"&auth_code=\\\" + auth_code)).result;\\nif (commentList.length === 0) {\\n    data.push({\\n        title: \\\"<h5 style='text-align:center'>别拉了一条也不剩了</h5>\\\",\\n        col_type: \\\"rich_text\\\"\\n    });\\n} else {\\n    for (let item of commentList) {\\n        data.push({\\n            title: item.name + \\\"&nbsp;&nbsp;<font color='gray'><small>#\\\" + item.id + \\\"</small><font>\\\",\\n            col_type: \\\"avatar\\\",\\n            url: \\\"hiker://page/ruleDetail#noHistory##noRecordHistory#\\\",\\n            extra: {\\n                lver: \\\"回复进入不支持查看\\\",\\n                id: item.rule_id[0]\\n            },\\n            pic_url: item.avatar_url\\n        });\\n        data.push({\\n            title: item.discuss_text,\\n            desc: item.create_date + \\\"·\\\"+item.rule_id[1]+\\\"·\\\"+\\\"开发者🗣\\\",\\n            col_type: \\\"text_1\\\",\\n            url: \\\"hiker://page/info\\\",\\n            extra:{\\n                name:item.name,\\n                type:\\\"long_text\\\",\\n                text:item.discuss_text\\n            },\\n            pic_url: item.avatar_url\\n        });\\n    }\\n    \\n}\\nsetResult(data);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"更多分享\",\"path\":\"moreShare\",\"rule\":\"js:\\n    addListener('onClose', $.toString(()=>{\\n        clearVar(\\\"house.upload_code\\\");\\n    }));\\nconst {color,small,api, getFile} = $.require(\\\"hiker://page/utiliy\\\");\\nlet houseFile = getFile||false;\\nlet put_url = api.host+'/hikerule/dev/put';\\nif(!houseFile){\\n    setItem('is_house_vip', 'false');\\n}\\nlet house_data = houseFile();\\n// log(house_data.username+'-'+house_data.password);\\nvar canup = house_data.username.length >= 6 && house_data.password.length > 2;\\nlog('可以上传?'+canup);\\nlet d = [];\\nlet file_type = [{name:'静态文件',value:'html'},{name:'网页插件',value:'js_url'},{name:'主页配置',value:'config'}]; //上传类型\\nlet file_redirect = [{name:'本地',value:'false'},{name:'直链302',value:'true'}]; //是否重定向\\nlet file_ua = [{name:'电脑',value:'pc'},{name:'手机',value:'mobile'}];\\nlet file_type_title = file_type.map((item) => {\\n    let name = getItem('house.file_type','静态文件');\\n    if(item.name===name){\\n        return '👉'+item.name;\\n    }else{\\n        return item.name;\\n    }\\n});\\nlet file_redirect_title = file_redirect.map((item) => {\\n    let name = getItem('house.file_redirect','本地');\\n    if(item.name===name){\\n        return '👉'+item.name;\\n    }else{\\n        return item.name;\\n    }\\n});\\nlet file_ua_title = file_ua.map((item) => {\\n    let name = getItem('house.file_ua','电脑');\\n    if(item.name===name){\\n        return '👉'+item.name;\\n    }else{\\n        return item.name;\\n    }\\n});\\nd.push({col_type: 'x5_webview_single', extra: {js: 'console.log(\\\"我加载了\\\")'}});\\nd.push({\\n    title: '获取',\\n    desc: \\\"文件路径,支持hiker,file,http,主题\\\",\\n    extra: {\\n        onChange: \\\"putVar('house.web_url',input)\\\",\\n        titleVisible: true,\\n        id:'filePath',\\n        defaultValue:getVar('house.web_url')\\n    },\\n    url:$.toString(() => {\\n        let input = getVar('house.web_url','');\\n        if(input.length<2){\\n            return 'toast://链接不可以为空'\\n        } else if(/^hiker:|^file:|^http:|^https:|^\\\\/storage\\\\/|^\\\\/sdcard\\\\//.test(input)){\\n            if(/^\\\\/storage\\\\/|^\\\\/sdcard\\\\//.test(input)){\\n                input = 'file://'+input;\\n            }\\n            log('正常链接:'+input);\\n            let ua = getItem('house.file_ua')==='电脑'?'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36':'Mozilla/5.0 (Linux; Android 9; MI 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36';\\n            let web_url_arr = input.split(';');\\n            let web_url = web_url_arr[0];\\n            let headers = {\\n                'Referer':'https://blog.csdn.net',\\n                'User-Agent':ua,\\n                'Accept':'application/json, text/javascript, */*; q=0.01',\\n                'Accept-Language':'zh-CN',\\n            };\\n            if(web_url_arr.length>=3&&web_url_arr[2].length>2){ //设置编码\\n                headers['content-type'] = 'charset='+web_url_arr[2].toUpperCase();\\n            }\\n            let params = {headers:headers,withHeaders:false,redirect:false};\\n            if(web_url_arr.length>=2&&web_url_arr[1].length>2){ // 设置请求方法\\n                params['method'] = web_url_arr[1].toUpperCase();\\n            }\\n            log('开始获取源码');\\n            try {\\n                /*\\n                requestAsync(web_url,params,function (key,code) {\\n                    let back_code = code;\\n                    if(back_code.length>20){\\n                        putVar('house.upload_code',back_code);\\n                        refreshPage(true);\\n                        return 'toast://源码已获取,并部分插入到文本区域'\\n                    }else{\\n                        return 'toast://错误，本次获取到空文本，疑似你没有此文件!';\\n                    }\\n                });\\n                */\\n                let back_code = getItem('house.file_ua')==='电脑'?fetch(web_url,params):request(web_url,params);\\n                if(back_code.length>20){\\n                    putVar('house.upload_code',back_code);\\n                    refreshPage(true);\\n                    return 'toast://源码已获取,并部分插入到文本区域'\\n                }else{\\n                    return 'toast://错误，本次获取到空文本，疑似你没有此文件!';\\n                }\\n            }catch (e) {\\n                log(e.message);\\n                return 'toast://发生了错误:\\\\n'+e.message;\\n            }\\n        }else if(/主题￥|元素￥/.test(input)){\\n            log('主题链接');\\n            let web_url_arr = input.split('￥');\\n            let web_url = web_url_arr[web_url_arr.length-1];\\n            let back_code = parsePaste(web_url);\\n            if(back_code.length>20) {\\n                putVar('house.upload_code',back_code);\\n                refreshPage(true);\\n                return 'toast://源码已获取,并部分插入到文本区域'\\n            }else{\\n                return 'toast://错误，本次获取返回为:\\\\n'+back_code;\\n            }\\n        }else{\\n            return 'toast://非法链接:\\\\n'+getVar('house.web_url');\\n        }\\n    }),\\n    col_type: \\\"input\\\"\\n});\\nd.push({\\n    title: \\\"选择文件路径\\\",\\n    url:$('#noLoading#').lazyRule(()=>{\\n        /*\\n        let fp = 'https://gitcode.net/qq_32394351/dr/-/raw/master/js/fileSelect.js';\\n        let f = require(fp);\\n        */\\n        let fp=config.lib.fileSelect;\\n        let f=$.rc(fp);\\n        return f.fileSelectionUri({\\n            callback: $.toString(() => {\\n                let target = findItem(\\\"filePath\\\").extra;\\n                updateItem(\\\"filePath\\\", {\\n                    extra: Object.assign(target, {\\n                        defaultValue: PATH\\n                    })\\n                });\\n                putVar('house.web_url',PATH);\\n                return true;\\n            }),\\n            onClickType:'confirm',\\n            fileType: \\\".js|.txt|.hiker|.json|.html\\\",\\n            pattern: 0,\\n            requireUrl:fp,\\n            initialPath:getPath('hiker://files/rules/dzHouse/').slice(7),\\n            memory:'true',\\n        });\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n});\\nd.push({\\n    title:'上传类型',\\n    desc:'上传文件的类型,当前为:'+color(getItem('house.file_type','静态文件'),'#ff7000'),\\n    col_type:'text_1',\\n    url:$(file_type_title,2).select(() => {\\n        setItem('house.file_type',input.replace('👉',''));\\n        refreshPage(true);\\n        return 'toast://你选择了:'+input;\\n    })\\n});\\n\\nd.push({\\n    title:'文件定位',\\n    desc:'文件是否属于重定向,当前为:'+color(getItem('house.file_redirect','本地'),'#ff7000'),\\n    col_type:'text_1',\\n    url:$(file_redirect_title,2).select(() => {\\n        setItem('house.file_redirect',input.replace('👉',''));\\n        refreshPage(true);\\n        return 'toast://你选择了:'+input;\\n    })\\n});\\n\\nd.push({\\n    title:'设备UA',\\n    desc:'发起网页请求头标识,当前为:'+color(getItem('house.file_ua','电脑'),'#ff7000'),\\n    col_type:'text_1',\\n    url:$(file_ua_title,2).select(() => {\\n        setItem('house.file_ua',input.replace('👉',''));\\n        refreshPage(true);\\n        return 'toast://你选择了:'+input;\\n    })\\n});\\nfunction compare(name) {\\n    return function(item) {\\n        return item.name === name;\\n    }\\n}\\nd.push({\\n    title:'🗄️环境',\\n    col_type:'flex_button',\\n    url:$().lazyRule((file_type,compare)=>{\\n        log('查看环境变量');\\n        try {\\n            let up_code = getVar('house.upload_code','');\\n            let ftype =  file_type.filter(compare(getItem('house.file_type','静态文件')))[0].value;\\n            let redirect = getItem('house.file_redirect','本地')!=='本地';\\n            let code = !redirect?up_code:input;\\n            let env = {\\n                web_url:getVar('house.web_url',''),\\n                device:getItem('house.file_ua','电脑'),\\n                ftype:ftype||\\\"\\\",\\n                redirect:redirect,\\n                code:code.substring(0,40)||\\\"\\\",\\n            }\\n            log(env);\\n            return 'toast://'+JSON.stringify(env);\\n            // alert(JSON.stringify(env));\\n        }catch (e) {\\n            return 'toast://'+e.message;\\n            // alert(e.message);\\n        }\\n    },file_type,compare)\\n});\\n\\nd.push({\\n    title:'📃教程',\\n    col_type:'flex_button',\\n    url:$().x5Rule(()=>{\\n        let msg = '欢迎使用开发者更多分享工具\\\\n1.输入网址为本地文件路径,hiker://或者file://开头\\\\n2.点击网址输入栏后面的按钮\\\\n3.看文本预览区是否正确\\\\n4.点击上传按钮提交到仓库';\\n        alert(msg);\\n    })\\n});\\n\\nd.push({\\n    title:'🗑️清空',\\n    col_type:'flex_button',\\n    url:$().lazyRule(()=>{\\n        clearVar('house.upload_code');\\n        refreshPage(true);\\n        return 'toast://已清除预览区域内容'\\n    })\\n});\\n\\nd.push({\\n    title:'📲示例',\\n    col_type:'flex_button',\\n    url:$().lazyRule(()=>{\\n        let demo_code = getItem('house.demo','0');\\n        if(demo_code=='0'){\\n            putVar('house.web_url','hiker://files/rules/dzHouse/html/资源网书签.html');\\n            demo_code = parseInt(demo_code)+1;\\n            setItem('house.demo',demo_code+'');\\n        }else{\\n            putVar('house.web_url','file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/dzHouse/html/资源网书签.html');\\n            setItem('house.demo','0');\\n        }\\n        refreshPage(true);\\n        return 'toast://已设置示例地址'\\n    })\\n});\\n\\nd.push({\\n    title:'📤上传',\\n    col_type:'flex_button',\\n    url:$().lazyRule((canup,house_data,put_url,file_type) =>{\\n        function compare(name) {\\n            return function(item) {\\n                return item.name === name;\\n            }\\n        }\\n        const {getNowFormatDate}=$.require(\\\"hiker://page/utiliy\\\");\\n        let up_code = getVar('house.upload_code','');\\n        if(up_code.length < 2){\\n            return 'toast://源码区无内容，请先访问一个静态页面'\\n        }\\n        if(!canup){\\n            return 'toast://你不是开发者，没有提交到仓库的权利!'\\n        }\\n        let input = getVar('house.web_url','');\\n        let web_url = input.split(';')[0];\\n        let fileName = '';\\n        if(/^hiker:|^file:|^http:|^https:|^\\\\/storage\\\\/|^\\\\/sdcard\\\\//.test(web_url)){\\n            fileName = web_url.split('/')[web_url.split('/').length-1];\\n        }else if(/主题￥|元素￥/.test(input)){\\n            let bkarr = up_code.split('￥');\\n            if(bkarr.length<3){\\n                return 'toast://云剪贴板内容有误'\\n            }\\n            switch (bkarr[1]) {\\n                case 'my_home_theme':\\n                    fileName = up_code.split('「')[1].split('」')[0];\\n                    break;\\n                case 'my_home_single':\\n                    fileName = up_code.split('「')[1].split('」')[0];\\n                    break;\\n                case 'js_url':\\n                    fileName = up_code.split('￥')[2].split('@')[0];\\n                    break;\\n            }\\n        }else{\\n            return 'toast://错误，网页链接无内容!';\\n        }\\n        let ua = getItem('house.file_ua')==='电脑'?'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36':'Mozilla/5.0 (Linux; Android 9; MI 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Mobile Safari/537.36';\\n        let headers = {\\n            'Referer':'https://blog.csdn.net',\\n            \\\"content-type\\\": \\\"application/json\\\",\\n            'User-Agent':ua,\\n            'Accept':'application/json, text/javascript, */*; q=0.01',\\n            'Accept-Language':'zh-CN',\\n        };\\n        let toCompare = '';\\n        if(fileName.endsWith('.html')){\\n            toCompare = '静态文件';\\n        }else if(/主题/.test(fileName)){\\n            toCompare = '主页配置'\\n        }\\n        let ftype =  file_type.filter(compare(toCompare||getItem('house.file_type','静态文件')))[0].value;\\n        let redirect = getItem('house.file_redirect','本地')!=='本地';\\n        if(redirect&&!web_url.startsWith('http')){\\n            return 'toast://直链302重定向网址链接必须http开头';\\n        }\\n        let code = !redirect?up_code:web_url;\\n        let data = {\\\"params\\\":\\n                {\\\"data\\\": {rule_name: fileName, \\\"rule_type\\\": '更多分享', \\\"version\\\":getNowFormatDate(),\\\"rule_value\\\": code,\\n                        data_type:ftype, is_redirect:redirect,deviceUa:getItem('house.file_ua'),\\n                    },\\n                    \\\"name\\\": house_data.username,\\n                    \\\"password\\\": house_data.password}\\n        };\\n        let upparams = {headers:headers,body:JSON.stringify(data),withHeaders:false,redirect:false,method:'POST'};\\n        let backmsg = getItem('house.file_ua')==='电脑'?fetch(put_url,upparams):request(put_url,upparams);\\n        try{\\n            let result = JSON.parse(backmsg).result;\\n            let detail = result.detail;\\n            return 'toast://'+detail;\\n        }catch (e) {\\n            log(e.message);\\n            return 'toast://发生了错误\\\\n'+e.message;\\n        }\\n    },canup,house_data,put_url,file_type)\\n});\\n\\nd.push({\\n    title:'长文本预览区域',\\n    col_type:'text_1',\\n    url:'hiker://empty',\\n    extra: {textSize: 11,lineVisible:false}\\n});\\n\\nd.push({\\n    title:getVar('house.upload_code','').substring(0,10240),\\n    col_type:'long_text',\\n    extra: {textSize: 11}\\n});\\nsetPageTitle(\\\"更多分享\\\");\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"轻合集生成接口\",\"path\":\"genApi\",\"rule\":\"js:\\nfunction genRule(name,url,icon){\\n    icon=icon||'https://z3.ax1x.com/2021/11/16/IWJhxf.png';\\n    const {getNowFormatDate,api,getApi}=$.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    String.prototype.replaceAll = function(old,new_str){\\n        return this.split(old).join(new_str);\\n    };\\n    let muban = getApi('importUrl')+\\\"1690\\\";\\n    let muban_word={name:\\\"@轻合集\\\",url:\\\"@地址\\\",ver:\\\"@版本\\\",icon:\\\"@图标\\\"};\\n    let muban_code = fetch(muban);\\n    muban_code=muban_code.replaceAll(muban_word.name,name).replaceAll(muban_word.ver,getNowFormatDate()).replaceAll(muban_word.url,url).replaceAll(muban_word.icon,icon);\\n    let import_code=\\\"海阔视界规则分享，当前分享的是：小程序，无根树，花正清，不断荤腥不戒淫￥home_rule_v2￥base64://@\\\"+name+\\\"@\\\"+base64Encode(muban_code);\\n    var pastes = getPastes();\\n    var url = sharePaste(import_code,pastes.slice(-1)[0]);\\n    let import_rule= url+\\\"\\\\n\\\\n小程序：\\\"+name;\\n    return import_rule;\\n}\\n$.exports.genRule=genRule;\"},{\"col_type\":\"movie_3\",\"name\":\"全局解析免嗅\",\"path\":\"globalParse\",\"rule\":\"js:\\n    function getHeaders(playUrl){\\n        let headers = {};\\n        let refer=playUrl.split(\\\"//\\\")[0]+\\\"//\\\"+playUrl.split(\\\"//\\\")[1].split(\\\"/\\\")[0];\\n        if(/lecloud\\\\.com|bilivideo\\\\.com/.test(playUrl)){\\n            headers = {\\\"Referer\\\": 'https://www.bilibili.com/',\\\"User-Agent\\\":\\\"Mozilla/5.0\\\"}\\n        }else if(/mgtv\\\\.com/.test(playUrl)){\\n            headers = {\\\"Referer\\\": refer,\\\"User-Agent\\\":\\\"Mozilla/5.0\\\"}\\n        }else if(/ixigua\\\\.com/.test(playUrl)){\\n            headers = {\\\"Referer\\\": 'https://www.ixigua.com/',\\\"User-Agent\\\":\\\"Mozilla/5.0\\\"}\\n        }else{\\n            headers = {\\\"Referer\\\": refer,'User-Agent':'Dart/2.13 (dart:io)'}\\n        }\\n        return headers\\n    }\\nfunction isPic(str){\\n    return /\\\\.(gif|jpg|jpeg|png|GIF|JPG|PNG)$/.test(str);\\n}\\nfunction isVideo(playUrl,rechange){\\n    //注意.php不可以被排除否则融兴解析不了 |.php$\\n    //如果是播放地址就直接返回地址加上UA，不是的话就返回false\\n    // let t1 = new Date().getTime();\\n    let cacheRegx = new RegExp('file:///storage/emulated/(.*?)\\\\\\\\.m3u8|hiker://files/(.*?)\\\\\\\\.m3u8');\\n    if(cacheRegx.test(playUrl)){\\n        return playUrl\\n    }\\n    function getHost(url){\\n        // fba的parseLazy太慢了千万别用\\n        try {\\n            return url.match(/^http(s)?:\\\\/\\\\/(.*?)\\\\//)[0].slice(0,-1);\\n        }catch (e) {\\n            return false\\n        }\\n        /*\\n        if(typeof(log)==='undefined'){\\n            return  fba.parseLazyRule($$$().lazyRule((url)=>{\\n                return getHome(url)\\n            },url))\\n        }else {\\n            return getHome(url)\\n        }\\n        */\\n    }\\n    let pUrl=playUrl.split(\\\";\\\")[0];//获取抠掉海阔ua等参数的网页播放链接\\n    let host = getHost(pUrl); // 获取域名\\n    if(!host){//判断无域名直接不是视频\\n        return false\\n    }\\n    function print(data){\\n        if(typeof(log)==='undefined'){\\n            return  fba.log(data)\\n        }else {\\n            return log(data)\\n        }\\n    }\\n    rechange=typeof(rechange)===\\\"function\\\"?rechange:function(playUrl){return playUrl};\\n    let exceptWords = '.js$|.css$|.ts$|.html$|.htm$|.gif$|.jpg$|.jpeg$|.png$|.ico$|.svg$|.txt$'.split('|').map(it=>'\\\\\\\\'+it).join('|');\\n    var exceptKeys = new RegExp(exceptWords);\\n    let exceptWords1 = 'referer=|url='.split('|').map(it=>it).join('|');\\n    var exceptKeys1 = new RegExp(exceptWords1);\\n    let replaceWords = 'playm3u8|m3u8\\\\.tv'.split('|').map(it=>it).join('|');\\n    let replaceKeys = new RegExp(replaceWords,'g');\\n    let videoWords = \\\"/video/tos|.mp4$|.m3u8$|.flv$|.avi$|.3gp$|.mpeg$|.wmv$|.mov$|rmvb|.dat$|.mp3$|.m4a$|qqBFdownload|mime=video%2F|mime_type=video_|type=m3u8|pt=m3u8\\\".split('|').map((it)=>{\\n        //type=mp4\\n        if(it.startsWith(\\\".\\\")){\\n            return '\\\\\\\\'+it\\n        }else{\\n            return it\\n        }\\n    }).join(\\\"|\\\");\\n    let videoKeys = new RegExp(videoWords);\\n    let rUrl = pUrl.replace(host,'');//获取除开域名的剩余链接\\n    let pUrl2=pUrl.split(\\\"&\\\")[0].split(\\\"?\\\")[0];//获取不带参数的网页链接\\n    let rurl2 = pUrl2.replace(host,'');//获取除开域名的剩余不带参数链接\\n    let hasKey = videoKeys.test(rUrl)||videoKeys.test(rurl2);\\n    let parUrl = pUrl.replace(pUrl.split(\\\"?\\\")[0],''); // 分割问号后剩余参数的完整链接\\n    let excKey = exceptKeys1.test(parUrl);\\n    if(rUrl.split('?').length>2){\\n        let rUrl3=rUrl.split(\\\"?\\\")[1];//获取?分割后的第一段\\n        hasKey = hasKey||videoKeys.test(rUrl3);\\n    }\\n    if(hasKey&&!excKey){\\n        let tips = '检测到疑似多媒体的地址:';\\n        print(\\\"js中\\\"+tips+pUrl);\\n        print(\\\"分割问号后:\\\"+parUrl);\\n    }\\n    // log('1:'+(videoKeys.test(pUrl)||videoKeys.test(pUrl2)||videoKeys.test(pUrl.replace(replaceKeys,\\\"\\\").split(\\\"&\\\")[0].split(\\\"?\\\")[0])));\\n    // log('2:'+!exceptKeys.test(pUrl.split(\\\"?\\\")[0].split('&')[0]));\\n    // log('3:'+!exceptKeys1.test(pUrl.replace(pUrl.split(\\\"?\\\")[0],'')));\\n    if ((hasKey||videoKeys.test(rUrl.replace(replaceKeys,\\\"\\\").split(\\\"&\\\")[0].split(\\\"?\\\")[0]) )&& !exceptKeys.test(pUrl2)&&!exceptKeys1.test(pUrl2)) {\\n        if(!(/User-Agent|Referer@/.test(playUrl))){\\n            if(/lecloud\\\\.com|bilivideo/.test(playUrl)){\\n                playUrl+=\\\";{Referer@https://www.bilibili.com/&&User-Agent@Mozilla/5.0}\\\";\\n            }else if(/ixigua\\\\.com/.test(playUrl)){\\n                playUrl+=\\\"#isvideo=true#;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\\\";\\n            }\\n            else if(/mgtv\\\\.com|byteamone/.test(playUrl)){\\n                playUrl+=\\\";{User-Agent@Mozilla/5.0}\\\";\\n            }else if(/ptwo\\\\.wkfile\\\\.com/.test(playUrl)&&/url=/.test(playUrl)){\\n                playUrl=playUrl.split(\\\"url=\\\")[1]+\\\";{Referer@https://fantuan.tv}\\\"\\n            }\\n            // 处理大师兄之类的app\\n            // else{\\n            //     playUrl+=\\\";{User-Agent@Mozilla/5.0}\\\";\\n            // }\\n        }\\n        playUrl=rechange(playUrl);\\n        if(!/#isVideo=true#/.test(playUrl)){\\n            playUrl+=\\\"#isVideo=true#\\\";\\n        }\\n        // let t2 = new Date().getTime();\\n        // print('判断isVideo耗时:'+(t2-t1));\\n        return playUrl;\\n    }else{\\n        // let t2 = new Date().getTime();\\n        // print('判断isVideo耗时:'+(t2-t1));\\n        return false;\\n    }\\n}\\nfunction comParse(parStr,ej,onlyback,html){\\n    //列表，标题，图片，描述，链接，内容\\n    ej = ej||false;//有二级\\n    onlyback=onlyback||false;//只返回数据\\n    html = html||getResCode();\\n    html = typeof(html)==='string'?html:html.html;\\n    return $.toString((parStr,ej,onlyback,html,isPic)=>{\\n        let t=parStr.split(\\\";\\\");\\n        let d=[];\\n        // let list=pdfa(getResCode(),t[0]);\\n        let list=pdfa(html,t[0]);\\n        let lazy = $('').lazyRule(()=>{\\n            const {lazyParse} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\\n            return lazyParse(input)\\n        });\\n        for(let i in list){\\n            let _pic = t[2]?pd(list[i],t[2]):'';\\n            if(isPic(_pic)&&!/@Referer=/.test(_pic)){\\n                _pic+='@Referer='\\n            }\\n            let it={\\n                title:pdfh(list[i],t[1]),\\n                pic_url:_pic,\\n                desc:pdfh(list[i],t[3]),\\n                url:ej?pd(list[i],t[4]):pd(list[i],t[4])+lazy\\n            };\\n            if(t.length>5){//内容，用于搜索\\n                it.content=pdfh(list[i],t[5])\\n            }\\n            d.push(it);\\n        }\\n        if(onlyback){\\n            return d\\n        }else{\\n            setResult(d)\\n        }\\n    },parStr,ej,onlyback,html,isPic)\\n}\\n\\nfunction isBadVideo(videoUrl) {//是坏的视频\\n    let dmPath = 'hiker://files/cache/diaomao.txt';//吊毛模式过滤文件路径\\n    let dmUrls;\\n    try {\\n        dmUrls = request(dmPath).trim().split('\\\\n').filter(it => it && !it.startsWith('//'));\\n    } catch (e) {\\n        dmUrls = [];\\n    }\\n\\n    function hasDm(videoUrl, dmUrls) {//播放地址是否为吊毛视频\\n        if (dmUrls.length < 1) {\\n            return false\\n        }\\n        function print(str){\\n            if(typeof(log)!=='undefined'){\\n                log(str);\\n            }else{\\n                fba.log(str);\\n            }\\n        }\\n        for (let dmUrl of dmUrls) {\\n            if ((new RegExp(dmUrl)).test(videoUrl)) {//播放地址包含吊毛标志的地址\\n                print('吊毛视频,自动过滤:'+videoUrl);\\n                return true\\n            }\\n        }\\n        print('非吊毛视频,可播放:'+videoUrl);\\n        return false\\n    }\\n\\n    function isDm(ret) {\\n        if (!ret) {\\n            return true\\n        }\\n        return hasDm(ret.split('#')[0].split(';')[0], dmUrls)\\n    }\\n    return isDm(videoUrl)\\n}\\n\\nfunction lazyParse(playUrl,ms,tm,rechange){\\n    // log('调用仓库免嗅探传参超时为:'+ms);\\n    tm = parseInt(tm)||5000;\\n    const {isVideo,getHeaders,isBadVideo} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\\n    let realUrl = isVideo(playUrl,rechange);\\n    //log(realUrl);\\n    if(typeof(realUrl)=='string'){//bool值就是失败\\n        try{\\n            let rurl=realUrl.split(\\\";\\\")[0].split(\\\"#\\\")[0];\\n            return JSON.parse(request(rurl,{timeout:tm})).url\\n        }catch(e){\\n            return realUrl\\n        }\\n        //return realUrl\\n    }\\n\\n    //log(\\\"访问超时:\\\"+tm);\\n    log(\\\"尝试道长仓库x5免嗅:\\\"+playUrl);\\n    clearVar(\\\"_x5jxUrl\\\");\\n    let bad=$(\\\"网络不佳或者疑似对方网站挂了，你要查看其网页吗？\\\").confirm((playUrl)=>{\\n        log(\\\"网站看起来挂了:\\\"+playUrl);\\n        return playUrl\\n    },playUrl);\\n    try{\\n        var back=request(playUrl,{headers: getHeaders(playUrl),timeout:tm});\\n        //var back=fetch(playUrl,{headers: {'User-Agent': PC_UA}});\\n        if(!back){\\n            log(\\\"网站\\\"+playUrl+\\\"确实啥也没返回\\\");\\n            return bad\\n        }else if(/#EXTINF/.test(back)){\\n            //let lcache=\\\"/storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/video.m3u8\\\";\\n            //writeFile(lcache,back);\\n            //return lcache+\\\"##\\\"+playUrl+\\\"#isVideo=true#\\\"\\n            playUrl=cacheM3u8(playUrl);\\n            return playUrl\\n        }else if((!/触发了防盗链|未授权|接口防盗/.test(back))&&(!/http|url/.test(back))&&(!/msg|code|html/.test(back))){\\n            log(back);\\n            return 'toast://疑似对方数据加密了，具体数据看日志'\\n        }\\n    }catch(e){\\n        log(e.message);\\n        return bad\\n    }\\n    try {\\n        back=JSON.parse(back);\\n        let realUrl=back.url;\\n        if(typeof(realUrl)==\\\"undefined\\\"||!realUrl){\\n            log(back);\\n            return \\\"toast://道长仓库解析失败！返回播放地址为空\\\"\\n        } else if(typeof(isVideo(realUrl,rechange))=='string'){\\n            return isVideo(realUrl,rechange);\\n        }else{\\n            return realUrl+\\\"#isVideo=true#\\\";\\n        }\\n        //else{\\n        //realUrl+=\\\";{User-Agent@Mozilla/5.0}\\\";\\n        // }\\n    }catch (e) {\\n        log(\\\"检测到解析口非json错误:\\\"+e.message+',开始x5免嗅探');\\n        // require('https://hjdhnx.coding.net/p/hiker/d/dr/git/raw/master/js/lsg.js');//引用本地储存插件\\n        const lsg=$.require(\\\"hiker://page/localStorage?rule=道长仓库Pro\\\");//引用子页面本地储存插件\\n        let local_ms = lsg.getItem('timeout');\\n        let ms = parseInt(ms)||parseInt(local_ms)||5000;\\n        let max_count=Math.ceil(ms/250);\\n        log(\\\"本次嗅探超时:\\\"+ms+\\\"共计待抓包:\\\"+max_count+\\\"次\\\");\\n        showLoading('嗅探中，若失败就切换web嗅探...');\\n        let _x5 = $.toString((isVideo,rechange,playUrl,max_count,PC_UA,isBadVideo)=>{\\n            try {\\n                if(typeof(fba)=='undefined'||!fba){\\n                    var fba = fy_bridge_app;\\n                }\\n                try {\\n                    if(typeof(request)=='undefined'||!request){\\n                        eval(fba.getInternalJs());\\n                    }\\n                }catch (e) {\\n                    fba.log(e.message);\\n                }\\n                fba.putVar(\\\"_x5jxUrl\\\",playUrl);\\n                if(window.count == null){\\n                    window.count=1;\\n                }\\n                let text='';\\n                try {\\n                    text=document.querySelector(\\\"body\\\").innerText;\\n                }catch (e) {fba.log(e.message)}\\n                if(/触发了防盗链|未授权|接口防盗/.test(text)&&window.count===1){\\n                    fba.log(\\\"检测到有授权，开始过授权\\\");\\n                    //location.reload();\\n                    location.href=fba.getVar(\\\"_x5jxUrl\\\");\\n                }\\n                window.count++;\\n                // fba.log('count:'+window.count+',max_count:'+max_count);\\n                if( window.count >= max_count){\\n                    fba.log(\\\"超过\\\"+max_count*250+\\\"毫秒未获取到资源地址，跳到源网页,以下是加载过的地址\\\");\\n                    try {\\n                        let text=document.querySelector(\\\"body\\\").innerText;\\n                        // fba.log(text);\\n                    }catch (e) {fba.log(e.message)}\\n                    fba.log(JSON.stringify(_getUrls()));\\n                    return fba.getVar(\\\"_x5jxUrl\\\");\\n                }\\n                function muteMe(elem) {\\n                    try {\\n                        elem.pause();\\n                    }\\n                    catch (e) {\\n                    }\\n                }\\n                var videos = document.querySelectorAll(\\\"video\\\"), audios = document.querySelectorAll(\\\"audio\\\"), v2 = document.querySelectorAll(\\\"embed\\\"), v3 = document.querySelectorAll(\\\"#player\\\");\\n                try {\\n                    [].forEach.call(videos, function (video) {\\n                        muteMe(video);\\n                    });\\n                } catch (e) {}\\n                try {\\n                    [].forEach.call(audios, function (audio) {\\n                        muteMe(audio);\\n                    });\\n                } catch (e) {}\\n                try {\\n                    [].forEach.call(v2, function (v) {\\n                        muteMe(v);\\n                    });\\n                } catch (e) {}\\n                try {\\n                    [].forEach.call(v3, function (v) {\\n                        muteMe(v);\\n                    });\\n                } catch (e) {}\\n                var urls = _getUrls();\\n                // fba.log(JSON.stringify(urls));\\n                try {\\n                    for(let i in urls) {\\n                        let u=urls[i];\\n                        try{u=decodeURIComponent(u);}catch(e){\\n                            u=unescape(u);\\n                        }\\n                        //\\n                        if(/url=http/.test(u)){\\n                            u = u.split(\\\"url=\\\").slice(-1)[0];\\n                            // fba.log(\\\"url分割:\\\"+u);\\n                        }else if(/url=\\\\//.test(u)&&/\\\\.m3u8/.test(u)){\\n                            let host = u.match(/(.*)\\\\/\\\\/(.*?)\\\\//)[0];\\n                            u = host+u.split(\\\"url=\\\").slice(-1)[0];\\n                            // fba.log(\\\"url分割:\\\"+u);\\n                        }\\n                        else if(/vid=http/.test(u)){\\n                            u = u.split(\\\"vid=\\\").slice(-1)[0];\\n                            fba.log(\\\"vid分割:\\\"+u);\\n                        }else if(/vid=\\\\//.test(u)&&/\\\\.m3u8/.test(u)){\\n                            let host = u.match(/(.*)\\\\/\\\\/(.*?)\\\\//)[0];\\n                            u = host+u.split(\\\"vid=\\\").slice(-1)[0];\\n                            fba.log(\\\"vid分割:\\\"+u);\\n                        }\\n                        else if(/\\\\?(.*)=http/.test(u)&&/\\\\.m3u8/.test(u)){\\n                            u = \\\"http\\\"+u.split(/\\\\?(.*)=http/).slice(-1)[0];\\n                            fba.log(\\\"其他分割:\\\"+u);\\n                        }\\n                        //|index\\\\.m3u8$\\n                        else if(/\\\\/1\\\\.m3u8/.test(u)){\\n                            continue;\\n                        }\\n                        u=u.replace(/&from=.*|&next=.*|&jump=.*/,'');\\n                        let realUrl = isVideo(u,rechange);\\n                        if(typeof(realUrl)=='string'&&!isBadVideo(u)){//过滤吊毛视频\\n                            //fy_bridge_app.setWebUa(PC_UA);\\n                            if(typeof(fba.getHeaderUrl)!=='undefined'&&typeof(rechange)!=='function'){\\n                                // let backUrl = fba.getHeaderUrl(u.replace(\\\";{\\\",\\\"#isVideo=true#;{\\\"));\\n                                let backUrl = fba.getHeaderUrl(urls[i]).replace(';{','#ignoreImg=true##isVideo=true#;{');\\n                                let u1 = backUrl.split('#ignoreImg')[0];\\n                                let u2 = '#ignoreImg'+backUrl.split('#ignoreImg')[1];\\n                                u1 = u1.replace(/&from=.*|&next=.*|&jump=.*/,'');\\n                                if(/url=http/.test(u1)){\\n                                    u1 = u1.split(\\\"url=\\\").slice(-1)[0];\\n                                }else if(/url=\\\\//.test(u1)&&/\\\\.m3u8/.test(u1)){\\n                                    let host1 = u1.match(/(.*)\\\\/\\\\/(.*?)\\\\//)[0];\\n                                    u1 = host1+u1.split(\\\"url=\\\").slice(-1)[0];\\n                                    // fba.log(\\\"url分割:\\\"+u);\\n                                }\\n                                else if(/vid=http/.test(u1)){\\n                                    u1 = u1.split(\\\"vid=\\\").slice(-1)[0];\\n                                }else if(/vid=\\\\//.test(u1)&&/\\\\.m3u8/.test(u1)){\\n                                    let host1 = u1.match(/(.*)\\\\/\\\\/(.*?)\\\\//)[0];\\n                                    u1 = host1+u1.split(\\\"vid=\\\").slice(-1)[0];\\n                                }\\n                                else if(/\\\\?(.*)=http/.test(u1)&&/\\\\.m3u8/.test(u1)){\\n                                    u1 = \\\"http\\\"+u1.split(/\\\\?(.*)=http/).slice(-1)[0];\\n                                }\\n                                backUrl = u1 + u2;\\n                                // fba.log('返回自动加cookie链接:'+backUrl);\\n                                fba.log('返回链接:'+u+'并自动加了cookie,具体cookie在视频播放处查看');\\n                                return backUrl;\\n                            }\\n                            else{\\n                                fba.log(\\\"返回仓库x5免嗅结果:\\\"+realUrl);\\n                                return realUrl\\n                            }\\n                        }\\n                    }\\n                }catch (e) {\\n                    fba.log(e.message)\\n                }\\n            }catch (e) {\\n                // fy_bridge_app.log('x5大范围错误:'+e.message);\\n                alert('x5大范围错误:'+e.message);\\n                return 'toast://报错结束x5'\\n            }\\n        },isVideo,rechange,playUrl,max_count,PC_UA,isBadVideo);\\n        let useWeb=lsg.getItem(\\\"通免\\\",\\\"X5\\\")===\\\"WEB\\\";\\n        //log(\\\"仓库使用web通免替代x5:\\\"+useWeb);\\n        let ruleHead=useWeb&&parseInt(getAppVersion())>=2339?\\\"webRule://\\\":\\\"x5Rule://\\\";\\n        let x5Url = ruleHead+playUrl+ '@' +_x5;\\n        return x5Url\\n    }\\n}\\n\\nfunction x5ParsePro(x5list,x5Timeout,isVideo){\\n    let bpath = 'file:///storage/emulated/0/Android/data/com.example.hikerview/files/Documents/rules/dzHouse/html/海阔嗅探器.html';\\n    let bcode = fetch(bpath);\\n    if(!bcode||!/fy_bridge_app/.test(bcode)){\\n        log('本地未安装嗅探器，开始安装');\\n        const {api} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n        let html = fetch(api.host+'/rulelist.json?id=2055');\\n        if(/海阔视界/.test(html)){\\n            writeFile(bpath,html);\\n        }else{\\n            writeFile(bpath,fetch('https://hjdhnx.coding.net/p/hiker/d/dr/git/raw/master/html/getVideo.html'))\\n        }\\n    }\\n    x5Timeout = parseInt(x5Timeout)||5000;\\n    let max_count=(x5Timeout/250); //根据超时自动计算了可执行的次数\\n    putVar('x5List',JSON.stringify(x5list));\\n    let _x5 = $.toString((isVideo, max_count,x5Timeout,isBadVideo) => {\\n        //初始化fba和requst\\n        if (typeof (fba) == 'undefined' || !fba) {\\n            var fba = fy_bridge_app;\\n        }\\n        try {\\n            if (typeof (request) == 'undefined' || !request) {\\n                eval(fba.getInternalJs());\\n            }\\n        } catch (e) {\\n            fba.log(e.message);\\n        }\\n        //------------------\\n        try {\\n            if (window.count == null) {\\n                window.count = 1;\\n            }\\n            let text='';\\n            try {\\n                text=document.querySelector(\\\"body\\\").innerText;\\n            }catch (e) {fba.log(e.message)}\\n            if(/触发了防盗链|未授权|接口防盗/.test(text)&&window.count==1){\\n                location.reload();\\n                fba.log(\\\"检测到有授权，开始过授权\\\");\\n            }\\n            window.count++;\\n            // fba.log('count:' + window.count + ',max_count:' + max_count);\\n            if (window.count >= max_count) {\\n                fba.clearVar('x5List');\\n                fba.hideLoading();\\n                let fmsg = '道长仓库通免解析失败,原因:超时'+x5Timeout+'毫秒';\\n                fba.log(fmsg);\\n                return 'toast://'+fmsg;\\n            }\\n        }catch (e) {\\n            fba.log(e.message);\\n        }\\n\\n        function muteMe(elem) {\\n            try {\\n                elem.pause();\\n            } catch (e) {\\n            }\\n        }\\n\\n        var videos = document.querySelectorAll(\\\"video\\\"), audios = document.querySelectorAll(\\\"audio\\\"),\\n            v2 = document.querySelectorAll(\\\"embed\\\"), v3 = document.querySelectorAll(\\\"#player\\\");\\n        try {\\n            [].forEach.call(videos, function (video) {\\n                muteMe(video);\\n            });\\n        } catch (e) {\\n        }\\n        try {\\n            [].forEach.call(audios, function (audio) {\\n                muteMe(audio);\\n            });\\n        } catch (e) {\\n        }\\n        try {\\n            [].forEach.call(v2, function (v) {\\n                muteMe(v);\\n            });\\n        } catch (e) {\\n        }\\n        try {\\n            [].forEach.call(v3, function (v) {\\n                muteMe(v);\\n            });\\n        } catch (e) {\\n        }\\n        var urls = _getUrls();\\n        try {\\n            for (let i in urls) {\\n                let u=urls[i];\\n                //u=decodeURIComponent(u);\\n                try{u=decodeURIComponent(u);}catch(e){\\n                    u=unescape(u);\\n                }\\n                if(/url=http/.test(u)){\\n                    u = u.split(\\\"url=\\\").slice(-1)[0];\\n                }else if(/vid=http/.test(u)){\\n                    u = u.split(\\\"vid=\\\").slice(-1)[0];\\n                }else if(/\\\\?(.*)=http/.test(u)){\\n                    u = \\\"http\\\"+u.split(/\\\\?(.*)=http/).slice(-1)[0];\\n                    //fba.log(\\\"其他分割:\\\"+u);\\n                }else if(/\\\\/1\\\\.m3u8$/.test(u)){\\n                    continue;\\n                }\\n                u=u.replace(/&from=.*|&next=.*|&jump=.*/,'');\\n                let realUrl = isVideo(u);\\n                if (realUrl&&!isBadVideo(u)) {//过滤吊毛\\n                    fba.log(\\\"仓库x5免嗅结果:\\\" + realUrl);\\n                    fba.clearVar('x5List');\\n                    return realUrl\\n                }\\n            }\\n        } catch (e) {\\n            fba.log(e.message)\\n        }\\n    }, isVideo, max_count,x5Timeout,isBadVideo);\\n    const lsg=$.require(\\\"hiker://page/localStorage?rule=道长仓库Pro\\\");\\n    let useWeb=lsg.getItem(\\\"通免\\\",\\\"X5\\\")===\\\"WEB\\\";\\n    //log(\\\"仓库使用web通免替代x5:\\\"+useWeb);\\n    let ruleHead=useWeb&&parseInt(getAppVersion())>=2339?\\\"webRule://\\\":\\\"x5Rule://\\\";\\n    return ruleHead+bpath+'@' + _x5;\\n}\\n\\nfunction LazyParseFast(playUrlList,getTimeout,x5Timeout){\\n    const {isVideo,getHeaders,x5ParsePro} = $.require('hiker://page/globalParse?rule=道长仓库Pro');\\n    // log('开始执行'+playUrlList.length+'个地址的批量嗅探:'+playUrlList);\\n    log('开始执行'+playUrlList.length+'个地址的批量嗅探');\\n    let playUrls = playUrlList.map((it)=>{\\n        return {\\n            url:it.split(\\\";\\\")[0],\\n            options: {\\n                headers: {\\n                    //\\\"User-Agent\\\": \\\"Dart/2.13 (dart:io)\\\",\\n                    \\\"User-Agent\\\":\\\"Mozilla/5.0\\\"\\n                },\\n                timeout: getTimeout\\n            }\\n        }\\n    });\\n    let bhtml = batchFetch(playUrls);\\n    let videos = [];\\n    let x5list = [];\\n    for(let i in bhtml){\\n        let order = parseInt(i)+1;\\n        let tname=order+'号解析网址:';\\n        //log(tname);\\n        let turl=playUrlList[i].split(\\\";\\\")[0];\\n        let jname=playUrlList[i].split(\\\";\\\").length>1?playUrlList[i].split(\\\";\\\")[1]:\\\"\\\";\\n        tname+=jname;\\n        let backcode = bhtml[i];\\n        if((!/url|http/.test(backcode))&&(!/#EXTINF/.test(backcode))){\\n            log(tname+turl+'有问题,可能加密或者挂了');\\n            continue;\\n        }else if(/#EXTINF/.test(backcode)){\\n            //let lcache=\\\"/storage/emulated/0/Android/data/com.example.hikerview/files/Documents/cache/video_\\\"+tname+\\\".m3u8\\\";\\n            //writeFile(lcache,backcode);\\n            //videos.push(lcache);\\n            let pUrl=cacheM3u8(turl);\\n            videos.push(pUrl);\\n            continue;\\n        }\\n        try {\\n            let url = JSON.parse(backcode).url;\\n            if(/^http/.test(url)){\\n                let realVideo = isVideo(url);\\n                if(typeof(realVideo)=='string'){\\n                    log(tname+'已解析出视频:'+realVideo);\\n                    if(jname){\\n                        realVideo+=\\\"★\\\"+jname\\n                    }\\n                    videos.push(realVideo);\\n                }else{\\n                    log(tname+'解析出不知道什么东西:'+url);\\n                    url+=\\\"#isVideo=true#\\\";\\n                    if(jname){\\n                        url+=\\\"★\\\"+jname\\n                    }\\n                    videos.push(url);\\n                }\\n            }else{\\n                log(tname+'为json接口且无返回视频地址数据:'+playUrlList[i]+'\\\\n'+backcode);\\n            }\\n        }catch (e) {\\n            log(tname+'为x5接口,加入x5嗅探列表');\\n            x5list.push(playUrlList[i]);\\n        }\\n    }\\n    // log(videos);\\n    if(videos.length>0){\\n        if(getVar('dp.cacheVideo','true')==='true'&&parseInt(getAppVersion())>=2255)\\n        {\\n            log(\\\"尊敬的魔断用户，视频缓存已启用，请尽情享受看剧时光\\\");\\n            let videosCache=videos.map((it)=>{\\n                let headers={};\\n                if(it.split(\\\";\\\").length>1){\\n                    let head = it.split(';')[1];\\n                    if(/@/.test(head)&&/{|}/.test(head)){\\n//head = head.replace(/{|}/g,'');\\n                        head = head.split(\\\"{\\\")[1].split(\\\"}\\\")[0];\\n                        head = head.split('&&');\\n                        for(let i in head){\\n                            let key = head[i].split('@')[0];\\n                            let value =head[i].split('@')[1].replace(/;/,'；；');\\n                            headers[key] = value;\\n                        }\\n                    }\\n                }\\n                return {\\n                    url:it.split(\\\";\\\")[0].split(\\\"★\\\")[0],\\n                    options:{\\n                        headers:headers\\n                    }\\n                }\\n            });\\n            var data=batchCacheM3u8(videosCache);\\n            data=data.map((it,id)=>{\\n                let extra=\\\"\\\";\\n                if(videos[id].split(\\\";\\\").length>1){\\n                    extra=\\\";\\\"+videos[id].split(\\\";\\\")[1];\\n                }else if(videos[id].split(\\\"★\\\").length>1){\\n                    extra=\\\"★\\\"+videos[id].split(\\\"★\\\")[1];\\n                }\\n\\n                if(it+\\\"\\\"!=\\\"null\\\"){\\n                    return it+extra\\n                }else{\\n                    return videos[id]\\n                }\\n            });\\n            //log(data);\\n            return data\\n            //return videos\\n        }else{\\n            return videos\\n        }\\n    }\\n    log('共有'+x5list.length+'个x5地址进行轮流嗅探');\\n    //没有的话就开始依次x5嗅探\\n    showLoading('嗅探中，若失败就切换web嗅探...');\\n    return x5ParsePro(x5list,x5Timeout,isVideo);\\n}\\nvar lazy=$('').lazyRule(()=>{\\n    try{\\n        realUrl=input;\\n        eval(\\\"var config_dp =\\\" + fetch(\\\"hiker://files/cache/MyParseSet.json\\\"));\\n        eval(fetch(config_dp.cj));\\n        log(input+'->正在断插魔改版解析...');\\n        // 加入超时设置，建议在首页设置\\n        return aytmParse(realUrl)\\n    }catch(e){\\n        return input\\n    }\\n});\\n$.exports.isPic=isPic;\\n$.exports.isVideo=isVideo;\\n$.exports.isBadVideo=isBadVideo;\\n$.exports.comParse=comParse;\\n$.exports.getHeaders=getHeaders;\\n$.exports.lazyParse=lazyParse;\\n$.exports.x5ParsePro=x5ParsePro;\\n$.exports.LazyParseFast=LazyParseFast;\\n$.exports.lazy=lazy;\"},{\"name\":\"任务仓库接口\",\"path\":\"taskCall\",\"rule\":\"js:\\nString.prototype.strip = function () { return this.replace(/(^\\\\s*)|(\\\\s*$)/g, \\\"\\\"); };\\nfunction task_req(task_api,task) { // 通用发送仓库post调用任务请求\\n    const {getFile} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let houseFile = getFile||false;\\n    if(!houseFile){\\n        setItem('is_house_vip', 'false');\\n    }\\n    let house_data = houseFile();\\n    let result = request(task_api, {\\n        headers: {\\n            'content-type': 'application/json'\\n        },\\n        body: JSON.stringify({\\n            \\\"params\\\": {\\n                \\\"data\\\": {\\n                    \\\"type\\\": task.mode||'run',\\n                    \\\"func\\\": task.func||'',\\n                    \\\"params\\\": task.params||[]\\n                },\\n                \\\"auth\\\": {\\n                    \\\"name\\\": house_data.username||\\\"\\\",\\n                    \\\"password\\\": house_data.password||\\\"\\\"\\n                }\\n            }\\n        }),\\n        method: 'POST'\\n    });\\n    return JSON.parse(result).result;\\n}\\n\\nfunction task_upload(task){ // 通用任务发布新增及修改功能\\n    const {api,getFile} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let houseFile = getFile||false;\\n    if(!houseFile){\\n        setItem('is_house_vip', 'false');\\n    }\\n    let api_url = api.host+'/hikerule/task/add';\\n    let house_data = houseFile();\\n    let result = request(api_url, {\\n        headers: {\\n            'content-type': 'application/json'\\n        },\\n        body: JSON.stringify({\\n            \\\"params\\\": {\\n                \\\"data\\\": {\\n                    \\\"name\\\": task.name,\\n                    \\\"pycode\\\": task.pycode,\\n                    \\\"note\\\": task.note,\\n                    \\\"test_code\\\": task.test_code,\\n                },\\n                \\\"auth\\\": {\\n                    \\\"name\\\": house_data.username||\\\"\\\",\\n                    \\\"password\\\": house_data.password||\\\"\\\"\\n                }\\n            }\\n        }),\\n        method: 'POST'\\n    });\\n    return JSON.parse(result).result;\\n}\\n\\nfunction task_call(id,func,params){\\n    const {api} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let task_api = api.host+'/hikerule/task/run/'+id;\\n    let task = {\\n        mode:'call',\\n        func:func,\\n        params:params||[]\\n    };\\n    return task_req(task_api,task);\\n}\\n\\nfunction task_rename(id,new_task_name){\\n    const {api,getFile} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let houseFile = getFile||false;\\n    if(!houseFile){\\n        setItem('is_house_vip', 'false');\\n    }\\n    let house_data = houseFile();\\n    let task_api = api.host+'/hikerule/task/rename/'+id;\\n    task_api = task_api+'?name='+house_data.username+'&password='+house_data.password+'&task_name='+new_task_name;\\n    try {\\n        let result = JSON.parse(fetch(task_api,{}));\\n        if(result.status==0){\\n            return  result.detail\\n        }else{\\n            return result.result+''+result.detail\\n        }\\n    }catch (e) {\\n        log(e.message);\\n        return ''+e.message\\n    }\\n}\\n\\nfunction task_change_state(id){\\n    const {api,getFile} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let houseFile = getFile||false;\\n    if(!houseFile){\\n        setItem('is_house_vip', 'false');\\n    }\\n    let house_data = houseFile();\\n    let task_api = api.host+'/hikerule/task/change_state/'+id;\\n    task_api = task_api+'?name='+house_data.username+'&password='+house_data.password;\\n    try {\\n        let result = JSON.parse(fetch(task_api,{}));\\n        if(result.status==0){\\n            return  result.detail\\n        }else{\\n            return result.result+''+result.detail\\n        }\\n    }catch (e) {\\n        log(e.message);\\n        return ''+e.message\\n    }\\n}\\n\\nfunction task_run(id){\\n    const {api} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n    let task_api = api.host+'/hikerule/task/run/'+id;\\n    let task = {};\\n    return task_req(task_api,task);\\n}\\n\\n$.exports.taskCall = task_call;\\n$.exports.taskRun = task_run;\\n$.exports.taskReq = task_req;\\n$.exports.taskUpload = task_upload;\\n$.exports.taskRename = task_rename;\\n$.exports.taskChangeState = task_change_state;\"},{\"col_type\":\"movie_3\",\"name\":\"全局储存\",\"path\":\"localStorage\",\"rule\":\"let localStorage = (function() {\\n    evalPrivateJS(\\\"jwUKwNTiPGcWSLCXB5XtAXwb6LQbVyHD+0XJ7l07ce0=\\\");\\n    //pathto=undefined;\\n    evalPrivateJS(\\\"4C0YxRYnGCYkgFRXtpl/Cz5zL5hh4jCCztb+ng+WokymQ8oUrzS9lA8yxC5aFadnSEmyHKMbraflRqXCnNRHDlk6ue8yHTO16lBPrpwgs5jf0PhrAtoTJIE0ZHn9mKaQ4Jd2erqb4I55beWIeugKsDs211SzINQ5yJgSh1dVuNzzxRGJg40FmTuVmXVfN1xg2WIGHBEmkVnGxmORhPONA+Q5VwPmdp41/hze3eIsUvho7VCBgK4raJmPalIRBBVlCVgn8FkWmfKqZo+VW+oBcH7hrcrsSlCSjBangT/7syWHxKYhehU0kaMYjnWFg1Em0cmNRtomCsHz1B8q32OeQHoawdWxzKOaMHOXDBjRojA8E/ah0WROyziqRSxl/m8dhBd0f9phYz/5SU/zJD52X/9EC16WVVdpSW33akRHRslPpRlTWF9+AyRmRw0eZOEs1o9QMPAQUfAxbYyFHgztw/O2dJRpHyTmiBiaaqTcivx6v9zyvBz04wI1AaSCui+dTuU3lu5xdEt3Ajt6Z3iDXOVcEP0EDF7474PQU6JEZuwe97Sch4bi1wB1XHZSfItdlYYoGed3LLpbmDAIRciv0rAop8VmQcTt2K3Lfh1RDYY0YtvRcH49OvpDRH/xa5Fc8MY3DrFoA7qcoF4eCgiVBfBgJR68+LpQK7tOkg8k9ec+3NSxJThcl8d6yNwxT9Tk17zeJgd6MoyYZIpWQLlF6YvbOdEWhjmnA78wC0hWz+Xm6hQMSqtFw+bhFf7cBGU3aatPFmdCY2EdXfh0IYW85wdOyMfiwW7/vVTp9iE00I3F09wGHkGKhVbLueAkYe7zzJXR7thaFor6H7qLmJjbRQk9evNtBQXNR7DifiXuQf2lt7nOH80SWm1fDHHzjmPsNIps2TXGT+iwVV69g/tWipVQ6D8BTx+cCQp47nmTIrY+qN4kh2FYh5LlwXdgIyy1VIuC3x053ewAIIUmlY9niEpqYt+1fFPXOCtCGtYbSd37vVR1EOj2k5Gu/+9JWg2qvwl1twelg1J0txarIi4kTbTrvrnFLN92pofpZQUfoWo4ce7HWNdbu4JKEraLQUfdfGEPd1TIufuuRVa39eq9GZySDuBL60MPdldxKw1zo+fB5ZY+YMj3LL2gGtDbs98+AsRV9LJWmUmsx91hmJtFUMWD3xnj8HMZWs0NPlCFUr9485KqTpo5kRzGfF+k/Nl2Jzrv5cvkqtUnLgKpXEOj/se/oDzOArQKI5TNUbvYwcwcdjjMSfjK68Krwhs+n6SmWZ4ZdgRHgAK5MoFi3XmLV47P3vSRWu5zyEsMk4y3uuCFiuRPRlu4Q5pJvuOem7H7ULiIhCemv5DgkGtDL1cGL4EQhYRB6ISzVvsb2EaP9wQE6DVRnM7O+pnSzet6lzp3pFdGnbox1LRfC60utXZ+CjIm4iEMmtbB2N5zDShGbeM3XUbJQdCBis8XIrhh2biB5hBCVwn3Y3ett7GDPVtoi1GRjz+JbgM+YR928KbdWS5tFaMM3Kj3Xv6otIxzMBnDC9uW3d+IXx6vLPJ0JRuh3yP7pTla6c3iR4p9nWYDqJ+ZSmprHFnDOzsLWmFjapje/MqwMJd6Tk3nAWwicMOPuYpMyqIF04fl4mqgtsHLSMWRRNHPZjETQ9gRmeDYe6aRtlW02qL2olDENqLQMtAdoirNWRcP9VL3Td8HaUO6fSlGNabMakJD/00XChOSUOIP+7fM7V0/l1bLWPtEz1i7LygTV7pdGoDntqSCEnJrByhBAzLRg5QIc9438IhKmyfn0/3awoD1Ir780eyp/XcI6xNcw6Tv/ETfHg0e7iYC0UYcJIE5QUXv0s+YoGIEq5GIzKub8HNjSTUpsvnkVx+dbe2jRn3Yb9W7JCZ5YS6F5MyUVspjMD7NYc+DWjUL2b2sVyAfeYpC8Uhah9tumavbBv7a3a9kgFbq58lrHxzY7iJQVigzq3e1a2BSb0PcW1aJ8BD7NkNphKYayTxykgwilERL8jqqBEniHVdBxDJYLb+Xw3alLmltuTEV6KGtBntBX+yz36RPDMyGIKe+3fzcxfnCDn20ModVVkVNozPqMXZ0G5L4aLTAQakYKUjsVMQjAhQkTlHBeO/aLPx9sxl++j1Z5rLgG12TN4XJ1eicvw4AVE58Loraq0QiE0cS7PH1pbrZWrft7LYGiyBShor7+0jioUh1pdWq2qMYLqeMEeuCROQt57mFrOjyPH49qp97cWOrgeg2WyfWSDGQPje5+P0yQoCpD/D3RAMuWmb9wlBtcq2j8WJPt91E3kKawuQIyvd2r2Ujx4+HTNtVKb9kMLOO85I65bNGBH+4irSy5gQYlE26A2cSGIcLKQRlvJoMna7L/9wyry4HzOrzkrAvLdgsSNlYjpHQERiOI80sJ5jNCCnfw013F+A+sAfLmyS/BDLNQ1qaQ3p6h8/JqAfhX5OGHgSiRVOCEjuaDB/MwZNCu3QL9ehhoAj7uOf8Pkr3mIjbhh9Hijsjx191+0e2JQrFa01AVJKEVtuPtIc2h/1pPKMvyenxjTO2OxPnjjt+84nIKKhxDJ/ghPt7iv8PmTJ0lKKyPRssl8f/QdHdxupb6jTsI6UKmz9Y46PMBuD6P3wh8qp36O6oibNDiQd1sE10vJh9z1FysKIe8EqMpnNdEmG2TfEBxRpmQrhKEqee0p6+a6sQo8cVlRJkKQAYKawcaNES5Xc6dQY5nqeiq8sUizf1spfHeHelDu1M6BRXuCjFafXhz8i3lPWgYqVpfx13igVCRf47UH652yLnsmepCBWgyBTWAcOyF1Qx8YGtZnob1TN+6xEwzpcWVy7QO9P92sKA9SK+/NHsqf13COt0JHCtTV1OlTQW+JAKyxe1Hl7+s95z3KCgFKQS+3As1JV7Na+g+LCR2Ievu8d5D0L7GwoDreUv4374LRaFkNsHOqWbU9nhQjdMVr7a/i8O/4hbptaSzqqkgYFiNFU/omW5qwIz7sp4nscITRE3gua6bzklMZ8ECn1iqAWt0a6geki5DaL8qYapTCChjlWsExqFuxiWP35TUCddEd8ACbMGs+gQFyDOozfBDG17dZO0mCwW+PzCL2jbICDNai5/jm1Qr6ML56jzUaIDz0GLPTSaex1UDDwkQ9o7mXWC0R7jWnzbkHRWcomVbWmGqL1rjdoacs/R9ujqUuBA6A5VL/qkQ1xHL42EXooprC8wrrfR68zMMFxOwU7CYHJ7bhG/Q4rNsXDBcMo1Adiq9LXbXm/QJj0u/jgZGssz0nnKKUFJcxzuANK96zWwf1DXasUcOoEuEatm1rmP5wrBJmW/ZwT6aBBiR2OSJ0xr8tQ6ObmdKjyb+1eEXb1437R2IdhDUdk5PRztH2YFt2pmuL4/LmILFAvPdiyMtDHNj+Kh4sV4MlXbWPrrI97YBOFpFlX+gnewKKfFZkHE7dity34dUQ2Gne6sAGx1zxyjZv5KBM26lRHF45XqFNJ1RQ3hMymJHsyYNsMO41BWrGv19PA468ecw9HcRN0whjUTgns8ZVaC4hiJsgY07aAEBHm90/uhhjO/Wmb7wuVadhl9RnHeQjpx4gwCrLz5i5s5It1sBwfDb0Fe+PCpLkc+wIINK2Y86kPthR6gJwW75zuoN5C0CAiDwfU73vaAZahzf4VLNlM0U04OtHYBi13YgPoNmGHRelZVEy2KuKVZghD14vSlY+JrMBDdm2y2thFV+BrihL7+fQ5wcYnxGelawDuoSR5+bDDkr6RL40L4xyfAhxlrOn0uA28ghGeWguaWKEv5nBrrveu1ueVy1MvGUYBY+IlEr8NdDNRdmEzXt39kGld86xOfAH/xL1VmugaXOGaPB2qc7WDRkW6k5F6n3PkIzdPXyONKp1DkOg3ocSMZMTs6GKj9C3vODZ6ZQpwNDYLMT+CmEL18GRjXNcZlP/LnhiAIscYTL1+iHWDYvRmvPMwtOHhCnEXIU3FTbP+6QRGA6qydbnneqVhXowcLmbMIz16IC1kwhZj75/M53sKYX2zRgOSTAfNSD/5lZYSNUxJfKTDgiaFEggrCrd+3Cc+chzslI3zDXEKTrvlcX2InC9uH+fsypyHw+AvY2OmBGQMIIc8fE3tNO0gBTVqXsdsE76YwHr29dzQckusuyJsBfSVclrvsNCZ1PQDL8H3cRs3HE9nUkx5bbJYWsPxb825gnEpWU9Z9Ktzvsli7/heOlDKpHxJb1uCrWqf8gRnWmq3zfSSrUXBHSLu62MrkXTjWgapUVxMGkrnzR0E4PMy1bFcyDpEQe15TayWBM1B6jrIG+0DRR9OaCUPwD7exNmjZb9M81us+AIRfyzJPZGmfHuT9SNzFfNuQdFZyiZVtaYaovWuN2irI3zQatKCDnQIXpr0VhG0Gop8c/zroWBoN/aVKmn8skSFvADOjoZAixg6K1y9wFi8peCmimFZ3ZzCVsG6EU9Svlbq5+wn7D6y+dAYdaPms4gwCrLz5i5s5It1sBwfDbz4X4VxqIpcTC9NaYKqA7GKK+aTrZWUwwN21QOtr8eqxSgJ1U9eCOcWXQd+p36Gy4fY+t9c2CsVNbNl1ghxa9bI8U6e6FTd/vvBaq9jrKditq4mNCaiogmfPK6M48UYI8jZMCdd/9C8BqvUj4bYU5byWASEG6BBGdK8Klfi/a4LWt3ivC4u9QBTfb/vCmNJi/QAfabcPG+UsWmsYNRK+g8hMcsuBmhh48NphRvebVQqq6ncKxc1nFHWMW5M6of+z8c1HddnieDP9GaBsq+ysljKslYrt989PY9xsbmkr3X/oCfiFU4NfcOhee++ngW0XpZAVt1I2Qnc1alwbnoNqMMhXIB95ikLxSFqH226Zq9sG/trdr2SAVurnyWsfHNjuIlBWKDOrd7VrYFJvQ9xbVomKqQjuh9dzf2nvVrBzbEF0CZY6izkY/RQY5r9k93/y2NG7o07nMYjOtZYYeNUoik7GbK/HzQl1S7s/FChnt9M6fE0UyuPmttO98hqzxQbteMalMtSce2WLcjyXVGfpqdBkYym4gZByccS6antt4oLdluWSSJsHX1IcXhQy6oJ+Ahjw9hFYwXLHPLoCo3jEliUAK4179wtYtHsO0abLx4+hmtM5Fz7wUVahBA9supOTf/FD4siZMMof5W3vm5DedhqGANlht3mI6RmIhv48QVtneMsUzYC4NDhZD4M5R6p7GXBqcpu3FaEF/0I0e3LceX1HN+iDqKRPuGzvpac/1tsGPIteADxu9OYoap2z3F1CzSg/Uua8l/KEztAKDcvbhNU/YUc2lhgxgfdb4e+P9TZ7RaX82s627u0CbFsfGE/1hLpb5Mc2vk1uDGrdIcbWA6xhpYAHYhEYUl9c75Y/R/0gl6r9+m6cI0BvBY5Aa5NBRc6UMvsO/POw5Ccr79sJziceaV3YwrYEkjp6Ki+OYrGu954AA+dJ9WsvNGBFGMrKAfQ9VUC/ATkJfTloMltDeV5Ao9zkaay3dKAa5/PxAGRDAUcQLDF7uVXbD1vFgE/+RXiwzS5N7cr3aFBdRY7XAmFz/fb0/KSpR8CQ/lokpmM2mltJ9vGPgiqb5nZl9Ku7d2GlgAdiERhSX1zvlj9H/SBujBPoO1fpoOu5F35cdHa5kSFvADOjoZAixg6K1y9wFlj0Ez5ksUW3WU63E7e4qtDUCKWwjjU5f0Fd57VyVzpC6CdCScBjYSzT9rZLVskq61aOWrDDUNKqAQ3+nX/BBW3cQTEcOVdc15ngVXcSS/aK2QFMdiKQlqm15fErJdwqyeza7hflKTiCzUdu5VGlFW9qCt8syHoosA2NzfosJdTdN8bWHnoDr5N25et+p/nvjjOzZRaLYoY/fr/k5hqptOk=\\\");\\n    return $.exports;\\n})();\"},{\"col_type\":\"movie_3\",\"name\":\"编辑公告\",\"path\":\"devInfoEdit\",\"rule\":\"js:\\naddListener('onClose', $.toString(()=>{\\n    putMyVar(\\\"devInfo\\\",''); //清除历史公告\\n}));\\nsetPageTitle('编辑公告');\\n// let {nowJx,MyJiexi,jxsRoute} = MY_PARAMS;\\nconst {color,small,api, getFile,getApi} = $.require(\\\"hiker://page/utiliy\\\");\\n// let houseFile = getFile||false;\\nvar dev_info_url = getApi('infoGetUrl');\\n// log(dev_info_url);\\nvar get_info = function(qq){\\n    qq = qq||'434857005';\\n    let dev_info_url = dev_info_url+qq;\\n    let back_code = JSON.parse(request(dev_info_url));\\n    let dev_info=back_code.result||back_code.detail;\\n    return dev_info;\\n};\\nvar before_refresh = function(){\\n    let dev_set_info = getMyVar(\\\"dev_set_info\\\").split('$$');\\n    let dev_info_url = dev_set_info.slice(-1)[0];\\n    let back_code = JSON.parse(request(dev_info_url));\\n    let dev_info=back_code.result||back_code.detail;\\n    putMyVar(\\\"devInfo\\\",dev_info);\\n    return dev_info\\n};\\nlet d = [];\\nd.push({\\n    title:'编辑公告',\\n    desc:'支持md语法,点击进入学习Md语法\\\\n保存公告按钮在文本框最下面',\\n    col_type:'text_1',\\n    url:'https://www.runoob.com/markdown/md-tutorial.html'\\n});\\nd.push({\\n    title:'返回',\\n    col_type:'text_2',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        back(false);\\n        return 'hiker://empty'\\n    })\\n});\\nif(!getMyVar('devInfo')){\\n    before_refresh();\\n}\\nlet empty = 'hiker://empty';\\nd.push({\\n    title:'阅览查阅',\\n    col_type:'text_2',\\n    // url:$(getMyVar('devInfo')).confirm()\\n    url:$(empty).rule(()=>{\\n        require(\\\"https://gitlab.com/hjdhnx/hiker/-/raw/main/js/marked.min.js\\\");\\n       let devInfo=\\\"\\\";\\n       try{\\n          devInfo=marked.parse(getMyVar('devInfo'));\\n       }catch(e){}\\n        setResult([\\n            {\\n                title:devInfo,\\n                col_type:'rich_text',\\n            }\\n        ]);\\n    })\\n});\\nd.push({\\n    desc: \\\"快来编辑你的公告吧~\\\",\\n    col_type: 'input',\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: getMyVar('devInfo', '')||\\\"\\\",\\n        type: \\\"textarea\\\",\\n        height:-1,\\n        onChange: 'putMyVar(\\\"devInfo\\\",input)'\\n    }\\n});\\nd.push({\\n    title:\\\"保存公告\\\",\\n    col_type: 'text_center_1',\\n    url:$('确认保存公告吗？将会与道长仓库服务器通讯').confirm(()=>{\\n        let dev_set_info = getMyVar(\\\"dev_set_info\\\").split('$$');\\n        let input_text = getMyVar('devInfo', '');\\n        if(input_text.length >= 4){\\n            let info_set_url= dev_set_info[2];\\n            let send_data = {\\\"params\\\":\\n                    {\\\"data\\\": {\\\"info\\\": input_text},\\n                        \\\"name\\\": dev_set_info[0],\\n                        \\\"password\\\": dev_set_info[1]}\\n            };\\n            // log(send_data);\\n            let par2 = {headers:{'content-type':'application/json;charset=UTF-8','User-Agent':dev_set_info[3]},body:JSON.stringify(send_data),method:'POST'};\\n            // par2 = JSON.stringify(par2); //x5里面请求才需要编码\\n            try {\\n                let back_ret = request(info_set_url, par2);\\n                back_ret = JSON.parse(back_ret).result;\\n                if(back_ret.status===0){\\n                    // refreshPage();\\n                    return 'toast://保存成功\\\\n'+back_ret.detail;\\n                }else{\\n                    return 'toast://保存失败\\\\n'+back_ret.detail;\\n                }\\n            }catch (e) {\\n                return 'toast://错误\\\\n'+e.message;\\n            }\\n        }else{\\n            confirm({title:'道长提示',content:'虽然你很懒，但是公告至少写4个字吧！'});\\n            return 'hiker://empty'\\n        }\\n    })\\n});\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"预处理依赖文件\",\"path\":\"libs\",\"rule\":\"if(getAppVersion()>=3200){\\n  try{\\n  rc(\\\"hiker://files/rules/js/$hiker.js\\\", -1);\\n  //$.setRoot('https://hjdhnx.coding.net/public/hiker/hiker/git/files/master/js/');\\n  $.setRoot();\\n  $.setLib({\\n    lsg: \\\"lsg.js\\\", //本地储存\\n    file: \\\"file.js\\\", //文件os\\n    fileSelect: \\\"fileSelect.js\\\", //文件选择器\\n    dt: \\\"dt.js\\\", //动态分类\\n    dr: \\\"dr.js\\\", //dr模板依赖\\n    drpre: \\\"drpre.js\\\", //dr模板预处理\\n    drup: \\\"drup.js\\\", //dr模板自动更新\\n    drmatch: \\\"drmatch.js\\\", //dr模板自动模板匹配\\n    drm: \\\"drm.js\\\", //dr模板小程序\\n    cms: \\\"cms.js\\\", //cms模板依赖\\n    cmspre: \\\"cmspre.js\\\", //cms预处理\\n    cmsm: \\\"cmsm.js\\\", //cms模板小程序\\n    libcheck: \\\"libcheck.js\\\", //dr检测依赖\\n    ruleEditor: \\\"ruleEditor.js\\\", //写页源神器小程序\\n    houseLazy: \\\"houseLazy.js\\\", //仓库通免\\n    lazy: \\\"lazy.js\\\", //香免\\n    sub: \\\"sub.js\\\", //道德经订阅\\n    hikerUi: \\\"hikerUi.js\\\", //海阔组件依赖\\n  });\\n  }catch(e){\\n      //toast('请尝试点击仓库主页的升级仓库旁边的按钮升级$扩展，否则某些功能不能正常使用');\\n      confirm({\\n          title: '提示-点击确定可以导入',\\n          content: '请尝试点击仓库主页的升级仓库旁边的按钮升级$扩展，否则某些功能不能正常使用',\\n          confirm: $.toString(()=>{\\n              const {getApi} = $.require(\\\"hiker://page/utiliy?rule=道长仓库Pro\\\");\\n              let ruleHead = '海阔视界，网页插件￥js_url￥$hiker@';\\n              let url = getApi('importUrl')+\\\"5111\\\";\\n              let importUrl = 'rule://'+base64Encode(ruleHead+url);\\n              return importUrl\\n          }),\\n          cancel: $.toString(()=>{\\n              \\n          }),\\n      })\\n  }\\n}\"}]","proxy":"","icon":"https://lanmeiguojiang.com/tubiao/other/30.svg"},{"last_chapter_rule":"","title":"期刊杂志demo","author":"Joker","version":6,"type":"read","url":"hiker://empty##fypage","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\nlet now = getItem('now', '推荐期刊');\nif (MY_PAGE == 1) {\n    let arr = ['推荐期刊', '热门期刊', '直播', '收藏'];\n    for (let it of arr) {\n        d.push({\n            title: now == it ? '““””' + it.fontcolor('red') : it,\n            col_type: 'scroll_button',\n            url: $('#noLoading#').lazyRule((it) => {\n                setItem(\"now\", it);\n                refreshPage();\n                return 'hiker://empty';\n            }, it)\n        })\n    }\n    d.push({\n        title: '规则设置',\n        col_type: 'scroll_button',\n        url: 'hiker://page/setting'\n    });\n}\nif (now == '直播') {\n    eval(JSON.parse(fetch(\"hiker://page/getHeaders\")).rule);\n    let zb_list = JSON.parse(request(\"https://api.lifves.com/magazine/source\", {\n            headers: headers\n        })).data_list.live_source_list,\n        select_list = zb_list.select_list,\n        source_list = zb_list.source_list,\n        select_zb = getItem('select_zb', select_list[0].value);\n    if (MY_PAGE == 1) {\n        d.push({\n            col_type: \"blank_block\"\n        });\n        for (let obj of select_list) {\n            d.push({\n                title: obj.value == select_zb ? '““””' + obj.label.fontcolor('red') : obj.label,\n                url: $('#noLoading#').lazyRule((e) => {\n                    setItem('select_zb', e);\n                    refreshPage();\n                    return 'hiker://empty'\n                }, obj.value),\n                col_type: \"scroll_button\"\n            });\n        }\n        for (let it of source_list[select_zb].list) {\n            d.push({\n                title: it.title,\n                url: $().lazyRule((tag) => {\n                    eval(JSON.parse(fetch(\"hiker://page/getHeaders\")).rule);\n                    let list = JSON.parse(request('http://api.lifves.com/video/getLiveSourceLink?tag=' + tag, {\n                            headers: headers\n                        })).data_list,\n                        urls = list.map(v => v.href);\n                    return JSON.stringify({\n                        urls: urls\n                    });\n                }, it.tag),\n                col_type: \"icon_4_card\",\n                desc: it.sub_title,\n                pic_url: it.img\n            });\n        }\n    }\n} else if (now == '推荐期刊' || now == '热门期刊') {\n    eval(JSON.parse(fetch(\"hiker://page/getHeaders\")).rule);\n    let category_id = now == \"推荐期刊\" ? 0 : 1,\n        qk_list = JSON.parse(request(\"https://api.lifves.com/magazine/more?category_id=\" + category_id + \"&page=\" + MY_PAGE, {\n            headers: headers\n        })).data_list;\n    for (let i in qk_list) {\n        let it = qk_list[i];\n        d.push({\n            title: it.title,\n            desc: it.qishu,\n            img: it.img,\n            col_type: 'movie_3',\n            url: 'hiker://page/catalogue#immersiveTheme#',\n            extra: {\n                href: 'https://api.lifves.com/magazine/book?mag_id=' + it.mag_id + '&qishu=' + it.qishu,\n            }\n        });\n    }\n} else if (now == '收藏') {\n    if (MY_PAGE == 1) {\n        let collection = JSON.parse(readFile('collection') || '{}');\n        for (let i in collection) {\n            let it = collection[i];\n            d.push({\n                title: i,\n                col_type: 'movie_3',\n                img: it.img,\n                url: 'hiker://page/history',\n                extra: {\n                    href: it.url,\n                    title: i,\n                    img: it.img\n                }\n            })\n        }\n    }\n}\nsetResult(d);","searchFind":"js:\nlet d = [];\neval(JSON.parse(fetch(\"hiker://page/getHeaders\")).rule);\nlet qk_list = JSON.parse(request(\"https://api.lifves.com/magazine/search?keyword=\" + MY_URL.split(\"##\")[1], {\n    headers: headers\n})).data_list;\nfor (let i in qk_list) {\n    let it = qk_list[i];\n    d.push({\n        title: it.title,\n        desc: it.qishu,\n        img: it.img,\n        col_type: 'movie_3',\n        url: 'hiker://page/catalogue#immersiveTheme#',\n        extra: {\n            href: 'https://api.lifves.com/magazine/book?mag_id=' + it.mag_id + '&qishu=' + it.qishu,\n        }\n    });\n}\nsetResult(d);","search_url":"hiker://empty##**","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"目录\",\"path\":\"catalogue\",\"rule\":\"js:\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet readTheme = getItem('readTheme', 'false') == 'true' ? '#readTheme#' : '',\\n    fullTheme = getItem('fullTheme', 'true') == 'true' ? '#fullTheme#' : '',\\n    url = MY_PARAMS.href,\\n    data_list = JSON.parse(request(url, {\\n        headers: headers\\n    })).data_list;\\n\\nlet d = [];\\nd.push({\\n    title: data_list.title + \\\"\\\\n\\\" + data_list.qishu,\\n    desc: \\\"““””\\\" + \\\"点我查看往期期刊\\\".bold().big(),\\n    img: data_list.img,\\n    col_type: 'movie_1_vertical_pic_blur',\\n    url: \\\"hiker://page/history\\\",\\n    extra: {\\n        href: \\\"https://api.lifves.com/magazine/history?mag_id=\\\" + data_list.mag_id,\\n        title: data_list.title,\\n        img: data_list.img\\n    }\\n})\\nd.push({\\n    title: '目录'.big().bold(),\\n    col_type: 'rich_text'\\n})\\n\\nlet stroge = {};\\nfor (let i in data_list.ml) {\\n    let list = data_list.ml[i].list;\\n    for (let j in list) {\\n        stroge[list[j].title] = \\\"https://api.lifves.com/magazine/read?read_id=\\\" + list[j].read_id;\\n    }\\n}\\nsaveFile('stroge', JSON.stringify(stroge));\\nlet star = Object.keys(stroge);\\n\\nfor (let i in data_list.ml) {\\n    let item = data_list.ml[i];\\n    d.push({\\n        title: '““””<strong>▶' + item.title + '</strong>',\\n        col_type: 'text_1',\\n        url: \\\"hiker://empty\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n\\n    item.list.forEach(e => {\\n        let index = star.indexOf(e.title);\\n        d.push({\\n            title: '““””&nbsp;&nbsp;&nbsp;&nbsp;•' + e.title,\\n            col_type: 'text_1',\\n            url: 'hiker://page/text' + fullTheme + readTheme,\\n            extra: {\\n                lineVisible: false,\\n                href: \\\"https://api.lifves.com/magazine/read?read_id=\\\" + e.read_id,\\n                index: index\\n            }\\n        })\\n    })\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"获取请求头\",\"path\":\"getHeaders\",\"rule\":\" function random_char(t) {\\n     for (var n = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], i = '', e = 0; e < t; e++) {\\n         var o = Math.ceil(35 * Math.random())\\n         i += n[o]\\n     }\\n     return i\\n }\\n\\n function getSecretdate() {\\n     var t = parseInt((new Date()).getTime() / 1e3)\\n     var n = random_char(32)\\n     var i = 'timestamp=' + t + '&nonce=' + n\\n     return i\\n }\\n\\n\\n var secretdate = getSecretdate()\\n var secreted = md5(secretdate + 'apilifves5201314')\\n\\n var headers = {\\n     'Secret-Date': secretdate,\\n     'Secreted': secreted,\\n     \\\"Content-Type\\\": \\\"application/json;charset=utf-8\\\"\\n }\"},{\"col_type\":\"movie_3\",\"name\":\"往期期刊\",\"path\":\"history\",\"rule\":\"js:\\naddListener('onClose', 'clearVar(\\\"year\\\")');\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet d = [],\\n    {\\n        href: url,\\n        title: name,\\n        img\\n    } = MY_PARAMS,\\n    collection = JSON.parse(readFile('collection') || '{}'),\\n    isCollected = !!(collection[name] && collection[name].url == url),\\n    data_list = JSON.parse(request(url, {\\n        headers: headers\\n    })).data_list;\\nsetPageTitle(name);\\nsetLastChapterRule('js:' + $.toString(() => {\\n    eval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\n    let url = MY_PARAMS.href,\\n        data_list = JSON.parse(request(url, {\\n            headers: headers\\n        })).data_list,\\n        data = data_list[0].data[0].qishu;\\n    setResult('最新：' + data);\\n}));\\nd.push({\\n    title: isCollected ? '♥已收藏' : '♡添加收藏',\\n    url: $().lazyRule((is, url, name, img) => {\\n        let collection = JSON.parse(readFile('collection') || '{}');\\n        if (is) {\\n            delete collection[name];\\n            saveFile('collection', JSON.stringify(collection));\\n            refreshPage();\\n            return 'toast://已取消收藏'\\n        } else {\\n            collection[name] = {\\n                url: url,\\n                img: img\\n            };\\n            saveFile('collection', JSON.stringify(collection));\\n            refreshPage();\\n            return 'toast://已添加收藏'\\n        }\\n    }, isCollected, url, name, img),\\n    col_type: \\\"scroll_button\\\",\\n});\\n\\nlet data = {},\\n    now = getVar('year', String(data_list[0].year));\\nfor (let list of data_list) {\\n    if (now == list.year) data = list.data;\\n    d.push({\\n        title: '““””' + (list.year == now ? '<font color=red>' + list.year + '</font>' : list.year),\\n        col_type: 'scroll_button',\\n        url: $().lazyRule((year) => {\\n            putVar('year', String(year));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, list.year)\\n    });\\n}\\nfor (let item of data) {\\n    d.push({\\n        title: item.qishu,\\n        url: 'hiker://page/catalogue#immersiveTheme#',\\n        img: item.img,\\n        extra: {\\n            href: \\\"https://api.lifves.com/magazine/book?mag_id=\\\" + item.mag_id + \\\"&qishu=\\\" + item.qishu\\n        }\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"文章\",\"path\":\"text\",\"rule\":\"js:\\naddListener('onClose', $.toString(() => {\\n    clearVar('texthref');\\n    clearVar('texttitle');\\n    clearVar('textindex');\\n}));\\nlet click = getItem('click', 'true'),\\n    fontsize = parseInt(getItem('fontsize', String(17))),\\n    indent = parseInt(getItem('indent', String(7))),\\n    indents = '';\\nfor (let i = 0; i < indent; i++) {\\n    indents += '&nbsp;';\\n}\\nlet stroge = JSON.parse(readFile('stroge')),\\n    star = Object.keys(stroge);\\n\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet index = parseInt(getVar('textindex') || MY_PARAMS.index),\\n    href = getVar('texthref', '') || MY_PARAMS.href,\\n    data_list = JSON.parse(request(href, {\\n        headers: headers\\n    })).data_list;\\n\\nlet d = [];\\nd.push({\\n    title: '““””<h2>' + data_list.title + '</h2>',\\n    col_type: 'text_center_1',\\n    url: \\\"http://qk.demo.lifves.com/book/read/\\\" + data_list.mag_id + \\\"/\\\" + data_list.qishu + \\\"/\\\" + data_list.read_id,\\n    extra: {\\n        lineVisible: false\\n    }\\n}, {\\n    title: data_list.content.replace(/\\\\>[a-zA-Z0-9+=\\\\-\\\\/]*\\\\</g, '><').replace(/(\\\\<p\\\\>\\\\s*)+\\\\</g,'<').replace(/\\\\<p\\\\>/g, '<p>' + indents),\\n    col_type: 'rich_text',\\n    extra: {\\n        textSize: fontsize,\\n        click: click\\n    }\\n})\\nif (index != 0) {\\n    let title = star[index - 1];\\n    let href = stroge[title];\\n    d.push({\\n        title: '上一篇:' + title,\\n        col_type: 'text_center_1',\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\n            putVar('texthref', href);\\n            putVar('texttitle', title);\\n            putVar('textindex', String(index - 1));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, href, title, index),\\n        extra: {\\n            href: href,\\n            lineVisible: false\\n        }\\n    })\\n}\\nif (index != star.index) {\\n    let title = star[index + 1];\\n    let href = stroge[title];\\n    d.push({\\n        title: '下一篇:' + title,\\n        col_type: 'text_center_1',\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\n            putVar('texthref', href);\\n            putVar('texttitle', title);\\n            putVar('textindex', String(index + 1));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, href, title, index),\\n        extra: {\\n            href: href,\\n            lineVisible: false\\n        }\\n    })\\n}\\nfor (let i = 0; i < 10; i++) {\\n    d.push({\\n        col_type: 'blank_block'\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"设置页\",\"path\":\"setting\",\"rule\":\"js:\\nlet d = [];\\nlet fontsize = parseInt(getItem('fontsize', String(17)));\\nlet indent = parseInt(getItem('indent', String(7)));\\nlet indents = '';\\nfor (let i = 0; i < indent; i++) {\\n    indents += '&nbsp;';\\n}\\nlet readTheme = getItem('readTheme','false');\\nlet fullTheme = getItem('fullTheme', 'true');\\nlet click = getItem('click', 'true');\\n\\nd.push({\\n    title: '阅读模式' + (readTheme == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: readTheme == 'true' ? $('hiker://empty#noLoading#').lazyRule(() => {\\n        setItem('readTheme', 'false');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }) :$('注意：开启阅读模式后,全屏模式设置和字号设置将不起作用！').confirm(() => {\\n        setItem('readTheme', 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    })\\n})\\nd.push({\\n    title: '全屏模式' + (fullTheme == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\n        setItem('fullTheme', i == 'true' ? 'false' : 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }, fullTheme)\\n})\\nd.push({\\n    title: '点击翻页' + (click == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\n        setItem('click', i == 'true' ? 'false' : 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }, click)\\n})\\n\\nd.push({\\n    title: '调整字号'.big().bold(),\\n    col_type: 'rich_text'\\n})\\nd.push({\\n    title: '字号➕',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('fontsize', String(s + 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, fontsize)\\n}, {\\n    title: '字号➖',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('fontsize', String(s - 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, fontsize)\\n})\\n\\nd.push({\\n    col_type: 'line'\\n})\\n\\nd.push({\\n    title: '调整缩进'.big().bold(),\\n    col_type: 'rich_text'\\n})\\nd.push({\\n    title: '缩进➕',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('indent', String(s + 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, indent)\\n}, {\\n    title: '缩进➖',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('indent', String(s - 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, indent)\\n})\\n\\nd.push({\\n    col_type: 'line'\\n})\\n\\nd.push({\\n    title: '预览'.big() + '(字号:' + fontsize + ',缩进:' + indent + ')',\\n    col_type: 'rich_text'\\n}, {\\n    title: '<p>小棉袄帅吗?</p><p>小棉袄怎么这么帅？</p><p>小棉袄真是超超超超超超超超级帅!!!!帅炸了好不好？举世颜无双!!!!</p>'.replace(/\\\\<p\\\\>/g, '<p>' + indents),\\n    col_type: 'rich_text',\\n    extra: {\\n        textSize: fontsize\\n    }\\n})\\nsetResult(d);\"}]","proxy":"","icon":"http://qk.demo.lifves.com/favicon.ico"},{"last_chapter_rule":"","title":"POKI摸鱼神器","author":"爱是用心","version":1,"type":"all","url":"hiker://empty##https://poki.cn/","col_type":"card_pic_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\nvar url = MY_URL.split(\"##\")[1];\nd.push({\n    desc: 'auto&&float',\n    url: url,\n    col_type: 'x5_webview_single',\n    extra: {\n        canBack: true\n    }\n});\n\nsetResult(d);","searchFind":"","search_url":"","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"auto","preRule":"","pages":"[]","proxy":"","icon":"https://a.poki.com/icons/fav-512.png"},{"last_chapter_rule":"","title":"嗅觉转换器","author":"小棉袄🌞","version":7,"type":"tool","url":"hiker://empty","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nlet d = [];\nd.push({\n    title: '',\n    desc: \"搜索规则\",\n    col_type: 'input',\n    extra: {\n        id: \"xj-s\",\n        onChange: $.toString(() => {\n            if (input != \"\") {\n                let s = fetch(\"hiker://home\");\n                let rules = JSON.parse(s);\n                rules = rules.filter(i => i.title && i.title.includes(input));\n                let list = rules.map(it => {\n                    return {\n                        title: it.title,\n                        url: $(\"#noLoading#\").lazyRule((t) => {\n                            let mem = storage0.getItem(\"d\", []);\n                            for (let i in mem) {\n                                if (t == mem[i]) {\n                                    delete mem[i];\n                                    break\n                                }\n                            }\n                            if (mem.length > 10) {\n                                delete mem[0];\n                            }\n                            mem.push(t);\n                            //log(mem);\n                            storage0.setItem(\"d\", mem);\n                            let ru = JSON.parse(fetch(\"hiker://home@\" + t));\n                            let r = {\n                                title: ru.title,\n                                url: ru.url,\n                                rule: ru.find_rule,\n                                interceptor: ru.searchFind == null || ru.searchFind == \"\" ? ru.search_url : \"\",\n                                ua: ru.ua,\n                                pages: ru.pages,\n                                col_type: ru.col_type\n                            }\n                            if (ru.detail_find_rule && ru.detail_find_rule.length > 0) {\n                                r.nextRule = ru.detail_find_rule;\n                                r.nextColType = ru.detail_col_type;\n                            }\n                            if (ru.preRule && ru.preRule.length > 0) {\n                                r.preRule = ru.preRule;\n                            }\n                            let txt = \"嗅觉浏览器￥mini-program￥\" + JSON.stringify(r);\n                            log(txt);\n                            let s1 = sharePaste(txt, \"云剪贴板6\");\n                            return \"copy://\" + s1 + \"\\n\\n嗅觉小程序：\" + r.title;\n                        }, it.title),\n                        col_type: \"text_3\",\n                        extra: {\n                            cls: \"xj-b\"\n                        }\n                    }\n                });\n                deleteItemByCls(\"xj-b\");\n                addItemAfter(\"xj-s\", list);\n            } else {\n\n            }\n        }),\n        titleVisible: false,\n        textSize: 13,\n        defaultValue: getMyVar('title', ''),\n    },\n});\n\nlet r = storage0.getItem(\"d\", []);\n//log(r);\nif (r.length > 0) {\n    for (let it of r) {\n        if (it == null) continue\n        d.push({\n            title: it,\n            url: $(\"#noLoading#\").lazyRule((t) => {\n                let ru = JSON.parse(fetch(\"hiker://home@\" + t));\n                let r = {\n                    title: ru.title,\n                    url: ru.url,\n                    rule: ru.find_rule,\n                    interceptor: ru.searchFind == null || ru.searchFind == \"\" ? ru.search_url : \"\",\n                    ua: ru.ua,\n                    pages: ru.pages,\n                    col_type: ru.col_type\n                }\n                if (ru.detail_find_rule && ru.detail_find_rule.length > 0) {\n                    r.nextRule = ru.detail_find_rule;\n                    r.nextColType = ru.detail_col_type;\n                }\n                if (ru.preRule && ru.preRule.length > 0) {\n                    r.preRule = ru.preRule;\n                }\n                let s1 = sharePaste(\"嗅觉浏览器￥mini-program￥\" + JSON.stringify(r), \"云剪贴板6\");\n                return \"copy://\" + s1 + \"\\n\\n嗅觉小程序：\" + r.title;\n            }, it),\n            col_type: \"text_3\",\n            extra: {\n                cls: \"xj-b\"\n            }\n        })\n    }\n\n}\n\n\nd.push({\n    title: \"使用说明：在海阔视界里面创建规则，解析规则对应嗅觉小程序的rule，链接对应url，名称对应title，搜索链接对应interceptor，ua对应ua，子页面对应子页面，二级对应详情页，预处理对应预处理，根据这个对应关系，可以快速在海阔视界编辑规则，然后转换导入给嗅觉浏览器\\n\" +\n        \"注意：因为嗅觉不支持分类、搜索等规则，因此不要转换不支持的规则，推荐在海阔视界维护规则，可以使用高亮模式\",\n    col_type: \"rich_text\",\n    extra: {\n        textSize: 16\n    }\n});\n\nsetResult(d);","searchFind":"","search_url":"","group":"①推荐","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"#ff01bfa5"},{"last_chapter_rule":"","title":"云盘汇影","author":"MrFly","version":6,"type":"all","url":"hiker://empty$$$fypage","col_type":"text_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch('hiker://files/rules/icy/ali.js'));\nali.homePage();","searchFind":"js:\neval(fetch('hiker://files/rules/icy/ali.js'));\nali.searchPage(true);\n","search_url":"hiker://empty$$$**$$$fypage$$$","group":"①网盘","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch('hiker://files/rules/icy/ali.js'));\nali.detailPage();","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"var alijs = fetch('https://gitee.com/fly1397/hiker-icy/raw/master/ali.js');\nif(!alijs || !alijs.includes('ali')){\n\talijs = fetch('https://cdn.jsdelivr.net/gh/fly1397/hiker-icy/ali.js')\n}\nif(!alijs || !alijs.includes('ali')){\n\talijs = fetch('http://lficy.com:30000/mrfly/hiker-icy/raw/master/ali.js')\n}\nif(alijs) {\n\twriteFile(\"hiker://files/rules/icy/ali.js\",alijs);\n\teval(alijs);\n\tali.preRule();\n}\n","pages":"[{\"col_type\":\"movie_3\",\"name\":\"网盘详情\",\"path\":\"detail\",\"rule\":\"js:\\neval(fetch('hiker://files/rules/icy/ali.js'));\\nali.initConfig();\\nali.aliRule();\"},{\"col_type\":\"movie_1_left_pic\",\"name\":\"资源网页详情\",\"path\":\"site-detail\",\"rule\":\"js:\\neval(fetch('hiker://files/rules/icy/ali.js'));\\nali.detailPage();\"},{\"col_type\":\"movie_3\",\"name\":\"个人网盘详情\",\"path\":\"drive\",\"rule\":\"js:\\neval(fetch('hiker://files/rules/icy/ali.js'));\\nali.initConfig();\\nali.myAliRule();\"}]","proxy":"","icon":"https://gitee.com/fly1397/hiker-icy/raw/master/aliyun.png"},{"last_chapter_rule":"","title":"聚云盘Pro","author":"tee&MrFly&小棉袄🌞","version":9,"type":"video","url":"hiker://empty##fyclass","col_type":"text_1","class_name":"全部&喵搜&小纸条&找资源&小站&UP云搜&盘基地登陆&云盘资源&网盘资源&JIKE&更多&易搜","class_url":"all&https://www.alipansou.com&https://u.gitcafe.net/&https://zhaoziyuan.me/so&https://www.pan666.cn/&https://www.upyunso.com&https://www.panjd.com/&https://yunpan1.com/&https://aliwp.cn/&https://jike.info/category/2/%E8%AE%A8%E8%AE%BA%E5%8C%BA?lang=en-US&https://dalao.ru/w/&https://yiso.fun/","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n//随机图API地址，设置为空不显示图片\nlet pic = \"https://api.ixiaowai.cn/api/api.php\";\n//必应：https://api.isoyu.com/bing_images.php\n//美女：https://api.btstu.cn/sjbz/api.php\n//是否随机图，0固定，1随机（5分钟内固定）\nlet random = 1;\n\nlet white = [\n    \"//tx.me/\",\n]\nlet d = [];\nlet r = fetch(\"hiker://home@云盘汇影\");\nif (!r || r.length <= 5) {\n    let ru = $.toString(() => {\n        return \"海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@云盘汇影@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInRpdGxlIjoi5LqR55uY5rGH5b2xIiwiYXV0aG9yIjoiTXJGbHkiLCJ1cmwiOiJoaWtlcjovL2VtcHR5JCQkZnlwYWdlIiwidmVyc2lvbiI6NiwiY29sX3R5cGUiOiJ0ZXh0XzEiLCJjbGFzc19uYW1lIjoiIiwidHlwZSI6ImFsbCIsImNsYXNzX3VybCI6IiIsImFyZWFfbmFtZSI6IiIsImFyZWFfdXJsIjoiIiwic29ydF9uYW1lIjoiIiwieWVhcl9uYW1lIjoiIiwic29ydF91cmwiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmhvbWVQYWdlKCk7Iiwic2VhcmNoX3VybCI6Imhpa2VyOi8vZW1wdHkkJCQqKiQkJGZ5cGFnZSQkJCIsImdyb3VwIjoi4pGg572R55uYIiwic2VhcmNoRmluZCI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLnNlYXJjaFBhZ2UodHJ1ZSk7XG4iLCJkZXRhaWxfY29sX3R5cGUiOiJtb3ZpZV8xIiwiZGV0YWlsX2ZpbmRfcnVsZSI6ImpzOlxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xuYWxpLmRldGFpbFBhZ2UoKTsiLCJzZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsInNkZXRhaWxfZmluZF9ydWxlIjoiIiwidWEiOiJtb2JpbGUiLCJwcmVSdWxlIjoidmFyIGFsaWpzID0gZmV0Y2goJ2h0dHBzOi8vZ2l0ZWUuY29tL2ZseTEzOTcvaGlrZXItaWN5L3Jhdy9tYXN0ZXIvYWxpLmpzJyk7XG5pZighYWxpanMgfHwgIWFsaWpzLmluY2x1ZGVzKCdhbGknKSl7XG5cdGFsaWpzID0gZmV0Y2goJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9naC9mbHkxMzk3L2hpa2VyLWljeS9hbGkuanMnKVxufVxuaWYoIWFsaWpzIHx8ICFhbGlqcy5pbmNsdWRlcygnYWxpJykpe1xuXHRhbGlqcyA9IGZldGNoKCdodHRwOi8vbGZpY3kuY29tOjMwMDAwL21yZmx5L2hpa2VyLWljeS9yYXcvbWFzdGVyL2FsaS5qcycpXG59XG5pZihhbGlqcykge1xuXHR3cml0ZUZpbGUoXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanNcIixhbGlqcyk7XG5cdGV2YWwoYWxpanMpO1xuXHRhbGkucHJlUnVsZSgpO1xufVxuIiwicGFnZXMiOiJbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIue9keebmOivpuaDhVwiLFwicGF0aFwiOlwiZGV0YWlsXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanMnKSk7XFxuYWxpLmluaXRDb25maWcoKTtcXG5hbGkuYWxpUnVsZSgpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfMV9sZWZ0X3BpY1wiLFwibmFtZVwiOlwi6LWE5rqQ572R6aG16K+m5oOFXCIsXCJwYXRoXCI6XCJzaXRlLWRldGFpbFwiLFwicnVsZVwiOlwianM6XFxuZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9pY3kvYWxpLmpzJykpO1xcbmFsaS5kZXRhaWxQYWdlKCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLkuKrkurrnvZHnm5jor6bmg4VcIixcInBhdGhcIjpcImRyaXZlXCIsXCJydWxlXCI6XCJqczpcXG5ldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2ljeS9hbGkuanMnKSk7XFxuYWxpLmluaXRDb25maWcoKTtcXG5hbGkubXlBbGlSdWxlKCk7XCJ9XSIsImljb24iOiJodHRwczovL2dpdGVlLmNvbS9mbHkxMzk3L2hpa2VyLWljeS9yYXcvbWFzdGVyL2FsaXl1bi5wbmcifQ==\"\n    });\n    confirm({\n        title: MY_RULE.title + '提示',\n        content: '本规则依赖云盘汇影规则，点击下面的确定按钮导入',\n        confirm: ru,\n        cancel: ru\n    })\n}\nlet u = MY_URL.split(\"##\")[1];\n\nfunction loadUrl(u) {\n    let desc = \"auto\";\n    for (let it of white) {\n        if (u.includes(it)) {\n            desc = \"100%&&float\";\n        }\n    }\n    if (getAppVersion() >= 3018) {\n        desc = \"float&&top\";\n    }\n    setResult([{\n        col_type: \"x5_webview_single\",\n        url: u,\n        desc: desc,\n        extra: {\n            canBack: true,\n            urlInterceptor: $.toString(() => {\n                if (input.startsWith('https://www.aliyundrive.com/s/')) {\n                    return $.toString((url) => {\n                        fba.open(JSON.stringify({\n                            rule: '云盘汇影',\n                            url: 'hiker://page/detail?rule=云盘汇影&url=' + url + '??fypage'\n                        }));\n                    }, input)\n                }\n            }),\n            disableX5: true\n        }\n    }])\n}\nif (u == \"all\") {\n    let cls = getMyVar(\"cls\", \"\");\n    if (cls) {\n        u = cls;\n        loadUrl(u);\n        clearMyVar(\"cls\");\n    } else {\n        let r = JSON.parse(fetch(\"hiker://home@\" + MY_RULE.title));\n        let cn = r.class_name.split(\"&\");\n        let cu = r.class_url.split(\"&\");\n        let arr = [];\n        if (pic) {\n            arr.push({\n                title: \"\",\n                url: pic,\n                col_type: \"card_pic_1\",\n                desc: \"0\",\n                pic_url: random ? (pic + \"#_t=\" + Math.ceil(new Date().getTime() / 300000)) : pic\n            });\n            arr.push({\n                col_type: \"big_blank_block\"\n            });\n\n\n        }\n        for (let i = 1; i < cn.length; i++) {\n            arr.push({\n                title: cn[i],\n                url: $().lazyRule((u) => {\n                    putMyVar(\"cls\", u);\n                    //refreshX5Desc(\"top&&float\");\n                    refreshPage();\n                    return \"hiker://empty\";\n                }, cu[i]),\n                col_type: \"text_2\",\n                desc: \"\",\n                pic_url: \"\"\n            });\n        }\n        refreshX5Desc(\"0&&float\");\n        setResult(arr);\n    }\n} else {\n    loadUrl(u);\n}","searchFind":"","search_url":"","group":"①网盘","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[]","proxy":"","icon":"https://www.alipansou.com/favicon.ico"},{"last_chapter_rule":"","title":"Alist","author":"Joe&道长魔改","version":29,"type":"tool","url":"hiker://empty","col_type":"pic_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n    var d = [];\nif (getAppVersion() < 3204) {\n    setResult([{\n        title: \"您当前版本不支持本小程序，请更新至最新版本\",\n        url: \"https://haikuo.lanzoui.com/u/GoldRiver\"\n    }])\n} else {\n    const {\n        getFiles,\n        getLink\n    } = $.require('hiker://page/api');\n    const {color,small}=$.require('hiker://page/utils');\n    var path = getMyVar(\"path\", \"/\");\n    d.push({\n        title: '⚙️设置',\n        col_type: 'scroll_button',\n        url: 'hiker://page/settings#noHistory##noRecordHistory#',\n        extra: {\n            version: MY_RULE.version\n        }\n    });\n    let sub_urls = $.get_sub_urls();\n    let rstrip = $.rstrip;\n    sub_urls.forEach((item) => {\n        var isClicked = rstrip(getMyVar(\"baseurl\", sub_urls[0].url), '/') === rstrip(item.url, '/');\n        d.push({\n            title: isClicked ? \"‘‘’’<strong><font color='#1E90FF'>\" + item.name + \"</front></strong>\" : item.name,\n            url: isClicked ? rstrip(getMyVar(\"baseurl\", sub_urls[0].url), '/') + path :  $(rstrip(item.url, '/')+\"#noLoading#\").lazyRule(() => {\n                input = input.split('#')[0];\n                putMyVar(\"baseurl\", input);\n                clearMyVar(\"path\");\n                refreshPage(false);\n                return \"toast://切换成功\"\n            }),\n            col_type: \"scroll_button\"\n        });\n    });\n    d.push({\n        col_type: \"blank_block\"\n    });\n    d.push({\n        title: \"‘‘’’<strong><font color='#1E90FF'>...</front></strong>\",\n        url: $('#noLoading#').lazyRule((path) => {\n            // 返回上级\n            path.pop();\n            putMyVar(\"path\", path.join(\"/\"));\n            if(getItem('clear_change','')){\n                clearMyVar('search','');\n            }\n            refreshPage(false);\n            return \"hiker://empty\"\n        }, path.split(\"/\")),\n        col_type: \"scroll_button\"\n    });\n    d.push({\n        title: \"🏠首页\",\n        col_type: \"scroll_button\",\n        url: $('#noLoading#').lazyRule(() => {\n            putMyVar(\"path\", \"/\");\n            if(getItem('clear_refresh','')){\n                clearMyVar('search','');\n            }\n            refreshPage(false);\n            return \"hiker://empty\"\n        }),\n    });\n    let paths = \"\";\n    for (item of path.split(\"/\")) {\n        if (item !== \"\") {\n            paths += \"/\" + item;\n            d.push({\n                title: item,\n                col_type: \"scroll_button\",\n                url: $('#noLoading#').lazyRule((paths) => {\n                    putMyVar(\"path\", paths);\n                    if(getItem('clear_change','')){\n                        clearMyVar('search','');\n                    }\n                    refreshPage(false);\n                    return \"hiker://empty\"\n                }, paths)\n            })\n        }\n    }\n    let sorts = [\"名称\", \"类型\", \"大小\", '时间'];\n    let nsort = getMyVar('sort', '名称');\n    let nsearch = getMyVar('search','');\n    sorts.forEach(item => {\n        let cc = nsort === item + \"-\";\n        let isClicked = nsort === item;\n        d.push({\n            title: cc || isClicked ? \"‘‘’’<strong><font color='#1E90FF'>\" + item + (cc ? \"∧\" : \"∨\") + \"</front></strong>\" : item,\n            col_type: \"flex_button\",\n            url: $('#noLoading#').lazyRule((item, isClicked) => {\n                if (isClicked) {\n                    putMyVar(\"sort\", item + \"-\");\n                } else {\n                    putMyVar(\"sort\", item);\n                    if(getItem('clear_change','')){\n                        clearMyVar('search','');\n                    }\n                }\n                refreshPage(false);\n                return \"hiker://empty\"\n            }, item, isClicked)\n        });\n    });\n    let filterOption = getItem('filterOption','全部');\n    let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]').filter(x=>x.active);\n    let filterSels = ['全部','文件','文件夹'];\n    filterSels = filterSels.concat(filter_rules.map(x=>x.name));\n    let filterSel = filterSels.map(it=>it===filterOption?color(it,'#12b668'):it);\n    filterSel.push(color('自定义过滤','#d96715'));\n    d.push({\n        title:'⏳'+color(filterOption,'#d96715'),\n        col_type:'flex_button',\n        url:$(filterSel,2,'选择要显示的内容').select((filterOption)=>{\n            input = pdfh(input,'body&&Text').replace('““””','');\n            if(input==='自定义过滤'){\n                return 'hiker://page/superSettings#noHistory##noRecordHistory#'\n            }\n            if(filterOption!==input){\n                setItem('filterOption',input);\n                refreshPage(false);\n            }\n            return 'hiker://empty'\n        },filterOption),\n    });\n    d.push({\n        title:nsearch?\"🔍\"+small(color(':'+nsearch,'#12b668')):'🔍',\n        col_type:'flex_button',\n        url:$(nsearch,'输入要搜索的内容。支持正则。如\\\\.js').input((nsearch)=>{\n            if(input!==nsearch){\n                putMyVar('search',input);\n                refreshPage(false);\n            }\n            return 'hiker://empty'\n        },nsearch),\n    });\n    d.push({\n        title: color(\"观影历史🕓\",\"#d96715\"),\n        url: \"hiker://page/history#noHistory##noRecordHistory#\",\n        col_type: \"flex_button\"\n    });\n    let dirInfo = getFiles(path,filterOption);\n    if(dirInfo.can_upload){\n        d.push({\n            title: color(\"上传文件⛅\",\"#15ab21\"),\n            url: \"hiker://page/upload#noHistory##noRecordHistory#\",\n            col_type: \"flex_button\"\n        });\n    }\n    d.push({\n        title:color('🔍全局搜索','#12b668'),\n        col_type:'flex_button',\n        url:'hiker://page/search?page=fypage#noHistory##noRecordHistory#',\n    });\n    d.push({\n        col_type: \"line_blank\"\n    });\n    let clickOption = getItem('clickOption', '打开');\n    let showZimu = getItem('showZimu','开');\n    dirInfo.result.forEach(item => {\n        if (item.url) {\n            d.push({\n                title: item.title,\n                img: item.img,\n                url: item.url,\n                col_type: item.col_type,\n            });\n        } else {\n            // let it_type = item.extra.type;\n            let it_type = item.type;\n            let url = 'hiker://empty';\n            let title = item.extra.name || item.title;\n            let id=item.extra.id;\n            if (it_type === 1) {\n                url = $('#noLoading#').lazyRule((item, title) => {\n                    if (getMyVar(\"path\") === \"/\") {\n                        putMyVar(\"path\", getMyVar(\"path\", \"\") + title);\n                    } else {\n                        putMyVar(\"path\", getMyVar(\"path\", \"\") + \"/\" + title);\n                    }\n                    if(getItem('clear_change','')){\n                        clearMyVar('search','');\n                    }\n                    refreshPage(false);\n                    return \"hiker://empty\"\n                }, item, title);\n            } else if (it_type === 3 || /\\.m3u8$/.test(title)) { //3是媒体,禁用下载和跳转\n                url = getLink(title, null,'打开', showZimu,'#isVideo=true#');\n            } else if (it_type === 6) {\n                url = getLink(title, null,'打开', showZimu,\"#.jpg\");\n            } else { //跟随系统预览和下载\n                url = getLink(title, null,clickOption,showZimu);\n            }\n            d.push({\n                title: item.title,\n                img: item.img,\n                url: url,\n                col_type: item.col_type,\n                extra: {\n                    id:id,\n                    type: it_type,\n                    title: title,\n                }\n            });\n        }\n    });\n    setResult(d);\n}","searchFind":"","search_url":"","group":"①网盘","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"if (!(getAppVersion() < 3204)) {\n    const {getU}=$.require('hiker://page/api');\n    const {isOffice}=$.require('hiker://page/fileType');\n    const {similar,removeExt,saveHistory,renderText}=$.require('hiker://page/utils');\n    $.extend({\n        get_sub_urls() {\n            let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\n            if (sub_urls.length < 1) {\n                sub_urls = this.sub_urls;\n            }\n            return sub_urls\n        },\n        getU:getU,\n        isOffice:isOffice,\n        similar:similar,\n        removeExt:removeExt,\n        saveHistory:saveHistory,\n        renderText:renderText,\n        lstrip(string,char){//去除左边指定字符\n            return string.replace(new RegExp('^\\\\'+char+'+', 'g'), '');\n        },\n        rstrip(string,char){//去除右边指定字符\n            return string.replace(new RegExp('\\\\'+char+'+$', 'g'), '');\n        },\n        strip(string,char){//去除两边指定字符\n            return string.replace(new RegExp('^\\\\'+char+'+|\\\\'+char+'+$', 'g'), '');\n        },\n        getTimeOut(){\n            return Number(getItem('timeout',this.timeout+''))\n        },\n        timeout:3500,\n        sub_urls: [{\n            name: '小棉袄仓库',\n            url: 'http://pan.haikuoshijie.cn/',\n        }, {\n            name: '嗨翻',\n            url: 'https://pan.hikerfans.com/',\n        }, {\n            name: '非盘',\n            url: 'http://www.feifwp.top/',\n        }, {\n            name: '姬路白雪',\n            url: 'https://pan.jlbx.xyz/',\n        }, {\n            name: '听闻',\n            url: 'https://wangpan.sangxuesheng.com/',\n        }, {\n            name: 'Joe自用',\n            url: 'http://joegu.tk/',\n        }],\n    });\n}","pages":"[{\"col_type\":\"movie_3\",\"name\":\"代码\",\"path\":\"api\",\"rule\":\"function getFiles(path, filterOption) {\\n    let sort = getMyVar('sort', '名称');\\n    let search = getMyVar('search', '');\\n    filterOption = filterOption || '全部';\\n    let result = [];\\n    let can_upload = false;\\n    let sub_urls = $.get_sub_urls();\\n    let baseurl = $.rstrip(getMyVar(\\\"baseurl\\\", sub_urls[0].url), '/');\\n    try {\\n        log(getItem(\\\"authorization\\\"))\\n        let password = sub_urls.find(x => x.url.includes(baseurl)).password || {};\\n        var res = JSON.parse(post(baseurl + \\\"/api/public/path\\\", {\\n            headers: {\\n                \\\"Content-Type\\\": \\\"application/json\\\",\\n                \\\"Authorization\\\": getItem(\\\"authorization\\\")\\n            },\\n            body: JSON.stringify({\\n                path: path,\\n                password: password[path] || ''\\n            }),\\n            timeout: $.getTimeOut(),\\n        }));\\n    } catch (e) {\\n        log('获取文件列表失败:' + e.message);\\n        return {\\n            result: result,\\n            can_upload: can_upload\\n        }\\n    }\\n    const icon_dict = $.require('hiker://page/fileType').get_icon_dict();\\n    const icons = $.require('hiker://page/fileType').get_icons();\\n    const {\\n        bytesToSize,\\n        small,\\n        color,\\n        sorts,\\n        getTime\\n    } = $.require('hiker://page/utils');\\n    let showDetail = getItem('showDetail', '开') === '开';\\n    try {\\n        let msg = res.message.trim();\\n        if (msg === \\\"success\\\") {\\n            let list = res.data.files;\\n            storage0.putMyVar(\\\"now_files\\\", list); //把当前路径的文件信息储存起来,后面获取匹配字幕要用\\n            can_upload = res.data.meta.upload;\\n            if (filterOption === '文件') {\\n                list = list.filter(x => x.type !== 1)\\n            } else if (filterOption === '文件夹') {\\n                list = list.filter(x => x.type === 1)\\n            } else if (filterOption !== '全部') {\\n                let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\n                let filter_rule = filter_rules.find(x => x.name === filterOption);\\n                if (filter_rule && filter_rule.rule) {\\n                    if (filter_rule.rule.startsWith('!')) {\\n                        list = list.filter(x => !(new RegExp(filter_rule.rule.slice(1))).test(x.name));\\n                    } else {\\n                        list = list.filter(x => (new RegExp(filter_rule.rule)).test(x.name));\\n                    }\\n                }\\n            }\\n\\n            if (search) {\\n                list = list.filter(x => (new RegExp(search)).test(x.name))\\n            }\\n            if (['大小', '类型', '名称', '时间'].includes(sort)) {\\n                sorts(list, sort);\\n            } else {\\n                sorts(list, sort.replace('-', '')).reverse();\\n            }\\n            list.forEach(item => {\\n                let ext = item.name.split('.').slice(-1)[0];\\n                let img = item.type === 1 ? icon_dict['1'] : (icons[ext] || icon_dict[item.type + '']);\\n                result.push({\\n                    title: item.name,\\n                    img: img,\\n                    type: item.type,\\n                    col_type: \\\"avatar\\\",\\n                    extra: {\\n                        id: baseurl + path + item.name,\\n                        type: item.type,\\n                        name: item.name,\\n                    }\\n                });\\n                if (showDetail) {\\n                    let date = getTime(item);\\n                    let size = item.size_str;\\n                    if (!size || size === \\\"\\\") {\\n                        size = item.size === 0 ? \\\"/\\\" : bytesToSize(item.size)\\n                    }\\n                    if (size && size !== \\\"\\\" && size !== 0) {\\n                        size = \\\"&nbsp;&nbsp;&nbsp;\\\" + size;\\n                    } else {\\n                        size = \\\"\\\";\\n                    }\\n                    let desc = date + size;\\n                    result.push({\\n                        type: item.type,\\n                        title: small(color(desc, '#aaaaaa')),\\n                        col_type: \\\"text_1\\\",\\n                        extra: {\\n                            id: baseurl + path + item.name,\\n                            type: item.type,\\n                            name: item.name,\\n                        }\\n                    })\\n                }\\n            });\\n        } else if (msg === \\\"Wrong password\\\") {\\n            result.push({\\n                title: \\\"点我输入密码\\\",\\n                col_type: \\\"text_1\\\",\\n                url: $(getMyVar(\\\"password\\\", \\\"\\\")).input((path, baseurl) => {\\n                    let sub_urls = $.get_sub_urls();\\n                    let idex = sub_urls.findIndex(x => x.url.includes(baseurl));\\n                    if (idex > -1) {\\n                        if (!sub_urls[idex].password) {\\n                            sub_urls[idex].password = {}\\n                        }\\n                        sub_urls[idex].password[path] = input;\\n                        saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n                        putMyVar(\\\"password\\\", input);\\n                        refreshPage(false);\\n                        return \\\"hiker://empty\\\"\\n                    } else {\\n                        return 'toast://未获取到链接为:' + baseurl + '的索引'\\n                    }\\n\\n                }, path, baseurl),\\n            })\\n        }\\n    } catch (e) {\\n        log('发生了错误:' + e.message);\\n        throw e\\n    }\\n    return {\\n        result: result,\\n        can_upload: can_upload\\n    }\\n}\\n\\nfunction getLink(input, path, clickOption, showZimu, ext, reload) {\\n    clickOption = clickOption || '打开';\\n    showZimu = showZimu || '开';\\n    ext = ext || false;\\n    reload = reload || false;\\n    path = (path || getMyVar(\\\"path\\\", \\\"\\\")) + \\\"/\\\";\\n    let sub_urls = $.get_sub_urls();\\n    let baseurl = $.rstrip(getMyVar(\\\"baseurl\\\", sub_urls[0].url), '/');\\n    let npath = path + input;\\n    let homeUrl = 'hiker://empty';\\n    if (/菜单/.test(clickOption)) {\\n        homeUrl += '#noLoading#'\\n    }\\n    return $(homeUrl).lazyRule((baseurl, npath, path, clickOption, showZimu, input, ext, reload) => {\\n        const {\\n            clickLazy\\n        } = $.require('hiker://page/clickFunction');\\n        return clickLazy(baseurl, npath, path, clickOption, showZimu, input, ext, reload)\\n    }, baseurl, npath, path, clickOption, showZimu, input, ext, reload);\\n    // log('当前文件路径:'+npath);\\n}\\n\\nfunction getU(baseurl, npath, ext) {\\n    try {\\n        let sub_urls = $.get_sub_urls();\\n        let password = sub_urls.find(x => x.url.includes(baseurl)).password || {};\\n        let res = JSON.parse(post(baseurl + \\\"/api/public/path\\\", {\\n            headers: {\\n                \\\"Content-Type\\\": \\\"application/json\\\"\\n            },\\n            body: JSON.stringify({\\n                path: npath,\\n                password: password[npath] || '',\\n            }),\\n            timeout: $.getTimeOut(),\\n        }));\\n        if (res.data) {\\n            let u = res.data.files[0].url;\\n            u = !/^http/.test(u) ? baseurl.split('//')[0] + u : u;\\n            if (ext) {\\n                u = u + ext;\\n            }\\n            return u\\n        } else {\\n            return \\\"toast://\\\" + res.message\\n        }\\n    } catch (e) {\\n        return 'toast://文件' + npath + '信息获取发生错误:' + e.message;\\n    }\\n}\\n\\n$.exports.getFiles = getFiles;\\n$.exports.getLink = getLink;\\n$.exports.getU = getU;\"},{\"col_type\":\"movie_3\",\"name\":\"设置\",\"path\":\"settings\",\"rule\":\"js:\\nlet d = [];\\nsetPageTitle('Alist|设置');\\nconst {color,small} = $.require('hiker://page/utils');\\nlet timeout=$.getTimeOut();\\naddListener('onClose', $.toString(() => {\\n    refreshPage(false); //刷新\\n}));\\nlet sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\nd.push({\\n    title: '基础设置 ①初始化',\\n    desc: `默认添加一些远程的alist地址方便订阅\\\\n当前共计${color(sub_urls.length,'#d96715')}条Alist订阅链接`,\\n    col_type: 'text_1',\\n    url: $('确认初始化自带的远程地址吗?将丢失自定义的内容').confirm(() => {\\n        saveFile(\\\"sub_urls.json\\\", JSON.stringify($.sub_urls), 0);\\n        refreshPage(false);\\n        return 'toast://已初始化'\\n    }),\\n});\\n\\nlet newVersion;\\nlet myVersion = MY_PARAMS.version||999;\\ntry {\\n    newVersion = JSON.parse(fetch(\\\"http://hiker.nokia.press/hikerule/dev/getbyid?id=5153\\\",{timeout:timeout})).result.ver\\n} catch (e) {\\n    toast(\\\"道长仓库抽风了，本次未检测到新版信息\\\");\\n    newVersion = myVersion;\\n}\\nlet isUpdate = Number(newVersion) <= Number(myVersion);\\nlet isVer = Number(newVersion) === Number(myVersion);\\nif(!isUpdate||!isVer){\\n    log('有新版本:'+newVersion+',当前:'+myVersion);\\n}\\nd.push({\\n    title: isUpdate ? \\\"已是最新版\\\" : \\\"🆙新版本\\\",\\n    url: \\\"rule://5rW36ZiU6KeG55WM6aaW6aG16aKR6YGT6KeE5YiZ44CQQWxpc3TjgJHvv6Vob21lX3J1bGVfdXJs77+laHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTE1Mw==\\\",\\n    col_type: \\\"text_2\\\"\\n});\\n\\nd.push({\\n    title: \\\"超时毫秒:\\\" + timeout,\\n    url: $(timeout,'请输入全局接口超时毫秒时间').input(() => {\\n        if(!Number(input)){\\n            return 'toast://超时毫秒数必须是整数！'\\n        }\\n        setItem(\\\"timeout\\\",Number(input)+'');\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_2\\\"\\n});\\nlet clickOption = getItem('clickOption','打开');\\nlet showDetail = getItem('showDetail','开');\\nlet showZimu = getItem('showZimu','开');\\nlet save_mode = getItem(\\\"save_mode\\\", \\\"单个\\\");\\nlet clickSel = ['打开','下载','菜单'].map(it=>it===clickOption?color(it,'#12b668'):it);\\nd.push({\\n    title:'点击操作:'+color(clickOption,'#d96715'),\\n    col_type:'text_2',\\n    url:$(clickSel,2,'请选择点击文件执行操作').select((clickOption)=>{\\n        input = pdfh(input,'body&&Text').replace('““””','');\\n        if(clickOption!==input){\\n            setItem('clickOption',input);\\n            refreshPage(false);\\n        }\\n        return 'hiker://empty'\\n    },clickOption),\\n});\\nd.push({\\n    title: \\\"显示文件详情:\\\" + color(showDetail,'#d96715'),\\n    url: $('#noLoading#').lazyRule((showDetail) => {\\n        setItem(\\\"showDetail\\\", showDetail === \\\"开\\\" ? \\\"关\\\" : \\\"开\\\");\\n        refreshPage(false);\\n        return \\\"toast://切换成功\\\"\\n    },showDetail),\\n    col_type: \\\"text_2\\\"\\n});\\nd.push({\\n    title: \\\"外挂字幕开关:\\\" + color(showZimu,'#d96715'),\\n    url: $('#noLoading#').lazyRule((showZimu) => {\\n        setItem(\\\"showZimu\\\", showZimu === \\\"开\\\" ? \\\"关\\\" : \\\"开\\\");\\n        refreshPage(false);\\n        return \\\"toast://切换成功\\\"\\n    },showZimu),\\n    col_type: \\\"text_2\\\"\\n});\\nd.push({\\n    title: color('更多高级设置','#d96715'),\\n    url: 'hiker://page/superSettings#noHistory##noRecordHistory#',\\n    col_type: \\\"text_2\\\"\\n});\\n\\nif(save_mode!=='批量') {\\n    d.push({\\n        title: '名称',\\n        desc: '备注...',\\n        col_type: 'input',\\n        url: $.toString(() => {\\n        }),\\n        extra: {\\n            defaultValue: getMyVar('alist_name', ''),\\n            onChange: 'putMyVar(\\\"alist_name\\\",input)'\\n        }\\n    });\\n}\\nd.push({\\n    title: '链接',\\n    desc: 'alist服务的首页链接',\\n    col_type: 'input',\\n    url: $.toString(() => {\\n\\n    }),\\n    extra: {\\n        defaultValue: getMyVar('alist_url', ''),\\n        onChange: 'putMyVar(\\\"alist_url\\\",input)',\\n        height: 2,\\n        highlight: save_mode==='批量',\\n        type: \\\"textarea\\\",\\n    }\\n});\\n\\nfunction saveSub(code) {\\n    let a_name = getMyVar('alist_name', '').trim();\\n    let a_url = code||getMyVar('alist_url', '').trim();\\n    let save_mode = code?'批量':getItem(\\\"save_mode\\\", \\\"单个\\\");\\n    if(save_mode === '单个') {\\n        if (!a_name) {\\n            return 'toast://名称必填!'\\n        }\\n        if (!a_url || !/^http/.test(a_url)) {\\n            return 'toast://链接不合法!'\\n        }\\n        let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\n        let idex = sub_urls.findIndex(it => $.rstrip(it.url,'/') === $.rstrip(a_name,'/'));\\n        if (idex > -1) {\\n            if (sub_urls[idex].url !== a_url||sub_urls[idex].name !== a_name) {\\n                sub_urls[idex].url = a_url;\\n                sub_urls[idex].name = a_name;\\n                return $('检测到本地有重复的' + a_name + ',是否覆盖?').confirm((sub_urls) => {\\n                    saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n                    refreshPage(false);\\n                    return 'toast://已保存'\\n                }, sub_urls)\\n            } else {\\n                return 'toast://没有操作'\\n            }\\n        } else {\\n            sub_urls.unshift({\\n                name: a_name,\\n                url: a_url,\\n            });\\n            saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n            refreshPage(false);\\n            return 'toast://已保存'\\n        }\\n    }else if(save_mode === '批量'){\\n        let add_data = [];\\n        try {\\n            add_data = eval(a_url);\\n            JSON.stringify(add_data);\\n        }catch (e) {\\n            return 'toast://批量添加格式有误,请参考预处理的json格式。名称重复会直接覆盖保存'\\n        }\\n        let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\n        let sub_cnt = sub_urls.length;\\n        let new_add_data = []; // 自动去重\\n        add_data = add_data.filter(x=>x.name&&x.url);\\n        if(!Array.isArray(add_data) || add_data.length < 1){\\n            return 'toast://导入的东西看起来没对呢!'\\n        }\\n        add_data.forEach((it)=>{\\n            let idex = new_add_data.findIndex(x=>$.rstrip(x.url) === $.rstrip(it.url));\\n            idex>-1?new_add_data[idex] = it:new_add_data.unshift(it);\\n        });\\n        // log('准备新增列表:');\\n        // log(new_add_data);\\n        new_add_data.forEach((it)=>{\\n            let idex = sub_urls.findIndex(x=>$.rstrip(x.url) === $.rstrip(it.url));\\n            idex>-1?sub_urls[idex] = Object.assign(sub_urls[idex],it):sub_urls.unshift(it);\\n        });\\n        let new_cnt = sub_urls.length - sub_cnt;\\n        if(new_cnt > 0 ){\\n            saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n            refreshPage(false);\\n            return 'toast://已保存'+new_cnt+'条记录'\\n        }else{\\n            return 'toast://没有待保存的内容'\\n        }\\n    }\\n}\\nlet opCol = 'scroll_button';\\nd.push({\\n    title: save_mode,\\n    col_type: opCol,\\n    url: $('#noLoading#').lazyRule((save_mode) => {\\n        let next_mode = save_mode === '单个'?'批量':'单个';\\n        setItem('save_mode',next_mode);\\n        refreshPage(false);\\n        return 'toast://已切换编辑保存模式为:'+next_mode\\n    },save_mode)\\n});\\nd.push({\\n    title: '保存',\\n    col_type: opCol,\\n    url: $('#noLoading#').lazyRule((saveSub) => {\\n        return saveSub();\\n    }, saveSub)\\n});\\nd.push({\\n    title: '保存并新增',\\n    col_type: opCol,\\n    url: $('#noLoading#').lazyRule((saveSub) => {\\n        let tips = saveSub();\\n        clearMyVar(\\\"alist_name\\\");\\n        clearMyVar(\\\"alist_url\\\");\\n        refreshPage(false);\\n        return tips\\n    }, saveSub)\\n});\\nd.push({\\n    title: '导入',\\n    col_type: opCol,\\n    url: $(\\\"{{clipboard}}\\\", \\\"自动识别剪切板内容或手动输入口令\\\").input((saveSub)=>{\\n        input=input.trim();\\n        let code=input.split('\\\\n')[1];\\n        if(!/Alist订阅编码分享/.test(input)){\\n            return 'toast://导入口令有误'\\n        }\\n        try {\\n            code = base64Decode(code);\\n            log(code);\\n        }catch (e) {\\n            return 'toast://发生错误:\\\\n'+e.message;\\n        }\\n        return saveSub(code);\\n    },saveSub)\\n});\\nd.push({\\n    title: '全编码分享',\\n    col_type: opCol,\\n    url: $('#noLoading#').lazyRule(() => {\\n        let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\n        confirm({title:'温馨提示',\\n            content:'将一键分享本地的所有订阅,是否将密码一起分享？',\\n            confirm:$.toString((sub_urls)=>{\\n                let code = 'Alist订阅编码分享 '+sub_urls[0].name+'等'+sub_urls.length+'条'+':\\\\n'+base64Encode(JSON.stringify(sub_urls));\\n                return 'copy://'+code\\n            },sub_urls),\\n            cancel:$.toString((sub_urls)=>{\\n                sub_urls = sub_urls.map((it)=>{return {name:it.name,url:it.url}});\\n                let code = 'Alist订阅编码分享 '+sub_urls[0].name+'等'+sub_urls.length+'条'+':\\\\n'+base64Encode(JSON.stringify(sub_urls));\\n                return 'copy://'+code\\n            },sub_urls)});\\n        return 'hiker://empty'\\n    }),\\n});\\nd.push({\\n    title: '全文件分享',\\n    col_type: opCol,\\n    url: $('#noLoading#').lazyRule(() => {\\n        let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\n        let sharePath = 'hiker://files/cache/alist订阅.txt';\\n        confirm({title:'温馨提示',\\n            content:'将一键分享本地的所有订阅,是否将密码一起分享？',\\n            confirm:$.toString((sub_urls,sharePath)=>{\\n                writeFile(sharePath,JSON.stringify(sub_urls));\\n                return 'share://'+sharePath\\n            },sub_urls,sharePath),\\n            cancel:$.toString((sub_urls,sharePath)=>{\\n                sub_urls = sub_urls.map((it)=>{return {name:it.name,url:it.url}});\\n                // log(sub_urls);\\n                writeFile(sharePath,JSON.stringify(sub_urls));\\n                return 'share://'+sharePath\\n            },sub_urls,sharePath)});\\n        return 'hiker://empty'\\n    }),\\n});\\nlet subPath = `hiker://files/rules/files/${MY_RULE.title}/sub_urls.json`;\\nlet cachePath = 'hiker://files/cache/sub_urls.json';\\nd.push({\\n    title: '编辑JSON',\\n    col_type: opCol,\\n    url: $(['接着上次编辑','重新加载编辑'],1,'请选择如何编辑').select((subPath,cachePath) => {\\n        function sub_edit(subPath,cachePath,reload){\\n            reload = reload||false;\\n            if(!fileExist(cachePath)||reload){\\n                writeFile(cachePath,readFile('sub_urls.json', 0) || '[]');\\n            }\\n            let status = fetch('hiker://home@JSON编辑器');\\n            let hasJsonEditor = (status && status !== 'null');\\n            if(!hasJsonEditor){\\n                return 'editFile://'+cachePath;\\n            }else{\\n                return 'hiker://page/interface#noHistory##noRecordHistory#?rule=JSON编辑器&Json='+base64Encode(cachePath);\\n            }\\n        }\\n        if(input==='接着上次编辑'){\\n            return sub_edit(subPath,cachePath);\\n        }else if(input==='重新加载编辑'){\\n            return sub_edit(subPath,cachePath,true);\\n        }else{\\n            return 'hiker://empty'\\n        }\\n    },subPath,cachePath)\\n});\\nd.push({\\n    title:'保存本地',\\n    col_type:opCol,\\n    url:$('将JSON编辑的缓存结果保存为本地订阅?').confirm((cachePath)=>{\\n        let code = JSON.parse(fetch(cachePath));\\n        code = code.filter(x=>x.name && x.url);\\n        saveFile('sub_urls.json', JSON.stringify(code), 0);\\n        refreshPage(false);\\n        return 'toast://保存完毕'\\n    },cachePath)\\n});\\n\\nsub_urls.forEach((it, idex) => {\\n    d.push({\\n        title: it.name,\\n        desc: it.url,\\n        url: $(['置顶','删除', '修改名称','修改地址','快捷输入','密码管理','分享(含密码)','分享(无密码)'], 2, '请选择1个操作').select((it, sub_urls, idex) => {\\n            if (input === '置顶') {\\n                sub_urls.splice(idex, 1);\\n                sub_urls.unshift(it);\\n                if (getMyVar(\\\"baseurl\\\", \\\"\\\") !== it.url) {\\n                    putMyVar(\\\"baseurl\\\", it.url);\\n                    clearMyVar(\\\"path\\\");\\n                }\\n            }\\n            else if (input === '删除') {\\n                sub_urls.splice(idex, 1);\\n                if (getMyVar(\\\"baseurl\\\", \\\"\\\") === it.url) {\\n                    putMyVar(\\\"baseurl\\\", sub_urls[0].url);\\n                    clearMyVar(\\\"path\\\");\\n                }\\n            }else if (input === '修改名称') {\\n                return $(it.name,'给此订阅改个名字吧').input((sub_urls,idex)=>{\\n                    input = input.trim();\\n                    if(input){\\n                        sub_urls[idex].name = input;\\n                        saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n                        refreshPage(false);\\n                        return 'toast://修改成功'\\n                    }else{\\n                        return 'toast://修改失败'\\n                    }\\n                },sub_urls,idex);\\n            }else if (input === '修改地址') {\\n                return $(it.url,'给此订阅改个地址吧').input((sub_urls,idex)=>{\\n                    input = input.trim();\\n                    if(input&&/^http/.test(input)){\\n                        sub_urls[idex].url = input;\\n                        saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n                        refreshPage(false);\\n                        return 'toast://修改成功'\\n                    }else{\\n                        return 'toast://修改失败'\\n                    }\\n                },sub_urls,idex);\\n            } else if (input === '快捷输入') {\\n                putMyVar(\\\"alist_name\\\",it.name);\\n                putMyVar(\\\"alist_url\\\",it.url);\\n                refreshPage(false);\\n                return 'hiker://empty'\\n            }else if (input === '密码管理') {\\n                return 'hiker://page/passwordManage?idex='+idex\\n            }else if (/分享/.test(input)) {\\n                if(input.includes('无密码')){\\n                    delete it.password;\\n                }\\n                let code = 'Alist订阅编码分享 '+it.name+':\\\\n'+base64Encode(JSON.stringify([it]));\\n                return 'copy://'+code\\n            }\\n            saveFile('sub_urls.json', JSON.stringify(sub_urls), 0);\\n            refreshPage(false);\\n            return 'toast://已' + input\\n        }, it, sub_urls, idex),\\n        col_type: \\\"text_1\\\",\\n        extra:{\\n            idex:idex+''\\n        }\\n    })\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"文件类型\",\"path\":\"fileType\",\"rule\":\"const type_dict = {\\n 0: 'zip|exe|apk|crx',\\n 1: '文件夹',\\n 2: 'pdf|xls|doc',\\n 3: 'mp4|mkv|mp3|flv',\\n 4: '?',\\n 5: 'md|txt|json|js',\\n 6: 'gif|jpg|hiec',\\n}\\n\\nfunction get_icon_dict() {\\n let root = 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型/';\\n return {\\n  0: root + 'zip.svg',\\n  1: root + '文件夹.svg',\\n  2: root + '文件.svg',\\n  3: root + 'mp4.svg',\\n  4: root + '文件.svg',\\n  5: root + '文件.svg',\\n  6: root + 'gif.svg',\\n }\\n}\\nlet iconStyles = [{\\n name:'默认',\\n url:'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型/'\\n},{\\n name:'蓝莓',\\n url:'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/'\\n}];\\nlet iconStyle = getItem('iconStyle','默认');\\nlet nowStyle = iconStyles.find(x=>x.name===iconStyle);\\nlet iconRoot = nowStyle?nowStyle.url:iconStyles[0].url;\\n\\nfunction get_icons() {\\n // let root = 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型/';\\n let root = iconRoot;\\n let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|文件|文件夹'.split('|');\\n let obj = {};\\n files.forEach((it) => {\\n  obj[it] = root + it + '.svg';\\n });\\n return obj\\n}\\n\\nfunction isOffice(url){\\n let str='doc|docx|docm|dotm|dotx|xlsx|xlsb|xls|xlsm|pptx|ppsx|ppt|pps|pptm|potm|ppam|potx|ppsm'.split('|').map(it=>'\\\\\\\\.'+it+'$').join('|');\\n let mc=new RegExp(str);\\n return mc.test(url);\\n}\\n\\n$.exports.type_dict = type_dict;\\n$.exports.get_icon_dict = get_icon_dict;\\n$.exports.get_icons = get_icons;\\n$.exports.isOffice = isOffice;\\n$.exports.iconStyles = iconStyles;\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"utils\",\"rule\":\"function bytesToSize(size) {\\n    if (size < 0.1 * 1024) {\\n        //小于0.1KB，则转化成B\\n        size = size.toFixed(2) + \\\"B\\\";\\n    } else if (size < 0.1 * 1024 * 1024) {\\n        // 小于0.1MB，则转化成KB\\n        size = (size / 1024).toFixed(2) + \\\"KB\\\";\\n    } else if (size < 0.1 * 1024 * 1024 * 1024) {\\n        // 小于0.1GB，则转化成MB\\n        size = (size / (1024 * 1024)).toFixed(2) + \\\"MB\\\";\\n    } else {\\n        // 其他转化成GB\\n        size = (size / (1024 * 1024 * 1024)).toFixed(2) + \\\"GB\\\";\\n    }\\n    // 转成字符串\\n    let sizeStr = size + \\\"\\\",\\n        // 获取小数点处的索引\\n        index = sizeStr.indexOf(\\\".\\\"),\\n        // 获取小数点后两位的值\\n        dou = sizeStr.substr(index + 1, 2);\\n    // 判断后两位是否为00，如果是则删除00\\n    if (dou === \\\"00\\\") return sizeStr.substring(0, index) + sizeStr.substr(index + 3, 2);\\n    return size;\\n}\\n$.exports.bytesToSize = bytesToSize;\\n$.exports.color = function(text, color) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n}\\n\\n$.exports.sleep = function(timeout) {\\n    java.lang.Thread.sleep(timeout);\\n}\\n\\nfunction htmlTag(tag, text) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n\\n}\\n$.exports.htmlTag = htmlTag;\\n$.exports.small = function(text) {\\n    return htmlTag(\\\"small\\\", text);\\n}\\n\\nfunction getTime(file,isStandard) {\\n    isStandard = isStandard||false;\\n    let tTime = file.updated_at || file.time_str || \\\"\\\";\\n    tTime = tTime.split(\\\"T\\\");\\n    let date = tTime[0];\\n    if(isStandard){\\n        date = date.replace(/-/g,\\\"/\\\");\\n    }\\n    tTime = tTime[1].split(/Z|\\\\./);\\n    date += \\\" \\\" + tTime[0];\\n    return date;\\n}\\nfunction getTimeInt(timeStr){\\n    return (new Date(timeStr)).getTime()\\n}\\n$.exports.getTime = getTime;\\n\\nlet chnNumChar = {\\n    零: 0,\\n    一: 1,\\n    二: 2,\\n    三: 3,\\n    四: 4,\\n    五: 5,\\n    六: 6,\\n    七: 7,\\n    八: 8,\\n    九: 9\\n};\\n\\nlet chnNameValue = {\\n    十: {\\n        value: 10,\\n        secUnit: false\\n    },\\n    百: {\\n        value: 100,\\n        secUnit: false\\n    },\\n    千: {\\n        value: 1000,\\n        secUnit: false\\n    },\\n    万: {\\n        value: 10000,\\n        secUnit: true\\n    },\\n    亿: {\\n        value: 100000000,\\n        secUnit: true\\n    }\\n}\\n\\nfunction ChineseToNumber(chnStr) {\\n    let rtn = 0;\\n    let section = 0;\\n    let number = 0;\\n    let secUnit = false;\\n    let str = chnStr.split('');\\n\\n    for (let i = 0; i < str.length; i++) {\\n        let num = chnNumChar[str[i]];\\n        if (typeof num !== 'undefined') {\\n            number = num;\\n            if (i === str.length - 1) {\\n                section += number;\\n            }\\n        } else {\\n            let unit = chnNameValue[str[i]].value;\\n            secUnit = chnNameValue[str[i]].secUnit;\\n            if (secUnit) {\\n                section = (section + number) * unit;\\n                rtn += section;\\n                section = 0;\\n            } else {\\n                section += (number * unit);\\n            }\\n            number = 0;\\n        }\\n    }\\n    return rtn + section;\\n}\\n\\nfunction nameCompare(a, b) {\\n    if (a == null || b == null)\\n        return a == null ? b == null ? 0 : -1 : 1;\\n\\n    a = a.replace(/([零一二三四五六七八九十百千万亿])/g, function(match, p1, p2, p3, offset, string) {\\n        // p1 is nondigits, p2 digits, and p3 non-alphanumerics\\n        return ChineseToNumber(p1);\\n    })\\n    b = b.replace(/([零一二三四五六七八九十百千万亿])/g, function(match, p1, p2, p3, offset, string) {\\n        // p1 is nondigits, p2 digits, and p3 non-alphanumerics\\n        return ChineseToNumber(p1);\\n    })\\n\\n    let NUMBERS = java.util.regex.Pattern.compile(\\\"(?<=\\\\\\\\D)(?=\\\\\\\\d)|(?<=\\\\\\\\d)(?=\\\\\\\\D)\\\")\\n    let split1 = NUMBERS.split(new java.lang.String(a));\\n    let split2 = NUMBERS.split(new java.lang.String(b));\\n\\n    for (let i = 0; i < Math.min(split1.length, split2.length); i++) {\\n        let c1 = split1[i].charCodeAt(0);\\n        let c2 = split2[i].charCodeAt(0);\\n        let cmp = 0;\\n        let zeroCharCode = '0'.charCodeAt(0);\\n        let nineCharCode = '9'.charCodeAt(0);\\n\\n        if (c1 >= zeroCharCode && c1 <= nineCharCode && c2 >= zeroCharCode && c2 <= nineCharCode) {\\n            cmp = new java.math.BigInteger(split1[i]).compareTo(new java.math.BigInteger(split2[i]));\\n        }\\n\\n        if (cmp === 0) {\\n            let regex = /[a-zA-Z0-9]/\\n            let s1 = String(split1[i])\\n            let s2 = String(split2[i])\\n            if (regex.test(s1) || regex.test(s2)) {\\n                cmp = new java.lang.String(split1[i]).compareTo(new java.lang.String(split2[i]));\\n                // cmp = s1.localeCompare(s2, 'en')\\n            } else {\\n                cmp = s1.localeCompare(s2, 'zh')\\n            }\\n        }\\n\\n        if (cmp !== 0) {\\n            return cmp;\\n        }\\n    }\\n    let lengthCmp = split1.length - split2.length;\\n    // if (lengthCmp !== 0) lengthCmp = lengthCmp > 0 ? -1 : 1;\\n    return lengthCmp;\\n}\\n\\n$.exports.sorts = function(list, sort) {\\n    if (sort === \\\"类型\\\") {\\n        // log(\\\"类型排序\\\");\\n        list.sort(function(a, b) {\\n            return a.type - b.type\\n        });\\n    } else if (sort === \\\"名称\\\") {\\n        // log(\\\"名称排序\\\");\\n        // list.sort(function(a, b) {\\n        //     return a.name.localeCompare(b.name, \\\"zh\\\")\\n        // });\\n        list.sort(function(a, b) {\\n            return nameCompare(a.name||a.title, b.name||b.title);\\n        });\\n    } else if (sort === \\\"大小\\\") {\\n        // log(\\\"大小排序\\\");\\n        list.sort(function(a, b) {\\n            return (a.size || Number(a.size_str) || 0) - (b.size || Number(b.size_str) || 0);\\n        });\\n    }else if (sort === \\\"时间\\\") {\\n        // log(\\\"时间排序\\\");\\n        list.sort(function(a, b) {\\n            return getTimeInt(getTime(a,true)) - getTimeInt(getTime(b,true))\\n        });\\n    }\\n    return list\\n}\\n\\nfunction similar(s, t, f) {//判断两个字符串之间的相似度\\n    if (!s || !t) {\\n        return 0\\n    }\\n    if(s === t){\\n        return 100;\\n    }\\n    var l = s.length > t.length ? s.length : t.length\\n    var n = s.length\\n    var m = t.length\\n    var d = []\\n    f = f || 2\\n    var min = function (a, b, c) {\\n        return a < b ? (a < c ? a : c) : (b < c ? b : c)\\n    }\\n    var i, j, si, tj, cost\\n    if (n === 0) return m\\n    if (m === 0) return n\\n    for (i = 0; i <= n; i++) {\\n        d[i] = []\\n        d[i][0] = i\\n    }\\n    for (j = 0; j <= m; j++) {\\n        d[0][j] = j\\n    }\\n    for (i = 1; i <= n; i++) {\\n        si = s.charAt(i - 1)\\n        for (j = 1; j <= m; j++) {\\n            tj = t.charAt(j - 1)\\n            if (si === tj) {\\n                cost = 0\\n            } else {\\n                cost = 1\\n            }\\n            d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost)\\n        }\\n    }\\n    let res = (1 - d[n][m] / l) *100\\n    return res.toFixed(f)\\n}\\n\\n$.exports.similar = similar;\\n$.exports.removeExt = function (file){\\n    return file.split('.').slice(0,-1).join('.')\\n};\\n\\n$.exports.saveHistory = function (id,data){\\n    let view_history = JSON.parse(readFile('view_history.json', 0) || '[]');\\n    let idex = view_history.findIndex(x=>x.extra&&x.extra.id===id);\\n    if(idex > -1){\\n        view_history.splice(idex,1);\\n    }\\n    view_history.unshift(data);\\n    saveFile('view_history.json',JSON.stringify(view_history),0);\\n    return true\\n}\\n\\n$.exports.renderText = function (realUrl,type){\\n    type = type || 'code';\\n    return $('hiker://empty#noHistory##noRecordHistory#').rule((realUrl,type) => {\\n        let d = [];\\n        let html;\\n        try {\\n            html = request(realUrl, {\\n                timeout: $.getTimeOut()\\n            }) || '';\\n        } catch (e) {\\n            html = '预览失败:' + e.message\\n        }\\n        if(/md|code/.test(type)){\\n            require('http://hiker.nokia.press/hikerule/rulelist.json?id=3187');\\n            html = type==='md'?marked.parse(html):marked.parse(\\\"```\\\\n\\\" + html + \\\"\\\\n```\\\");\\n        }else if (type==='txt'&& html.length > 6000) {\\n            html = html.slice(0, 6000) + \\\"...\\\\nerror:文件过大不支持预览\\\";\\n        }\\n        let col = /md|code/.test(type) ? 'rich_text' : 'long_text';\\n        d.push({\\n            title: html,\\n            col_type: col,\\n            url: 'hiker://empty'\\n        });\\n        setResult(d);\\n    }, realUrl,type)\\n}\"},{\"name\":\"密码管理\",\"path\":\"passwordManage\",\"rule\":\"js:\\nlet d = [];\\nsetPageTitle('Alist密码管理');\\nconst {color,small} = $.require('hiker://page/utils');\\nlet idex = getParam('idex', MY_PARAMS.idex||\\\"\\\");\\nif(!idex){\\n    d.push({\\n        title:'索引获取失败,无法管理密码',\\n        col_type:'text_1',\\n        url:'hiker://empty'\\n    });\\n}else{\\n    idex = Number(idex);\\n    let sub_urls = JSON.parse(readFile('sub_urls.json', 0) || '[]');\\n    let nowSub = sub_urls[idex];\\n    let name = color(nowSub.name,'#d96715');\\n    let password = nowSub.password;\\n    if(!password){\\n        d.push({\\n            title:'订阅'+name+'暂无密码',\\n            col_type:'text_1',\\n            url:'hiker://empty'\\n        });\\n    }else{\\n        d.push({\\n            title:'订阅'+name+'密码如下',\\n            col_type:'text_1',\\n            url:'hiker://empty'\\n        });\\n        d.push({\\n            title:JSON.stringify(password),\\n            col_type:'long_text',\\n        });\\n    }\\n}\\nsetResult(d);\"},{\"name\":\"高级设置\",\"path\":\"superSettings\",\"rule\":\"js:\\nlet d = [];\\nsetPageTitle('Alist|高级设置');\\naddListener('onClose', $.toString(() => {\\n    refreshPage(false); //刷新\\n}));\\nconst {color,small} = $.require('hiker://page/utils');\\nconst {iconStyles} = $.require('hiker://page/fileType');\\nd.push({\\n    title:'搜索记录自动清除',\\n    desc:'设置执行以下动作时是否自动清除搜索内容',\\n    col_type:'text_1',\\n    url:'hiker://empty'\\n});\\nlet clear_change = getItem('clear_change','');\\nlet clear_refresh = getItem('clear_refresh','开');\\nd.push({\\n    title:clear_change?color('切换目录','#12b668'):'切换目录',\\n    col_type:'text_2',\\n    url:$('#noLoading#').lazyRule((clear_change)=>{\\n        setItem(\\\"clear_change\\\", clear_change? \\\"\\\" : \\\"开\\\");\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    },clear_change)\\n});\\nd.push({\\n    title:clear_refresh?color('回首页','#12b668'):'回首页',\\n    col_type:'text_2',\\n    url:$('#noLoading#').lazyRule((clear_refresh)=>{\\n        setItem(\\\"clear_refresh\\\", clear_refresh? \\\"\\\" : \\\"开\\\");\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    },clear_refresh)\\n});\\nlet size = storage0.getItem('search_size',20);\\nd.push({\\n    title:'搜索每页数:'+color(''+size,'#d96715'),\\n    col_type:'text_2',\\n    url:$(size,'请输入全局搜索的每页显示数量\\\\n实测超过200有卡死的风险').input(()=>{\\n        if(!Number(input)){\\n            return 'toast://输入有误'\\n        }\\n        storage0.setItem('search_size',Number(input));\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    }),\\n});\\nlet auth = getItem(\\\"authorization\\\", \\\"\\\");\\nd.push({\\n    title:'站长auth:'+color(auth.substr(0,3),'#d96715'),\\n    col_type:'text_2',\\n    url:$(auth,'你如果是站长可以设置authorization实现免密搜索').input((auth)=>{\\n        input = input.trim();\\n        if(auth!==input){\\n            setItem('authorization',input);\\n            refreshPage(false);\\n        }\\n        return 'hiker://empty'\\n    },auth),\\n});\\n\\nlet iconStyle = getItem('iconStyle','默认');\\nlet iconSel = iconStyles.map(it=>it.name === iconStyles?color(it.name,'#12b668'):it.name);\\nd.push({\\n    title:'图标风格:    '+color(iconStyle,'#d96715'),\\n    desc:'可选全局图标主题样式',\\n    col_type:'text_1',\\n    url:$(iconSel,2,'请选择一套图标样式').select((iconStyle)=>{\\n        input = pdfh(input,'body&&Text').replace('““””','');\\n        if(iconStyle!==input){\\n            setItem('iconStyle',input);\\n            refreshPage(false);\\n        }\\n        return 'hiker://empty'\\n    },iconStyle)\\n});\\nd.push({\\n    title:'自定义过滤条件'+small(color('(点击来个例子)','#aaaaaa')),\\n    desc:'设置一些自定义的筛选内容附加到主页快速筛选栏',\\n    col_type:'text_1',\\n    url:$('来个示例?').confirm(()=>{\\n        putMyVar('filter_name', '视频');\\n        putMyVar('filter_rule', '\\\\\\\\.m3u8|\\\\\\\\.mp4');\\n        refreshPage(false);\\n        return 'toast://例子给你了,自己保存吧!'\\n    })\\n});\\nd.push({\\n    title: '名称',\\n    desc: '如: 视频',\\n    col_type: 'input',\\n    url: $.toString(() => {\\n    }),\\n    extra: {\\n        defaultValue: getMyVar('filter_name', ''),\\n        onChange: 'putMyVar(\\\"filter_name\\\",input)'\\n    }\\n});\\nd.push({\\n    title: '内容',\\n    desc: '如: \\\\\\\\.m3u8|\\\\\\\\.mp4',\\n    col_type: 'input',\\n    url: $.toString(() => {\\n\\n    }),\\n    extra: {\\n        defaultValue: getMyVar('filter_rule', ''),\\n        onChange: 'putMyVar(\\\"filter_rule\\\",input)',\\n        height: 2,\\n        highlight: true,\\n        type: \\\"textarea\\\",\\n    }\\n});\\nfunction saveFilter() {\\n    let filter_name = getMyVar('filter_name', '').trim();\\n    let filter_rule = getMyVar('filter_rule', '').trim();\\n    if (!filter_name) {\\n        return 'toast://名称必填!'\\n    }\\n    if (!filter_rule) {\\n        return 'toast://过滤规则必填!'\\n    }\\n    let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\n    let idex = filter_rules.findIndex(it => it.name === filter_name);\\n    if (idex > -1) {\\n        if (filter_rules[idex].rule !== filter_rule) {\\n            filter_rules[idex].rule = filter_rule;\\n            // filter_rules[idex].active = true;\\n            return $('检测到本地有重复的' + filter_name + ',是否覆盖?').confirm((filter_rules) => {\\n                saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                refreshPage(false);\\n                return 'toast://已保存'\\n            }, filter_rules)\\n        } else {\\n            return 'toast://没有操作'\\n        }\\n    } else {\\n        filter_rules.unshift({\\n            name: filter_name,\\n            rule: filter_rule,\\n            active:true,\\n        });\\n        saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n        refreshPage(false);\\n        return 'toast://已保存'\\n    }\\n}\\n\\nd.push({\\n    title:'保存规则',\\n    col_type: 'text_3',\\n    url:$('#noLoading#').lazyRule((saveFilter)=>{\\n        return saveFilter();\\n    },saveFilter)\\n});\\nd.push({\\n    title:'导入规则',\\n    col_type: 'text_3',\\n    url:$(\\\"{{clipboard}}\\\", \\\"自动识别剪切板内容或手动输入口令\\\").input(()=>{\\n        input=input.trim();\\n        let url=input.split('\\\\n')[1];\\n        if(!/Alist自定义过滤规则/.test(input)||!/^http/.test(url)){\\n            return 'toast://导入口令有误'\\n        }\\n        try {\\n            let code=parsePaste(url);\\n            let newRules = JSON.parse(base64Decode(code));\\n            let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\n            let filter_cnt = filter_rules.length;\\n            newRules = newRules.filter(x=>x.name&&x.rule);\\n            if(!Array.isArray(newRules) || newRules.length < 1){\\n                return 'toast://导入的东西看起来没对呢!'\\n            }\\n            newRules.forEach((it)=>{\\n                let idex = filter_rules.findIndex(x=>$.rstrip(x.name) === $.rstrip(it.name));\\n                idex>-1?filter_rules[idex] = it:filter_rules.unshift(it);\\n            });\\n            let new_cnt = filter_rules.length - filter_cnt;\\n            if(new_cnt > 0 ){\\n                saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                refreshPage(false);\\n                return 'toast://已保存'+new_cnt+'条记录'\\n            }else{\\n                return 'toast://没有待保存的内容'\\n            }\\n        }catch (e) {\\n            return 'toast://导入失败!\\\\n'+ e.message;\\n        }\\n    }),\\n});\\nd.push({\\n    title:'分享规则',\\n    col_type: 'text_3',\\n    url:$('#noLoading#').lazyRule(()=>{\\n        let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\n        if(filter_rules.length < 1){\\n            return 'toast://你还没有规则,无法分享!'\\n        }\\n        let shareText = base64Encode(JSON.stringify(filter_rules));\\n        var pastes = getPastes();\\n        var url = sharePaste(shareText,pastes.slice(-1)[0]);\\n        let import_rule= \\\"Alist自定义过滤规则：\\\"+filter_rules[0].name+'等'+filter_rules.length+'条\\\\n'+url;\\n        copy(import_rule);\\n        return 'hiker://empty'\\n    })\\n});\\nlet filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\nfilter_rules.forEach((it, idex) => {\\n    d.push({\\n        title: it.active?color(it.name,'#12b668'):color(it.name,'#aaaaaa'),\\n        desc: it.rule,\\n        url: $(['删除', '修改名称','修改规则','快捷输入','启用','禁用'], 2, '请选择1个操作').select((it, filter_rules, idex) => {\\n            if (input === '删除') {\\n                let filterOption = getItem('filterOption','全部');\\n                if(filterOption===it.name){\\n                    clearItem('filterOption')\\n                }\\n                filter_rules.splice(idex, 1);\\n            }else if (input === '修改名称') {\\n                return $(it.name,'给此规则改个名字吧').input((filter_rules,idex)=>{\\n                    input = input.trim();\\n                    if(input){\\n                        filter_rules[idex].name = input;\\n                        saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                        refreshPage(false);\\n                        return 'toast://修改成功'\\n                    }else{\\n                        return 'toast://修改失败'\\n                    }\\n                },filter_rules,idex);\\n            }else if (input === '修改规则') {\\n                return $(it.rule,'给此规则改个匹配内容吧').input((filter_rules,idex)=>{\\n                    input = input.trim();\\n                    if(input){\\n                        filter_rules[idex].rule = input;\\n                        saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                        refreshPage(false);\\n                        return 'toast://修改成功'\\n                    }else{\\n                        return 'toast://修改失败'\\n                    }\\n                },filter_rules,idex);\\n            } else if (input === '快捷输入') {\\n                putMyVar(\\\"filter_name\\\",it.name);\\n                putMyVar(\\\"filter_rule\\\",it.rule);\\n                refreshPage(false);\\n                return 'hiker://empty'\\n            }else if (input === '启用') {\\n                filter_rules[idex].active = true;\\n                saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                refreshPage(false);\\n                return 'toast://已启用'\\n            }else if (input === '禁用') {\\n                filter_rules[idex].active = false;\\n                saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n                refreshPage(false);\\n                return 'toast://已禁用'\\n            }\\n            saveFile('filter_rules.json', JSON.stringify(filter_rules), 0);\\n            refreshPage(false);\\n            return 'toast://已' + input\\n        }, it, filter_rules, idex),\\n        col_type: \\\"text_1\\\",\\n        extra:{\\n            idex:idex+''\\n        }\\n    })\\n});\\nsetResult(d);\"},{\"name\":\"观看历史\",\"path\":\"history\",\"rule\":\"js:\\nvar d = [];\\nsetPageTitle('Alist|观影历史');\\nconst {color,small} = $.require('hiker://page/utils');\\nd.push({\\n    title: \\\"清空\\\",\\n    url: $('确认清空历史记录?').confirm(() => {\\n        // deleteFile('view_history.json');\\n        saveFile('view_history.json','[]',0);\\n        refreshPage(false);\\n        return \\\"toast://观影历史已清空!\\\"\\n    }),\\n    col_type: \\\"text_3\\\"\\n});\\nlet hisPath = `hiker://files/rules/files/${MY_RULE.title}/view_history.json`;\\nd.push({\\n    title: \\\"编辑\\\",\\n    url: $('#noLoading#').lazyRule((hisPath)=>{\\n        if(!fileExist(hisPath)){\\n            saveFile('view_history.json','[]',0);\\n        }\\n        return 'editFile://'+hisPath\\n    },hisPath),\\n    col_type: \\\"text_3\\\"\\n});\\nlet option = getItem('his_click','播放');\\nd.push({\\n    title: option==='播放'?option:color(option,'#ab2415'),\\n    url: $('#noLoading#').lazyRule((color)=>{\\n        let option = getItem('his_click','播放');\\n        let nextOption = option === '播放'?'删除':'播放';\\n        setItem('his_click',nextOption);\\n        updateItem(\\\"his_click\\\", {\\n            title:nextOption==='播放'?nextOption:color(nextOption,'#ab2415')\\n        });\\n        refreshPage(false);\\n        return 'hiker://empty'\\n    },color),\\n    col_type: \\\"text_3\\\",\\n    extra:{\\n        id:'his_click'\\n    }\\n});\\nlet view_history = JSON.parse(readFile('view_history.json', 0) || '[]');\\nif(view_history.length > 0){\\n    view_history.forEach((it)=>{\\n        it.col_type = 'text_1';\\n        if(option==='删除'){\\n            it.url = $('#noLoading#').lazyRule((id)=>{\\n                let view_history = JSON.parse(readFile('view_history.json', 0) || '[]');\\n                let idex = view_history.findIndex(x=>x.extra.id === id);\\n                view_history.splice(idex,1);\\n                saveFile('view_history.json', JSON.stringify(view_history),0);\\n                refreshPage(false);\\n                return 'hiker://empty'\\n            },it.extra.id);\\n        }\\n        d.push(it);\\n    });\\n}else{\\n  d.push({\\n      title:'暂无观影记录,先去观看一个视频吧!',\\n      col_type:'text_center_1',\\n      url:'hiker://empty'\\n  });\\n}\\nsetResult(d);\"},{\"name\":\"文件上传\",\"path\":\"upload\",\"rule\":\"js:\\nsetPageTitle('Alist|上传文件');\\nconst {color,small} = $.require('hiker://page/utils');\\nlet html = `\\n<!doctype html>\\n<html> \\n    <head> \\n    <!--<author>顺承天意&&@LoyDgIk&&道长</author>-->\\n        <meta charset=\\\"UTF-8\\\"> \\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0\\\"> <!-- <meta name=\\\"color-scheme\\\" content=\\\"light dark\\\"> --> \\n        <title>上传文件</title> \\n        <style>\\n        button {\\n            display: block;\\n            width: 100%;\\n            margin: 6px;\\n            outline: none;\\n            height: 40px;\\n            line-height: 40px;\\n            color: #fff;\\n            background-color: #26a2ff;\\n            text-align: center;\\n            border-radius: 4px;\\n            border: none;\\n            cursor: pointer;\\n        }\\n\\n        #upload-input {\\n            opacity: 0;\\n            filter: alpha(opacity=0);\\n            display: inline-block;\\n            width: 100%;\\n            height: 100%;\\n        }\\n\\n        #upload-text {\\n            position: relative;\\n            bottom: 40px;\\n            user-select: none;\\n        }\\n    </style>\\n    </head>\\n    <body><button onclick=\\\"easyUpload()\\\"> <span id=\\\"upload-input\\\">选择文件</span><span id=\\\"upload-text\\\">选择文件</span> </button>\\n        \\n    </body>\\n</html>\\n`;\\nlet sub_urls = $.get_sub_urls();\\nlet baseurl = $.rstrip(getMyVar(\\\"baseurl\\\", sub_urls[0].url), '/');\\nlet path = getMyVar(\\\"path\\\", \\\"/\\\");\\nlet password = sub_urls.find(x => x.url.includes(baseurl)).password || {};\\npassword = password[path] || '';\\nlet obj = {\\n    base_url:baseurl,\\n    path:path,\\n    password:password,\\n    html:html,\\n};\\nfunction x5js(obj) {\\n    document.write(obj.html);\\n    function easyUpload() {\\n        var input = document.createElement(\\\"input\\\");\\n        input.type = \\\"file\\\";\\n        input.click();\\n        input.onchange = function() {\\n            fba.showLoading(\\\"正在上传\\\");\\n            var files = input.files;\\n            const form = new FormData();\\n            for (let i = 0; i < files.length; i++) {\\n                form.append(\\\"files\\\", files[i], files[i].name);\\n            }\\n            form.append(\\\"path\\\", obj.path);\\n            form.append(\\\"password\\\", obj.password);\\n            var xhr = new XMLHttpRequest();\\n            //xhr.setRequestHeader('Content-Type', 'application/json');\\n            var action = obj.base_url + \\\"/api/public/upload\\\"; //上传接口\\n            // fba.log(\\\"正在上传\\\");\\n            xhr.onload = function() {\\n                fba.hideLoading();\\n                if (xhr.readyState === 4 && xhr.status === 200) {\\n                    var resultObj = JSON.parse(xhr.responseText);\\n                    fba.log(xhr.responseText);\\n                    alert(\\\"上传成功\\\\n\\\" + resultObj.message);\\n                    fba.back(true);\\n                }else{\\n                    alert(\\\"上传失败\\\");\\n                }\\n            }\\n            xhr.open(\\\"POST\\\", action);\\n            xhr.send(form); //发送表单数据\\n        }\\n    }\\n    window.easyUpload = function() {\\n        try {\\n            easyUpload();\\n        } catch (e) {\\n            fba.log(e.toString());\\n        }\\n    }\\n}\\nvar d = [];\\nd.push({\\n    title:'当前主页:'+small(color(obj.base_url,'#aaaaaa')),\\n    desc:'当前相对路径:'+small(color(obj.path,'#aaaaaa')),\\n    col_type: 'text_1',\\n    url:obj.base_url + obj.path,\\n    extra: {\\n        password:obj.password\\n    }\\n});\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"60&&list\\\",\\n    url:\\\"about:blank\\\",\\n    extra: {\\n        js: $.toString(x5js, obj),\\n        //jsLoadingInject: true\\n    }\\n});\\nsetResult(d);\"},{\"name\":\"搜索\",\"path\":\"search\",\"rule\":\"js:\\nvar d = [];\\nsetPageTitle('Alist|🔍全局搜索');\\nlet nsearch = getMyVar('searchAll','');\\naddListener('onClose', $.toString(() => {\\n    let clear_refresh = getItem('clear_refresh','开');\\n    if(clear_refresh === '开'){\\n        clearMyVar('searchAll');\\n    }\\n}));\\nif(MY_PAGE===1||!nsearch) {\\n    d.push({\\n        title: '🔍搜索',\\n        desc: '搜点什么吧?',\\n        url: $.toString(() => {\\n            refreshPage(false);\\n        }),\\n        col_type: 'input',\\n        extra: {\\n            defaultValue: nsearch,\\n            onChange: 'putMyVar(\\\"searchAll\\\",input)',\\n        }\\n    });\\n}\\nlet searchResult = [];\\nlet showDetail = getItem('showDetail', '开') === '开';\\nlet filterOption = getItem('filterOption','全部');\\nif(nsearch){\\n    let sub_urls = $.get_sub_urls();\\n    let baseurl = $.rstrip(getMyVar(\\\"baseurl\\\", sub_urls[0].url), '/');\\n    let path = getMyVar(\\\"path\\\", \\\"/\\\");\\n    let lastSearch = baseurl + path + '?key='+nsearch+'|'+showDetail;\\n    if(lastSearch === getMyVar('lastSearch','')){\\n        if(MY_PAGE===1) {\\n            showLoading('获取上次搜索结果中...');\\n        }\\n        log(`搜索${nsearch},第${MY_PAGE}页`);\\n        searchResult = JSON.parse(readFile('search_results.json',0));\\n    }else {\\n        showLoading(`搜索${nsearch}中，请稍等...`);\\n        const icon_dict = $.require('hiker://page/fileType').get_icon_dict();\\n        const icons = $.require('hiker://page/fileType').get_icons();\\n        const {getLink} = $.require('hiker://page/api');\\n        let clickOption = getItem('clickOption', '打开');\\n        const {bytesToSize, small, color, getTime,sorts} = $.require('hiker://page/utils');\\n        let showZimu = getItem('showZimu', '开');\\n        d.push({\\n            title: '主页:' + small(color(baseurl, '#aaaaaa')),\\n            desc: '路径:' + small(color(path, '#aaaaaa')),\\n            url: 'hiker://empty',\\n            col_type: 'text_1'\\n        });\\n\\n        try {\\n            let password = sub_urls.find(x => x.url.includes(baseurl)).password || {};\\n            let res = JSON.parse(post(baseurl + \\\"/api/public/search\\\", {\\n                headers: {\\n                    \\\"Content-Type\\\": \\\"application/json\\\",\\n                    \\\"authorization\\\": getItem(\\\"authorization\\\", \\\"\\\")\\n                },\\n                body: JSON.stringify({\\n                    path: path,\\n                    keyword: nsearch,\\n                    password: password[path] || ''\\n                }),\\n                timeout: $.getTimeOut(),\\n            }));\\n\\n            let list = res.data;\\n            if (list.length < 1) {\\n                searchResult.push({\\n                    title: \\\"找不到你想要的ʕ·ᴥ·ʔ\\\",\\n                    url: \\\"hiker://empty\\\"\\n                });\\n            } else {\\n                if(filterOption==='文件'){\\n                    list = list.filter(x=>x.type!==1)\\n                }else if(filterOption==='文件夹'){\\n                    list = list.filter(x=>x.type===1)\\n                }else if(filterOption!=='全部'){\\n                    let filter_rules = JSON.parse(readFile('filter_rules.json', 0) || '[]');\\n                    let filter_rule = filter_rules.find(x=>x.name===filterOption);\\n                    if(filter_rule&&filter_rule.rule){\\n                        if(filter_rule.rule.startsWith('!')){\\n                            list = list.filter(x=>!(new RegExp(filter_rule.rule.slice(1))).test(x.name));\\n                        }else{\\n                            list = list.filter(x=>(new RegExp(filter_rule.rule)).test(x.name));\\n                        }\\n                    }\\n                }\\n                showLoading('搜索到' + list.length + '条结果,加载中');\\n                list.forEach((item) => {\\n                    let it_type = item.type;//资源类型\\n                    let url = 'hiker://empty';\\n                    let title = item.name;//资源名称\\n                    let path = item.path;//资源路径\\n                    let id = baseurl + path + title;//资源唯一标志\\n                    let ext = title.split('.').slice(-1)[0];\\n                    let img = it_type === 1 ? icon_dict['1'] : (icons[ext] || icon_dict[it_type + '']);\\n                    if (it_type === 1) {\\n                        url = $('#noLoading#').lazyRule((item) => {\\n                            putMyVar(\\\"path\\\", item.path + \\\"/\\\" + item.name)\\n                            back();\\n                            return \\\"hiker://empty\\\"\\n                        }, item);\\n                    } else if (it_type === 3 || /\\\\.m3u8$/.test(title)) { //3是媒体,禁用下载和跳转\\n                        url = getLink(title,path, '打开', showZimu, '#isVideo=true#',true);\\n                    } else if (it_type === 6) {\\n                        url = getLink(title,path, '打开', showZimu, \\\"#.jpg\\\",true);\\n                    } else { //跟随系统预览和下载\\n                        url = getLink(title,path, clickOption, showZimu,true);\\n                    }\\n                    searchResult.push({\\n                        name:title,\\n                        title: title,\\n                        img: img,\\n                        url: url,\\n                        col_type: \\\"avatar\\\",\\n                        extra: {\\n                            id: id,\\n                            type: it_type,\\n                            title: title,\\n                        }\\n                    });\\n                    // log(item);\\n                    if (showDetail) {\\n                        let date = (item.updated_at || item.time_str) ? getTime(item) : '\\\\t\\\\t\\\\t\\\\t';\\n                        let size = item.size_str;\\n                        if (!size || size === \\\"\\\") {\\n                            size = item.size === 0 ? \\\"/\\\" : bytesToSize(item.size)\\n                        }\\n                        if (size && size !== \\\"\\\" && size !== 0) {\\n                            size = \\\"&nbsp;&nbsp;&nbsp;\\\" + size;\\n                        } else {\\n                            size = \\\"\\\";\\n                        }\\n                        let desc = date + size;\\n                        searchResult.push({\\n                            name:title,\\n                            title: small(color(desc, '#aaaaaa')),\\n                            col_type: \\\"text_1\\\",\\n                            url: url,\\n                            extra: {\\n                                id: id,\\n                                type: it_type,\\n                                title: title,\\n                            }\\n                        })\\n                    }\\n                });\\n                toast('搜索结束，即将加载完毕...');\\n            }\\n            putMyVar('lastSearch', lastSearch);\\n            if(!showDetail){//非详细模式才自动按名称排序\\n                sorts(searchResult,'名称');\\n            }\\n            saveFile('search_results.json', JSON.stringify(searchResult), 0);\\n\\n        } catch (e) {\\n            searchResult.push({\\n                title: \\\"好像不能搜索,点击返回\\\",\\n                desc: e.message,\\n                url: $('#noLoading#').lazyRule(() => {\\n                    back();\\n                    return \\\"hiker://empty\\\"\\n                })\\n            });\\n            putMyVar('lastSearch', lastSearch);\\n            saveFile('search_results.json', JSON.stringify(searchResult), 0);\\n            // log(e.message);\\n        }\\n    }\\n}\\nlet size = storage0.getItem('search_size',20);\\nif(showDetail){size = size*2} // 显示详细需要x2\\nsearchResult = searchResult.slice((MY_PAGE-1)*size,MY_PAGE*size);\\nd = d.concat(searchResult);\\nhideLoading();\\nsetResult(d);\"},{\"name\":\"点击函数\",\"path\":\"clickFunction\",\"rule\":\"function clickLazy(baseurl, npath, path,clickOption,showZimu,input, ext,reload){\\n    if (clickOption !== '菜单') {\\n        let u=$.getU(baseurl,npath,ext);\\n        if(/toast:/.test(u)){\\n            return u\\n        }\\n        if (clickOption === '打开') {\\n            let playUrl = baseurl + \\\"/d\\\" + npath;//文件302直链\\n            u = playUrl; // 既然获取u没报错,为了可以让视频投屏,那么u覆写为302直链\\n            if(ext&&/isVideo/.test(ext)&&showZimu==='开'){//判断打开的是媒体文件才走字幕逻辑\\n                let id = baseurl + npath;//当前文件的唯一标识\\n                let data = {\\n                    title: input,\\n                    desc: id,\\n                    extra:{\\n                        id:id,\\n                    }\\n                };\\n                var now_files = storage0.getMyVar(\\\"now_files\\\",[]);//获取缓存的,避免二次请求\\n                // log('同目录文件数为:'+now_files.length);\\n                if(now_files.length < 1|| reload){//从搜索进去的,只能重新获取了\\n                    const {getFiles} = $.require('hiker://page/api');\\n                    let dirInfo = getFiles(path,'文件');\\n                    now_files = dirInfo.result||[];\\n                    // log('重新获取同目录文件:'+now_files.length);\\n                }\\n                let files;\\n                if(reload){\\n                    files = now_files.filter(x=>x.type!==1&&/\\\\.srt$|\\\\.vtt$|\\\\.ass$|\\\\.ssa$/.test(x.title)).map(x=>x.title); // 筛选文件并且名称含字幕后缀的\\n                }else{\\n                    files = now_files.filter(x=>x.type!==1&&/\\\\.srt$|\\\\.vtt$|\\\\.ass$|\\\\.ssa$/.test(x.name)).map(x=>x.name); // 筛选文件并且名称含字幕后缀的\\n                }\\n                // log(now_files);\\n                if(files.length > 0){//当前目录有字幕文件\\n                    let bestFile = files.find(x=>$.removeExt(input).includes($.removeExt(x)));//视频文件去掉后缀完美包含字幕文件去后缀\\n                    if(bestFile){//找到了最符合的文件名称\\n                        log(`${input}自动匹配最佳外挂字幕文件:${bestFile}`);\\n                        let realUrl = baseurl + '/d' + path + bestFile;\\n                        data.url = JSON.stringify({\\n                            urls: [playUrl],\\n                            subtitle: realUrl\\n                        });\\n                        $.saveHistory(id,data);\\n                        return JSON.stringify({\\n                            urls: [u],\\n                            subtitle: realUrl\\n                        });\\n                    }else{\\n                        files = files.filter(x=>$.similar($.removeExt(input),$.removeExt(x))>=30);//筛选相似度>30的文件\\n                        if (files.length > 0) {\\n                            files.unshift('不需要字幕');\\n                            return $(files, 1, \\\"请选择字幕\\\").select((baseurl, path, u,ext,id,playUrl,data) => {\\n                                if(input==='不需要字幕'){\\n                                    data.url = playUrl+ext;\\n                                    $.saveHistory(id,data);\\n                                    return u+ext\\n                                }\\n                                let realUrl = baseurl + '/d' + path + input;\\n                                data.url = JSON.stringify({\\n                                    urls: [playUrl],\\n                                    subtitle: realUrl\\n                                });\\n                                $.saveHistory(id,data);\\n                                return JSON.stringify({\\n                                    urls: [u],\\n                                    subtitle: realUrl\\n                                });\\n                            }, baseurl, path, u,ext,id,playUrl,data);\\n                        } else {\\n                            data.url = playUrl + ext;\\n                            $.saveHistory(id,data);\\n                            return u + ext\\n                        }\\n                    }\\n                }else{\\n                    data.url = playUrl + ext;\\n                    $.saveHistory(id,data);\\n                    return u + ext\\n                }\\n            }else if(ext&&/isVideo/.test(ext)&&showZimu!=='开'){\\n                let id = baseurl + npath;//当前文件的唯一标识\\n                let data = {\\n                    title: input,\\n                    desc: id,\\n                    url:playUrl + ext,\\n                    extra:{\\n                        id:id,\\n                    }\\n                };\\n                $.saveHistory(id,data);\\n                return u + ext\\n            }else{\\n                return u + ext\\n            }\\n        }\\n        if (clickOption === '打开') {\\n            return u\\n        } else if (clickOption === '下载') {\\n            return 'download://' + u\\n        }\\n    }else{\\n\\n        return $(['打开', '下载', '预览', '复制直链'], 2, '请选择1个文件操作').select((baseurl, npath,ext) => {\\n            let u=$.getU(baseurl,npath,ext);\\n            if(/toast:/.test(u)){\\n                return u\\n            }\\n            let realUrl = baseurl + '/d' + npath;\\n            if (input === '打开') {\\n                return u;\\n            } else if (input === '下载') {\\n                return 'download://' + u\\n            } else if (input === '复制直链') {\\n                return 'copy://' + realUrl\\n            } else if (input === '预览') {\\n                if (/\\\\.md$/.test(realUrl)) {\\n                    return $.renderText(realUrl,'md');\\n                } else if (/\\\\.html$|\\\\.json$|\\\\.js$|\\\\.css$|\\\\.py$|\\\\.php$|\\\\.go$/.test(realUrl)) {\\n                    return $.renderText(realUrl,'code');\\n                } else if (/\\\\.txt$/.test(realUrl)) {\\n                    return $.renderText(realUrl,'txt');\\n                } else if (/\\\\.pdf$/.test(realUrl)) {\\n                    return \\\"x5://https://alist-org.github.io/pdf.js/web/viewer.html?file=\\\" + realUrl\\n                } else if ($.isOffice(realUrl)) {\\n                    return \\\"x5://https://view.officeapps.live.com/op/view.aspx?src=\\\" + realUrl\\n                } else {\\n                    let sub_urls = $.get_sub_urls();\\n                    let password = sub_urls.find(x => x.url.includes(baseurl)).password || {};\\n                    let res = JSON.parse(post(baseurl + \\\"/api/public/preview\\\", {\\n                        headers: {\\n                            \\\"Content-Type\\\": \\\"application/json\\\"\\n                        },\\n                        body: JSON.stringify({\\n                            path: npath,\\n                            password: password[npath] || \\\"\\\",\\n                        }),\\n                        timeout: $.getTimeOut(),\\n                    }));\\n                    if (res.data) {\\n                        return res.data.preview_url + '&access_token=' + res.data.access_token;\\n                    } else {\\n                        return 'toast://' + res.message;\\n                    }\\n                }\\n            } else {\\n                return 'toast://无效操作'\\n            }\\n        },baseurl, npath,ext);\\n\\n    }\\n}\\n\\n$.exports.clickLazy = clickLazy;\"}]","proxy":"","icon":"https://cdn.jsdelivr.net/gh/alist-org/logo@main/can_circle.svg"},{"last_chapter_rule":"","title":"爱恋动漫BT2","author":"小棉袄🌞","version":0,"type":"video","url":"hiker://empty##http://m.kisssub.org/","col_type":"text_1","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nsetResult([{\n    url: MY_URL.split(\"##\")[1],\n    col_type: \"x5_webview_single\",\n    desc: \"100%&&float\",\n    extra: {\n        canBack: true,\n        urlInterceptor: $.toString((ru) => {\n            if (input.startsWith(\"http://m.kisssub.org/show-\")) {\n                let s = JSON.stringify({\n                    title: \"详情\",\n                    url: \"hiker://page/dt?rule=\" + ru,\n                    extra: {\n                        url: input\n                    }\n                });\n                return $.toString(s => {\n                    try {\n                        fy_bridge_app.open(s)\n                    } catch (e) {\n                        fy_bridge_app.log(e.toString());\n                    }\n                }, s);\n            }\n            if (!input.includes(\"/search.php?keyword=\")) {\n                return false;\n            }\n            let t = decodeURIComponent(input.split(\"keyword=\")[1]);\n            let s = JSON.stringify({\n                title: t,\n                url: \"hiker://empty\",\n                findRule: \"js:\" + $.toString((u, ru) => {\n                    let js = $.toString(() => {\n                        try {\n                            if (document.title && document.title.length) {\n                                let r = $$$().lazyRule((t) => {\n                                    setPageTitle(t);\n                                }, document.title);\n                                fy_bridge_app.parseLazyRule(r);\n                            }\n                        } catch (e) {\n                            fy_bridge_app.log(e.toString());\n                        }\n                    });\n                    setResult([{\n                        url: u,\n                        col_type: \"x5_webview_single\",\n                        extra: {\n                            canBack: true,\n                            js: js,\n                            urlInterceptor: $.toString((ru) => {\n                                if (input.startsWith(\"http://m.kisssub.org/show-\")) {\n                                    let s = JSON.stringify({\n                                        title: \"详情\",\n                                        url: \"hiker://page/dt?rule=\" + ru,\n                                        extra: {\n                                            url: input\n                                        }\n                                    });\n                                    return $.toString(s => {\n                                        try {\n                                            fy_bridge_app.open(s)\n                                        } catch (e) {\n                                            fy_bridge_app.log(e.toString());\n                                        }\n                                    }, s);\n                                }\n                            }, ru)\n                        },\n                        desc: \"100%&&float\"\n                    }]);\n                }, input, ru)\n            });\n            return $.toString(s => {\n                try {\n                    fy_bridge_app.open(s)\n                } catch (e) {\n                    fy_bridge_app.log(e.toString());\n                }\n            }, s)\n        }, MY_RULE.title)\n    }\n}])","searchFind":"","search_url":"http://m.kisssub.org/show-.*","group":"④动漫","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"text_1\",\"name\":\"详情\",\"path\":\"dt\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    let html = getResCode();\\n    let Config = {};\\n    let el = pdfh(html, \\\".data_top&&script&&Html\\\");\\n    log(el);\\n    eval(el);\\n    let u = 'magnet:?xt=urn:btih:' + Config['hash_id'];\\n    let t = pdfh(html, \\\"h1.title&&Text\\\");\\n    setPageTitle(t);\\n    d.push({\\n        title: \\\"播放：\\\" + t,\\n        url: u,\\n    });\\n} catch (e) {\\n    log(e.toString())\\n}\\nd.push({\\n    title: \\\"查看原网页\\\",\\n    url: \\\"x5://\\\" + MY_URL,\\n    col_type: \\\"text_1\\\"\\n});\\nsetResult(d);\"}]","proxy":"","icon":""},{"last_chapter_rule":"","title":"聚直播","author":"小棉袄🌞&Joker","version":6,"type":"live","url":"hiker://empty","col_type":"icon_2_round","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(JSON.parse(request(\"hiker://page/config\")).rule); //getConfig\n\nlet data = [],\n    config = getConfig();\nconfig.data = config.data.filter(v => !v.inVisible);\nif (config.data.length <= 0) {\n    data = $.require('hiker://page/renderSetting').renderSetting();\n} else {\n    let select = getItem(\"live-select\", config.data[0].name),\n        has = config.data.map(i => i.name).includes(select);\n    if (!has) {\n        select = config.data[0].name;\n    }\n    \n    data.push({\n        title: '聚直播'.bold() + ' &nbsp &nbsp ' + '⚙ 聚直播设置 ⚙'.small(),\n        col_type: \"avatar\",\n        pic_url: MY_RULE.icon,\n        url: $(\"hiker://empty#noLoading#\").rule(() => {\n            addListener('onClose','refreshPage()')\n            setResult($.require('hiker://page/renderSetting').renderSetting())\n        })\n    })\n\n    data.push({\n        title: '搜索',\n        desc: '请输入搜索关键词',\n        extra: {\n            defaultValue: getVar('search_key', ''),\n            onChange: 'putVar(\"search_key\",input)'\n        },\n        col_type: 'input',\n        url: $.toString(() => {\n            return 'hiker://search?rule=' + getMyVar('title') + '&s=' + getVar('search_key', '')\n        })\n    })\n    \n    \n    \n    for (source of config.data) {\n        data.push({\n            title: source.name == select ? \"““””<span style='color: #19B89D'>\" + select + \"</span>\" : source.name,\n            col_type: \"scroll_button\",\n            url: $('#noLoading#').lazyRule((a) => {\n                setItem(\"live-select\", a);\n                setItem('selectGroup', '');\n                refreshPage();\n                return \"hiker://empty\"\n            }, source.name)\n        })\n    }\n\n    data.push({\n        col_type: 'blank_block'\n    })\n\n    for (source of config.data) {\n        if (source.name == select) {\n            try {\n                let items = $.require('hiker://page/renderData').renderLiveData(source.url);\n                let groups = Object.keys(items);\n                //groups.push(groups.splice(groups.indexOf(0), 1)[0]);\n                let selectGroup = getItem('selectGroup', groups[0]);\n                if (selectGroup == \"\" || !groups.includes(selectGroup)) selectGroup = groups[0];\n                groups.forEach((group) => {\n                    if (group) {\n                        data.push({\n                            title: group == selectGroup ? \"““””<span style='color: #19B89D'>\" + group + \"</span>\" : group,\n                            url: $('#noLoading#').lazyRule((group) => {\n                                setItem('selectGroup', group);\n                                refreshPage();\n                                return 'hiker://empty'\n                            }, group),\n                            col_type: 'scroll_button',\n                            extra: {\n                                lineVisible: false\n                            }\n                        })\n                    }\n                })\n                for (let title in items[selectGroup]) {\n                    data.push({\n                        title: title,\n                        url: JSON.stringify({\n                            urls: items[selectGroup][title].url,\n                            headers: items[selectGroup][title].headers\n                        }),\n                        col_type: 'icon_2_round',\n                        img: \"https://lanmeiguojiang.com/tubiao/more/228.png\"\n                    })\n                }\n            } catch (e) {\n                data.push({\n                    title: \"数据加载失败\\n\" + JSON.stringify(e),\n                    col_type: \"long_text\"\n                })\n            }\n            break;\n        }\n    }\n\n\n}\nsetResult(data);","searchFind":"js:\neval(JSON.parse(request(\"hiker://page/config\")).rule);\nlet config = getConfig();\nlet rules = config.data.map((source) => {\n    return {\n        title: source.name,\n        search_url: 'hiker://empty?key=**',\n        searchFind: 'js:' + $.toString((url, rule_title) => {\n            let d = [],\n                key = getParam('key');\n            let items = $.require('hiker://page/renderData?rule=' + rule_title).renderLiveData(url);\n            for (let group in items) {\n                for (let title in items[group]) {\n                    if (title.indexOf(key) >= 0 || title.toLowerCase().indexOf(key) >= 0) {\n                        d.push({\n                            title: title,\n                            url: JSON.stringify({\n                                urls: items[group][title].url,\n                                headers: items[group][title].headers\n                            })\n                        })\n                    }\n                }\n            }\n            setResult(d);\n        }, source.url, getMyVar('title'))\n    };\n})\nsetResult([{\n    title: \"点我开始聚搜\",\n    url: \"hiker://search?s=\" + getParam(\"key\"),\n    extra: {\n        rules: $.toString((rules) => {\n            return JSON.stringify(rules)\n        }, rules)\n    }\n}])","search_url":"hiker://empty?key=**","group":"⑥直播","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"putMyVar('title',MY_RULE.title);","pages":"[{\"col_type\":\"movie_3\",\"name\":\"加载数据\",\"path\":\"config\",\"rule\":\"function getConfig() {\\n    try {\\n        let config = fetch(\\\"hiker://files/rules/live/config.json\\\");\\n        if (!config || config == \\\"\\\") {\\n            return {\\n                data: [],\\n                version: 0\\n            }\\n        } else {\\n            return JSON.parse(config)\\n        }\\n    } catch (e) {\\n        try {\\n            toast(\\\"配置文件格式有误\\\")\\n        } catch (e) {}\\n        return {\\n            data: [],\\n            version: 0\\n        }\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"批量导入\",\"path\":\"batchIm\",\"rule\":\"function batchImport(input, rule) {\\n    input = input.trim();\\n    if (input.length < 3 || input[0] != \\\"{\\\") {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    let im = JSON.parse(input);\\n    if (im.data == null || im.data.length < 1) {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    eval(JSON.parse(request(\\\"hiker://page/config?rule=\\\" + rule)).rule);\\n    let config = getConfig();\\n    let count = 0;\\n    let all = config.data.map(it => it.url + \\\"&&&\\\").join();\\n    for (let i of im.data) {\\n        if (all.indexOf(i.url + \\\"&&&\\\") >= 0) {\\n            //重复的不要\\n            continue;\\n        }\\n        count++;\\n        config.data.push(i)\\n    }\\n    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n    refreshPage();\\n    return \\\"toast://已导入\\\" + count + \\\"条订阅源\\\";\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"直播数据\",\"path\":\"renderData\",\"rule\":\"function renderLiveData(url) {\\n    let m3u = \\\"\\\";\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        m3u = fetch(url);\\n    } else {\\n        let interval = Number(getItem('interval', '24')),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = '';\\n        try {\\n            remoteData = fetchCache(url, interval, {\\n                timeout: 50000\\n            });\\n        } catch (e) {}\\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \\n            log('更新失败');\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\\n            m3u = oldData;\\n        } else {\\n            m3u = remoteData;\\n        }\\n    }\\n\\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\\n    if(mode){\\n        re = /(.*),(.*)\\\\s*?((?:http|rtmp)[^#\\\\s]*)/g;\\n    }else{\\n        re = /()(?:\\\\B\\\\$c_start|\\\\B#{1,2})?(.*?),?(##|头#|\\\\$c_end|,#genre#|(?:http|rtmp)[^\\\\s]*)/g;\\n    }\\n        \\n    let items = {},\\n        group = '未分组';\\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\\n        if (mode) {\\n            group = (i[1].match(/group-title=\\\"(.*?)\\\"/) || [null, group])[1];\\n        } else if ([',#genre#','##','头#','$c_end'].includes(i[3])) {\\n            group = i[2];\\n            continue;\\n        }\\n        let title = i[2],\\n            url = i[3].includes('#') ? i[3].split('#') : [i[3]],\\n            headers = [];\\n        if(!url[url.length-1]) url.pop();\\n        url.forEach((v,index,array)=>{\\n            if(/;\\\\{(.*)\\\\}/.test(v)){\\n                let obj = {},\\n                     con = v.match(/;\\\\{(.*)\\\\}/)[1],\\n                     arr = con.split('&&');\\n                arr.forEach((i)=>{\\n                    let [key,value] = i.split('@');\\n                    obj[key] = value.replace(/;/g,'；；');\\n                })\\n                array[index] = v.match(/^([^;]*);\\\\{/)[1]\\n                headers.push(obj);\\n            }else{\\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\\n            }\\n            array[index] = array[index].replace(/;/g,'；；')+'#isVideo=true#';\\n        });\\n        if (items[group]) {\\n            if (items[group][title]) {\\n                items[group][title].url = items[group][title].url.concat(url);\\n                items[group][title].headers = items[group][title].headers.concat(headers);\\n            } else {\\n                items[group][title] = {url:url,headers:headers};\\n            }\\n        } else {\\n            items[group] = {};\\n            items[group][title] = {url:url,headers:headers};\\n        };\\n    }\\n    return items;\\n}\\n\\n$.exports = {\\n    renderLiveData: renderLiveData\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"设置页\",\"path\":\"renderSetting\",\"rule\":\"function renderSetting() {\\n    function getColoredText(text) {\\n        return '““””<span style=\\\"color: #19B89D\\\">' + text + '</span>';\\n    }\\n    const d = [];\\n    let interval = getItem('interval', '24');\\n    d.push({\\n        title: interval == -1 ? '已禁止自动更新'.fontcolor(\\\"#19B89D\\\").bold() : ('更新间隔:' + interval + '小时').fontcolor(\\\"#19B89D\\\").bold(),\\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\\\n为0时，每次打开都会更新\\\\n为-1时，禁止自动更新').input(() => {\\n            if (parseInt(input) >= -1) {\\n                setItem('interval', input);\\n            }\\n            refreshPage();\\n            return 'hiker://empty'\\n        }),\\n        pic_url: 'https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple3%2Fv4%2Fdf%2Ff6%2Fda%2Fdff6da83-47d7-9cb6-2398-1919c13837b4%2Fmzl.kgmnwodo.png%2F0x0ss-85.jpg&refer=http%3A%2F%2Fis4.mzstatic.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638629349&t=2f6d967185fe2b9c54e8b230eb83e66c',\\n        col_type: \\\"avatar\\\"\\n    });\\n\\n    d.push({\\n        col_type: \\\"big_blank_block\\\"\\n    });\\n\\n    d.push({\\n        title: getColoredText(\\\"导入订阅\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        desc: \\\"请输入直播源订阅地址\\\",\\n        url: $('', '请输入订阅地址').input((rule) => {\\n            if (input == \\\"\\\") {\\n                return \\\"toast://不能为空\\\"\\n            } else if (input.indexOf(\\\"http\\\") != 0 && input.indexOf(\\\"file\\\") != 0 && input.indexOf(\\\"hiker\\\") != 0) {\\n                return \\\"toast://链接格式有误\\\"\\n            } else {\\n                return $('',\\\"请输入订阅标题\\\").input((url, rule) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config?rule=\\\" + rule)).rule);\\n                    let config = getConfig();\\n                    config.data.push({\\n                        name: input,\\n                        url: url\\n                    });\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage();\\n                    return \\\"toast://已保存\\\";\\n                }, input, rule)\\n            }\\n        }, getMyVar('title'))\\n    });\\n\\n    d.push({\\n        title: getColoredText(\\\"批量导入\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: $('','支持原始数据和云剪贴板分享链接').input((rule) => {\\n            eval(JSON.parse(request(\\\"hiker://page/batchIm?rule=\\\" + rule)).rule);\\n            if (input.startsWith('聚直播分享##')) {\\n                input = parsePaste(input.split('##\\\\n')[1]);\\n            }\\n            return batchImport(input, rule);\\n        }, getMyVar('title'))\\n    });\\n    d.push({\\n        title: getColoredText(\\\"导出全部\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: $([\\\"原始数据\\\", \\\"云剪贴板\\\"], 1).select(() => {\\n            return $('确定导出？\\\\n(禁用订阅不会导出)').confirm((type) => {\\n                eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                config = getConfig();\\n                config.data = config.data.filter(v => !v.inVisible);\\n                if (type == \\\"云剪贴板\\\") {\\n                    var data = '聚直播分享##\\\\n' + sharePaste(JSON.stringify(config));\\n                } else {\\n                    var data = JSON.stringify(config);\\n                }\\n                return \\\"copy://\\\" + data;\\n            }, input)\\n        })\\n    });\\n    d.push({\\n        title: getColoredText(\\\"编辑全部\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: \\\"editFile://hiker://files/rules/live/config.json\\\"\\n    });\\n\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n\\n    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n    config = getConfig();\\n    let editMode = getMyVar('editMode', '启用禁用');\\n    ['启用禁用', '删除订阅', '重新排序', '编辑订阅','清除缓存'].forEach((v) => {\\n        d.push({\\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\\n            url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\n                putMyVar('editMode', v)\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, v),\\n            col_type: 'scroll_button'\\n        })\\n    });\\n    config.data.forEach((v, i) => {\\n        let el = {\\n            title: v.name,\\n            col_type: \\\"text_3\\\"\\n        }\\n        switch (editMode) {\\n            case '启用禁用':\\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\\n                el.url = $('#noLoading#').lazyRule((i) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                    config = getConfig();\\n                    config.data[i].inVisible = !config.data[i].inVisible;\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage(false);\\n                    return 'hiker://empty'\\n                }, i)\\n                break\\n            case '删除订阅':\\n                el.url = \\\"confirm://确认删除“\\\" + v.name + \\\"”订阅？.js:\\\" + $.toString((name) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                    config = getConfig();\\n                    config.data = config.data.filter(i => i.name != name);\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage(false);\\n                    return \\\"toast://已删除\\\";\\n                }, v.name)\\n                break\\n            case '重新排序':\\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\\n                if (sortFlag == -1)\\n                    el.url = $('#noLoading#').lazyRule((i) => {\\n                        putMyVar('sortFlag', i.toString())\\n                        refreshPage(false)\\n                        return 'toast://选择要移动到的位置'\\n                    }, i)\\n                else\\n                    el.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\n                        eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                        config = getConfig();\\n                        config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\\n                        writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                        putMyVar('sortFlag', '-1')\\n                        refreshPage(false)\\n                        return 'hiker://empty'\\n                    }, sortFlag, i)\\n                break\\n            case '编辑订阅':\\n                let arr = ['编辑名称', '编辑地址', '编辑内容'];\\n                el.url = $(arr, 3).select((v, i) => {\\n                    if (input == '编辑名称') {\\n                        return $(v.name, '输入新名称').input((i) => {\\n                            eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                            config = getConfig();\\n                            if (input) {\\n                                config.data[i].name = input\\n                                writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                                refreshPage(false)\\n                                return 'toast://修改成功'\\n                            } else {\\n                                return 'toast://不能为空'\\n                            }\\n                        }, i);\\n                    } else if (input == '编辑地址') {\\n                        return $(v.url, '输入新地址').input((i) => {\\n                            eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                            config = getConfig();\\n                            if (input == \\\"\\\") {\\n                                return \\\"toast://不能为空\\\"\\n                            } else if (input.indexOf(\\\"http\\\") != 0 && input.indexOf(\\\"file\\\") != 0 && input.indexOf(\\\"hiker\\\") != 0) {\\n                                return \\\"toast://链接格式有误\\\"\\n                            } else {\\n                                config.data[i].url = input\\n                                writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                                refreshPage(false)\\n                                return 'toast://修改成功'\\n                            }\\n                        }, i);\\n                    } else if (input == '编辑内容') {\\n                        if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\\n                            return 'editFile://' + v.url;\\n                        }\\n                        return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\\n                    }\\n                }, v, i);\\n                break;\\n            case '清除缓存':\\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\\\n(可立即更新)').confirm((url)=>{\\n                    deleteCache(url);\\n                    return 'toast://清除成功'\\n                },v.url)\\n                break;\\n        }\\n        d.push(el)\\n    });\\n    return d;\\n}\\n\\n$.exports = {\\n    renderSetting: renderSetting\\n}\"}]","proxy":"","icon":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple3%2Fv4%2Fdf%2Ff6%2Fda%2Fdff6da83-47d7-9cb6-2398-1919c13837b4%2Fmzl.kgmnwodo.png%2F0x0ss-85.jpg&refer=http%3A%2F%2Fis4.mzstatic.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638629349&t=2f6d967185fe2b9c54e8b230eb83e66c"}]